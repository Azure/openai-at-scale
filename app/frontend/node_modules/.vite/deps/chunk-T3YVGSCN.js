import {
  HighContrastSelector,
  classNamesFunction,
  getGlobalClassNames,
  getHighContrastNoAdjustStyle,
  getId,
  getRTL,
  keyframes,
  memoizeFunction,
  noWrap,
  styled
} from "./chunk-T6AX7RXF.js";
import {
  __assign,
  __extends
} from "./chunk-YSMJTNBI.js";
import {
  require_react
} from "./chunk-Y2Z4LR3N.js";
import {
  __toESM
} from "./chunk-GKWPUQBP.js";

// node_modules/@fluentui/react/lib/components/ProgressIndicator/ProgressIndicator.base.js
var React = __toESM(require_react());
var getClassNames = classNamesFunction();
var ZERO_THRESHOLD = 0.01;
var ProgressIndicatorBase = (
  /** @class */
  function(_super) {
    __extends(ProgressIndicatorBase2, _super);
    function ProgressIndicatorBase2(props) {
      var _this = _super.call(this, props) || this;
      _this._onRenderProgress = function(props2) {
        var _a = _this.props, ariaLabel = _a.ariaLabel, ariaValueText = _a.ariaValueText, barHeight = _a.barHeight, className = _a.className, description = _a.description, _b = _a.label, label = _b === void 0 ? _this.props.title : _b, styles = _a.styles, theme = _a.theme;
        var percentComplete = typeof _this.props.percentComplete === "number" ? Math.min(100, Math.max(0, _this.props.percentComplete * 100)) : void 0;
        var classNames = getClassNames(styles, {
          theme,
          className,
          barHeight,
          indeterminate: percentComplete === void 0 ? true : false
        });
        var progressBarStyles = {
          width: percentComplete !== void 0 ? percentComplete + "%" : void 0,
          transition: percentComplete !== void 0 && percentComplete < ZERO_THRESHOLD ? "none" : void 0
        };
        var ariaValueMin = percentComplete !== void 0 ? 0 : void 0;
        var ariaValueMax = percentComplete !== void 0 ? 100 : void 0;
        var ariaValueNow = percentComplete !== void 0 ? Math.floor(percentComplete) : void 0;
        return React.createElement(
          "div",
          { className: classNames.itemProgress },
          React.createElement("div", { className: classNames.progressTrack }),
          React.createElement("div", { className: classNames.progressBar, style: progressBarStyles, role: "progressbar", "aria-describedby": description ? _this._descriptionId : void 0, "aria-label": ariaLabel, "aria-labelledby": label ? _this._labelId : void 0, "aria-valuemin": ariaValueMin, "aria-valuemax": ariaValueMax, "aria-valuenow": ariaValueNow, "aria-valuetext": ariaValueText })
        );
      };
      var id = getId("progress-indicator");
      _this._labelId = id + "-label";
      _this._descriptionId = id + "-description";
      return _this;
    }
    ProgressIndicatorBase2.prototype.render = function() {
      var _a = this.props, barHeight = _a.barHeight, className = _a.className, _b = _a.label, label = _b === void 0 ? this.props.title : _b, description = _a.description, styles = _a.styles, theme = _a.theme, progressHidden = _a.progressHidden, _c = _a.onRenderProgress, onRenderProgress = _c === void 0 ? this._onRenderProgress : _c;
      var percentComplete = typeof this.props.percentComplete === "number" ? Math.min(100, Math.max(0, this.props.percentComplete * 100)) : void 0;
      var classNames = getClassNames(styles, {
        theme,
        className,
        barHeight,
        indeterminate: percentComplete === void 0 ? true : false
      });
      return React.createElement(
        "div",
        { className: classNames.root },
        label ? React.createElement("div", { id: this._labelId, className: classNames.itemName }, label) : null,
        !progressHidden ? onRenderProgress(__assign(__assign({}, this.props), { percentComplete }), this._onRenderProgress) : null,
        description ? React.createElement("div", { id: this._descriptionId, className: classNames.itemDescription }, description) : null
      );
    };
    ProgressIndicatorBase2.defaultProps = {
      label: "",
      description: "",
      width: 180
    };
    return ProgressIndicatorBase2;
  }(React.Component)
);

// node_modules/@fluentui/react/lib/components/ProgressIndicator/ProgressIndicator.styles.js
var GlobalClassNames = {
  root: "ms-ProgressIndicator",
  itemName: "ms-ProgressIndicator-itemName",
  itemDescription: "ms-ProgressIndicator-itemDescription",
  itemProgress: "ms-ProgressIndicator-itemProgress",
  progressTrack: "ms-ProgressIndicator-progressTrack",
  progressBar: "ms-ProgressIndicator-progressBar"
};
var IndeterminateProgress = memoizeFunction(function() {
  return keyframes({
    "0%": {
      left: "-30%"
    },
    "100%": {
      left: "100%"
    }
  });
});
var IndeterminateProgressRTL = memoizeFunction(function() {
  return keyframes({
    "100%": {
      right: "-30%"
    },
    "0%": {
      right: "100%"
    }
  });
});
var getStyles = function(props) {
  var _a, _b, _c;
  var isRTL = getRTL(props.theme);
  var className = props.className, indeterminate = props.indeterminate, theme = props.theme, _d = props.barHeight, barHeight = _d === void 0 ? 2 : _d;
  var palette = theme.palette, semanticColors = theme.semanticColors, fonts = theme.fonts;
  var classNames = getGlobalClassNames(GlobalClassNames, theme);
  var marginBetweenText = 8;
  var textHeight = 18;
  var progressTrackColor = palette.neutralLight;
  return {
    root: [classNames.root, fonts.medium, className],
    itemName: [
      classNames.itemName,
      noWrap,
      {
        color: semanticColors.bodyText,
        paddingTop: marginBetweenText / 2,
        lineHeight: textHeight + 2
      }
    ],
    itemDescription: [
      classNames.itemDescription,
      {
        color: semanticColors.bodySubtext,
        fontSize: fonts.small.fontSize,
        lineHeight: textHeight
      }
    ],
    itemProgress: [
      classNames.itemProgress,
      {
        position: "relative",
        overflow: "hidden",
        height: barHeight,
        padding: marginBetweenText + "px 0"
      }
    ],
    progressTrack: [
      classNames.progressTrack,
      {
        position: "absolute",
        width: "100%",
        height: barHeight,
        backgroundColor: progressTrackColor,
        selectors: (_a = {}, _a[HighContrastSelector] = {
          borderBottom: "1px solid WindowText"
        }, _a)
      }
    ],
    progressBar: [
      {
        backgroundColor: palette.themePrimary,
        height: barHeight,
        position: "absolute",
        transition: "width .3s ease",
        width: 0,
        selectors: (_b = {}, _b[HighContrastSelector] = __assign({ backgroundColor: "highlight" }, getHighContrastNoAdjustStyle()), _b)
      },
      indeterminate ? {
        position: "absolute",
        minWidth: "33%",
        background: "linear-gradient(to right, " + progressTrackColor + " 0%, " + (palette.themePrimary + " 50%, " + progressTrackColor + " 100%)"),
        animation: (isRTL ? IndeterminateProgressRTL() : IndeterminateProgress()) + " 3s infinite",
        selectors: (_c = {}, _c[HighContrastSelector] = {
          background: "highlight"
        }, _c)
      } : {
        transition: "width .15s linear"
      },
      classNames.progressBar
    ]
  };
};

// node_modules/@fluentui/react/lib/components/ProgressIndicator/ProgressIndicator.js
var ProgressIndicator = styled(ProgressIndicatorBase, getStyles, void 0, { scope: "ProgressIndicator" });

export {
  ProgressIndicatorBase,
  ProgressIndicator
};
//# sourceMappingURL=chunk-T3YVGSCN.js.map
