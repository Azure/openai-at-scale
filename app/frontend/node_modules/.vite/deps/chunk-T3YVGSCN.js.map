{
  "version": 3,
  "sources": ["../../@fluentui/react/lib/components/ProgressIndicator/components/ProgressIndicator/ProgressIndicator.base.tsx", "../../@fluentui/react/lib/components/ProgressIndicator/components/ProgressIndicator/ProgressIndicator.styles.ts", "../../@fluentui/react/lib/components/ProgressIndicator/components/ProgressIndicator/ProgressIndicator.tsx"],
  "sourcesContent": ["import * as React from 'react';\nimport { classNamesFunction, getId } from '../../Utilities';\nimport type {\n  IProgressIndicatorProps,\n  IProgressIndicatorStyleProps,\n  IProgressIndicatorStyles,\n} from './ProgressIndicator.types';\n\nconst getClassNames = classNamesFunction<IProgressIndicatorStyleProps, IProgressIndicatorStyles>();\n\n// if the percentComplete is near 0, don't animate it.\n// This prevents animations on reset to 0 scenarios\nconst ZERO_THRESHOLD = 0.01;\n\n/**\n * ProgressIndicator with no default styles.\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\nexport class ProgressIndicatorBase extends React.Component<IProgressIndicatorProps, {}> {\n  public static defaultProps = {\n    label: '',\n    description: '',\n    width: 180,\n  };\n\n  private _labelId: string;\n  private _descriptionId: string;\n\n  constructor(props: IProgressIndicatorProps) {\n    super(props);\n\n    const id = getId('progress-indicator');\n    this._labelId = id + '-label';\n    this._descriptionId = id + '-description';\n  }\n\n  public render() {\n    const {\n      barHeight,\n      className,\n      // eslint-disable-next-line deprecation/deprecation\n      label = this.props.title, // Fall back to deprecated value.\n      description,\n      styles,\n      theme,\n      progressHidden,\n      onRenderProgress = this._onRenderProgress,\n    } = this.props;\n\n    const percentComplete =\n      typeof this.props.percentComplete === 'number'\n        ? Math.min(100, Math.max(0, this.props.percentComplete * 100))\n        : undefined;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      barHeight,\n      indeterminate: percentComplete === undefined ? true : false,\n    });\n\n    return (\n      <div className={classNames.root}>\n        {label ? (\n          <div id={this._labelId} className={classNames.itemName}>\n            {label}\n          </div>\n        ) : null}\n        {!progressHidden\n          ? onRenderProgress(\n              {\n                ...(this.props as IProgressIndicatorProps),\n                percentComplete: percentComplete,\n              },\n              this._onRenderProgress,\n            )\n          : null}\n        {description ? (\n          <div id={this._descriptionId} className={classNames.itemDescription}>\n            {description}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n\n  private _onRenderProgress = (props: IProgressIndicatorProps): JSX.Element => {\n    const {\n      ariaLabel,\n      ariaValueText,\n      barHeight,\n      className,\n      description,\n      // eslint-disable-next-line deprecation/deprecation\n      label = this.props.title,\n      styles,\n      theme,\n    } = this.props;\n\n    const percentComplete =\n      typeof this.props.percentComplete === 'number'\n        ? Math.min(100, Math.max(0, this.props.percentComplete * 100))\n        : undefined;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      barHeight,\n      indeterminate: percentComplete === undefined ? true : false,\n    });\n\n    const progressBarStyles = {\n      width: percentComplete !== undefined ? percentComplete + '%' : undefined,\n      transition: percentComplete !== undefined && percentComplete < ZERO_THRESHOLD ? 'none' : undefined,\n    };\n\n    const ariaValueMin = percentComplete !== undefined ? 0 : undefined;\n    const ariaValueMax = percentComplete !== undefined ? 100 : undefined;\n    const ariaValueNow = percentComplete !== undefined ? Math.floor(percentComplete!) : undefined;\n\n    return (\n      <div className={classNames.itemProgress}>\n        <div className={classNames.progressTrack} />\n        <div\n          className={classNames.progressBar}\n          style={progressBarStyles}\n          role=\"progressbar\"\n          aria-describedby={description ? this._descriptionId : undefined}\n          aria-label={ariaLabel}\n          aria-labelledby={label ? this._labelId : undefined}\n          aria-valuemin={ariaValueMin}\n          aria-valuemax={ariaValueMax}\n          aria-valuenow={ariaValueNow}\n          aria-valuetext={ariaValueText}\n        />\n      </div>\n    );\n  };\n}\n", "import {\n  HighContrastSelector,\n  keyframes,\n  noWrap,\n  getGlobalClassNames,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { getRTL, memoizeFunction } from '../../Utilities';\nimport type { IRawStyle } from '../../Styling';\nimport type { IProgressIndicatorStyleProps, IProgressIndicatorStyles } from './ProgressIndicator.types';\n\nconst GlobalClassNames = {\n  root: 'ms-ProgressIndicator',\n  itemName: 'ms-ProgressIndicator-itemName',\n  itemDescription: 'ms-ProgressIndicator-itemDescription',\n  itemProgress: 'ms-ProgressIndicator-itemProgress',\n  progressTrack: 'ms-ProgressIndicator-progressTrack',\n  progressBar: 'ms-ProgressIndicator-progressBar',\n};\n\nconst IndeterminateProgress = memoizeFunction(() =>\n  keyframes({\n    '0%': {\n      left: '-30%',\n    },\n    '100%': {\n      left: '100%',\n    },\n  }),\n);\n\nconst IndeterminateProgressRTL = memoizeFunction(() =>\n  keyframes({\n    '100%': {\n      right: '-30%',\n    },\n    '0%': {\n      right: '100%',\n    },\n  }),\n);\n\nexport const getStyles = (props: IProgressIndicatorStyleProps): IProgressIndicatorStyles => {\n  const isRTL = getRTL(props.theme);\n  const { className, indeterminate, theme, barHeight = 2 } = props;\n\n  const { palette, semanticColors, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const marginBetweenText = 8;\n  const textHeight = 18;\n  const progressTrackColor = palette.neutralLight;\n\n  return {\n    root: [classNames.root, fonts.medium, className],\n\n    itemName: [\n      classNames.itemName,\n      noWrap,\n      {\n        color: semanticColors.bodyText,\n        paddingTop: marginBetweenText / 2,\n        lineHeight: textHeight + 2,\n      },\n    ],\n\n    itemDescription: [\n      classNames.itemDescription,\n      {\n        color: semanticColors.bodySubtext,\n        fontSize: fonts.small.fontSize,\n        lineHeight: textHeight,\n      },\n    ],\n\n    itemProgress: [\n      classNames.itemProgress,\n      {\n        position: 'relative',\n        overflow: 'hidden',\n        height: barHeight,\n        padding: `${marginBetweenText}px 0`,\n      },\n    ],\n\n    progressTrack: [\n      classNames.progressTrack,\n      {\n        position: 'absolute',\n        width: '100%',\n        height: barHeight,\n        backgroundColor: progressTrackColor,\n\n        selectors: {\n          [HighContrastSelector]: {\n            borderBottom: '1px solid WindowText',\n          },\n        },\n      },\n    ],\n\n    progressBar: [\n      {\n        backgroundColor: palette.themePrimary,\n        height: barHeight,\n        position: 'absolute',\n        transition: 'width .3s ease',\n        width: 0,\n\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'highlight',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      indeterminate\n        ? ({\n            position: 'absolute',\n            minWidth: '33%',\n            background:\n              `linear-gradient(to right, ${progressTrackColor} 0%, ` +\n              `${palette.themePrimary} 50%, ${progressTrackColor} 100%)`,\n            animation: `${isRTL ? IndeterminateProgressRTL() : IndeterminateProgress()} 3s infinite`,\n            selectors: {\n              [HighContrastSelector]: {\n                background: `highlight`,\n              },\n            },\n          } as IRawStyle)\n        : ({\n            transition: 'width .15s linear',\n          } as IRawStyle),\n      classNames.progressBar,\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ProgressIndicatorBase } from './ProgressIndicator.base';\nimport { getStyles } from './ProgressIndicator.styles';\nimport type {\n  IProgressIndicatorProps,\n  IProgressIndicatorStyleProps,\n  IProgressIndicatorStyles,\n} from './ProgressIndicator.types';\n\n/**\n * ProgressIndicator description\n */\nexport const ProgressIndicator: React.FunctionComponent<IProgressIndicatorProps> = styled<\n  IProgressIndicatorProps,\n  IProgressIndicatorStyleProps,\n  IProgressIndicatorStyles\n>(ProgressIndicatorBase, getStyles, undefined, { scope: 'ProgressIndicator' });\n"],
  "mappings": "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",
  "names": ["ProgressIndicatorBase", "props"]
}
