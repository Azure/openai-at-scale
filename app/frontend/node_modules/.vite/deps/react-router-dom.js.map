{
  "version": 3,
  "sources": ["../../@remix-run/router/history.ts", "../../@remix-run/router/utils.ts", "../../@remix-run/router/router.ts", "../../react-router/lib/use-sync-external-store-shim/useSyncExternalStoreShimClient.ts", "../../react-router/lib/use-sync-external-store-shim/useSyncExternalStoreShimServer.ts", "../../react-router/lib/use-sync-external-store-shim/index.ts", "../../react-router/lib/context.ts", "../../react-router/lib/hooks.tsx", "../../react-router/lib/components.tsx", "../../react-router/index.ts", "../../react-router-dom/dom.ts", "../../react-router-dom/index.tsx"],
  "sourcesContent": ["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n", "import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type MutationFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | MutationFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  return (\n    path\n      .replace(\n        /^:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : param;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return param;\n        }\n      )\n      .replace(\n        /\\/:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : `/${param}`;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return `/${param}`;\n        }\n      )\n      // Remove any optional markers from optional static segments\n      .replace(/\\?/g, \"\")\n      .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n        const star = \"*\" as PathParam<Path>;\n\n        if (params[star] == null) {\n          // If no splat was provided, trim the trailing slash _unless_ it's\n          // the entire path\n          return str === \"/*\" ? \"/\" : \"\";\n        }\n\n        // Apply the splat\n        return `${prefix}${params[star]}`;\n      })\n  );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging @remix-run/router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n", "import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  MutationFormMethod,\n  ShouldRevalidateFunction,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  warning,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n  match: AgnosticDataRouteMatch;\n  matches: AgnosticDataRouteMatch[];\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission\n      ? submission\n      : loadingNavigation.formMethod &&\n        loadingNavigation.formAction &&\n        loadingNavigation.formData &&\n        loadingNavigation.formEncType\n      ? {\n          formMethod: loadingNavigation.formMethod,\n          formAction: loadingNavigation.formAction,\n          formData: loadingNavigation.formData,\n          formEncType: loadingNavigation.formEncType,\n        }\n      : undefined;\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) =>\n      fetchControllers.set(rf.key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path, match, matches });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let newOrigin = init.history.createURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map((f) =>\n        callLoaderOrAction(\n          \"loader\",\n          createClientSideRequest(init.history, f.path, request.signal),\n          f.match,\n          f.matches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\" && method !== \"options\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  let defaultShouldRevalidate =\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        defaultShouldRevalidate ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach((f, key) => {\n      if (!matches.some((m) => m.route.id === f.routeId)) {\n        // This fetcher is not going to be present in the subsequent render so\n        // there's no need to revalidate it\n        return;\n      } else if (cancelledFetcherLoads.includes(key)) {\n        // This fetcher was cancelled from a prior action submission - force reload\n        revalidatingFetchers.push({ key, ...f });\n      } else {\n        // Revalidating fetchers are decoupled from the route matches since they\n        // hit a static href, so they _always_ check shouldRevalidate and the\n        // default is strictly if a revalidation is explicitly required (action\n        // submissions, useRevalidator, X-Remix-Revalidate).\n        let shouldRevalidate = shouldRevalidateLoader(f.match, {\n          currentUrl,\n          currentParams: state.matches[state.matches.length - 1].params,\n          nextUrl,\n          nextParams: matches[matches.length - 1].params,\n          ...submission,\n          actionResult,\n          defaultShouldRevalidate,\n        });\n        if (shouldRevalidate) {\n          revalidatingFetchers.push({ key, ...f });\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin absolute redirects.\n        // If this is a static reques, we can let it go back to the browser\n        // as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        if (url.origin === currentUrl.origin) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isMutationMethod(method?: string): method is MutationFormMethod {\n  return validMutationMethods.has(method as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as React from \"react\";\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction isPolyfill(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst is: (x: any, y: any) => boolean =\n  typeof Object.is === \"function\" ? Object.is : isPolyfill;\n\n// Intentionally not using named imports because Rollup uses dynamic\n// dispatch for CommonJS interop named imports.\nconst { useState, useEffect, useLayoutEffect, useDebugValue } = React;\n\nlet didWarnOld18Alpha = false;\nlet didWarnUncachedGetSnapshot = false;\n\n// Disclaimer: This shim breaks many of the rules of React, and only works\n// because of a very particular set of implementation details and assumptions\n// -- change any one of them and it will break. The most important assumption\n// is that updates are always synchronous, because concurrent rendering is\n// only available in versions of React that also have a built-in\n// useSyncExternalStore API. And we only use this shim when the built-in API\n// does not exist.\n//\n// Do not assume that the clever hacks used by this hook also work in general.\n// The point of this shim is to replace the need for hacks by other libraries.\nexport function useSyncExternalStore<T>(\n  subscribe: (fn: () => void) => () => void,\n  getSnapshot: () => T,\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  getServerSnapshot?: () => T\n): T {\n  if (__DEV__) {\n    if (!didWarnOld18Alpha) {\n      if (\"startTransition\" in React) {\n        didWarnOld18Alpha = true;\n        console.error(\n          \"You are using an outdated, pre-release alpha of React 18 that \" +\n            \"does not support useSyncExternalStore. The \" +\n            \"use-sync-external-store shim will not work correctly. Upgrade \" +\n            \"to a newer pre-release.\"\n        );\n      }\n    }\n  }\n\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      const cachedValue = getSnapshot();\n      if (!is(value, cachedValue)) {\n        console.error(\n          \"The result of getSnapshot should be cached to avoid an infinite loop\"\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{ inst }, forceUpdate] = useState({ inst: { value, getSnapshot } });\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  useLayoutEffect(() => {\n    inst.value = value;\n    inst.getSnapshot = getSnapshot;\n\n    // Whenever getSnapshot or subscribe changes, we need to check in the\n    // commit phase if there was an interleaved mutation. In concurrent mode\n    // this can happen all the time, but even in synchronous mode, an earlier\n    // effect may have mutated the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({ inst });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe, value, getSnapshot]);\n\n  useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({ inst });\n    }\n    const handleStoreChange = () => {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({ inst });\n      }\n    };\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(handleStoreChange);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe]);\n\n  useDebugValue(value);\n  return value;\n}\n\nfunction checkIfSnapshotChanged(inst: any) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport function useSyncExternalStore<T>(\n  subscribe: (fn: () => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T\n): T {\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  return getSnapshot();\n}\n", "/**\n * Inlined into the react-router repo since use-sync-external-store does not\n * provide a UMD-compatible package, so we need this to be able to distribute\n * UMD react-router bundles\n */\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from \"react\";\n\nimport { useSyncExternalStore as client } from \"./useSyncExternalStoreShimClient\";\nimport { useSyncExternalStore as server } from \"./useSyncExternalStoreShimServer\";\n\nconst canUseDOM: boolean = !!(\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\"\n);\nconst isServerEnvironment = !canUseDOM;\nconst shim = isServerEnvironment ? server : client;\n\nexport const useSyncExternalStore =\n  \"useSyncExternalStore\" in React\n    ? ((module) => module.useSyncExternalStore)(React)\n    : shim;\n", "import * as React from \"react\";\nimport type {\n  AgnosticRouteMatch,\n  AgnosticIndexRouteObject,\n  AgnosticNonIndexRouteObject,\n  History,\n  Location,\n  Router,\n  StaticHandlerContext,\n  To,\n  TrackedPromise,\n} from \"@remix-run/router\";\nimport type { Action as NavigationType } from \"@remix-run/router\";\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nexport interface IndexRouteObject {\n  caseSensitive?: AgnosticIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticIndexRouteObject[\"path\"];\n  id?: AgnosticIndexRouteObject[\"id\"];\n  loader?: AgnosticIndexRouteObject[\"loader\"];\n  action?: AgnosticIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticIndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n}\n\nexport interface NonIndexRouteObject {\n  caseSensitive?: AgnosticNonIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticNonIndexRouteObject[\"path\"];\n  id?: AgnosticNonIndexRouteObject[\"id\"];\n  loader?: AgnosticNonIndexRouteObject[\"loader\"];\n  action?: AgnosticNonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticNonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticNonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticNonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: RouteObject[];\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n}\n\nexport type RouteObject = IndexRouteObject | NonIndexRouteObject;\n\nexport type DataRouteObject = RouteObject & {\n  children?: DataRouteObject[];\n  id: string;\n};\n\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> extends AgnosticRouteMatch<ParamKey, RouteObjectType> {}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\nexport interface DataRouterContextObject extends NavigationContextObject {\n  router: Router;\n  staticContext?: StaticHandlerContext;\n}\n\nexport const DataRouterContext =\n  React.createContext<DataRouterContextObject | null>(null);\nif (__DEV__) {\n  DataRouterContext.displayName = \"DataRouter\";\n}\n\nexport const DataRouterStateContext = React.createContext<\n  Router[\"state\"] | null\n>(null);\nif (__DEV__) {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\n\nexport const AwaitContext = React.createContext<TrackedPromise | null>(null);\nif (__DEV__) {\n  AwaitContext.displayName = \"Await\";\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport interface Navigator {\n  createHref: History[\"createHref\"];\n  // Optional for backwards-compat with Router/HistoryRouter usage (edge case)\n  encodeLocation?: History[\"encodeLocation\"];\n  go: History[\"go\"];\n  push(to: To, state?: any, opts?: NavigateOptions): void;\n  replace(to: To, state?: any, opts?: NavigateOptions): void;\n}\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nexport const NavigationContext = React.createContext<NavigationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nexport const LocationContext = React.createContext<LocationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\nexport interface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nexport const RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: [],\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\nexport const RouteErrorContext = React.createContext<any>(null);\n\nif (__DEV__) {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n", "import * as React from \"react\";\nimport type {\n  Blocker,\n  BlockerFunction,\n  Location,\n  ParamParseKey,\n  Params,\n  Path,\n  PathMatch,\n  PathPattern,\n  Router as RemixRouter,\n  To,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  resolveTo,\n  warning,\n  UNSAFE_getPathContributingMatches as getPathContributingMatches,\n} from \"@remix-run/router\";\n\nimport type {\n  NavigateOptions,\n  RouteContextObject,\n  RouteMatch,\n  RouteObject,\n  DataRouteMatch,\n  RelativeRoutingType,\n} from \"./context\";\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n  RouteErrorContext,\n  AwaitContext,\n} from \"./context\";\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\nexport function useHref(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to, { relative });\n\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname =\n      pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, pathname),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nexport function useNavigate(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(\n        activeRef.current,\n        `You should call navigate() in a React.useEffect(), not when ` +\n          `your component is first rendered.`\n      );\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        options.relative === \"path\"\n      );\n\n      // If we're operating within a basename, prepend it to the pathname prior\n      // to handing off to history.  If this is a root navigation, then we\n      // navigate to the raw basename which allows the basename to have full\n      // control over the presence of a trailing slash on root links\n      if (basename !== \"/\") {\n        path.pathname =\n          path.pathname === \"/\"\n            ? basename\n            : joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state,\n        options\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nexport function useResolvedPath(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () =>\n      resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        relative === \"path\"\n      ),\n    [to, routePathnamesJson, locationPathname, relative]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { navigator } = React.useContext(NavigationContext);\n  let dataRouterStateContext = React.useContext(DataRouterStateContext);\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" does not have an element. ` +\n        `This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  let renderedMatches = _renderMatches(\n    matches &&\n      matches.map((match) =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([\n            parentPathnameBase,\n            // Re-encode pathnames that were decoded inside matchRoutes\n            navigator.encodeLocation\n              ? navigator.encodeLocation(match.pathname).pathname\n              : match.pathname,\n          ]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([\n                  parentPathnameBase,\n                  // Re-encode pathnames that were decoded inside matchRoutes\n                  navigator.encodeLocation\n                    ? navigator.encodeLocation(match.pathnameBase).pathname\n                    : match.pathnameBase,\n                ]),\n        })\n      ),\n    parentMatches,\n    dataRouterStateContext || undefined\n  );\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return (\n      <LocationContext.Provider\n        value={{\n          location: {\n            pathname: \"/\",\n            search: \"\",\n            hash: \"\",\n            state: null,\n            key: \"default\",\n            ...location,\n          },\n          navigationType: NavigationType.Pop,\n        }}\n      >\n        {renderedMatches}\n      </LocationContext.Provider>\n    );\n  }\n\n  return renderedMatches;\n}\n\nfunction DefaultErrorElement() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error)\n    ? `${error.status} ${error.statusText}`\n    : error instanceof Error\n    ? error.message\n    : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = { padding: \"0.5rem\", backgroundColor: lightgrey };\n  let codeStyles = { padding: \"2px 4px\", backgroundColor: lightgrey };\n\n  let devInfo = null;\n  if (__DEV__) {\n    devInfo = (\n      <>\n        <p>💿 Hey developer 👋</p>\n        <p>\n          You can provide a way better UX than this when your app throws errors\n          by providing your own&nbsp;\n          <code style={codeStyles}>errorElement</code> props on&nbsp;\n          <code style={codeStyles}>&lt;Route&gt;</code>\n        </p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <h2>Unexpected Application Error!</h2>\n      <h3 style={{ fontStyle: \"italic\" }}>{message}</h3>\n      {stack ? <pre style={preStyles}>{stack}</pre> : null}\n      {devInfo}\n    </>\n  );\n}\n\ntype RenderErrorBoundaryProps = React.PropsWithChildren<{\n  location: Location;\n  error: any;\n  component: React.ReactNode;\n  routeContext: RouteContextObject;\n}>;\n\ntype RenderErrorBoundaryState = {\n  location: Location;\n  error: any;\n};\n\nexport class RenderErrorBoundary extends React.Component<\n  RenderErrorBoundaryProps,\n  RenderErrorBoundaryState\n> {\n  constructor(props: RenderErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      location: props.location,\n      error: props.error,\n    };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error: error };\n  }\n\n  static getDerivedStateFromProps(\n    props: RenderErrorBoundaryProps,\n    state: RenderErrorBoundaryState\n  ) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location) {\n      return {\n        error: props.error,\n        location: props.location,\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error || state.error,\n      location: state.location,\n    };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"React Router caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    return this.state.error ? (\n      <RouteContext.Provider value={this.props.routeContext}>\n        <RouteErrorContext.Provider\n          value={this.state.error}\n          children={this.props.component}\n        />\n      </RouteContext.Provider>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\ninterface RenderedRouteProps {\n  routeContext: RouteContextObject;\n  match: RouteMatch<string, RouteObject>;\n  children: React.ReactNode | null;\n}\n\nfunction RenderedRoute({ routeContext, match, children }: RenderedRouteProps) {\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (\n    dataRouterContext &&\n    dataRouterContext.static &&\n    dataRouterContext.staticContext &&\n    match.route.errorElement\n  ) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n\n  return (\n    <RouteContext.Provider value={routeContext}>\n      {children}\n    </RouteContext.Provider>\n  );\n}\n\nexport function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = [],\n  dataRouterState?: RemixRouter[\"state\"]\n): React.ReactElement | null {\n  if (matches == null) {\n    if (dataRouterState?.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches as DataRouteMatch[];\n    } else {\n      return null;\n    }\n  }\n\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = dataRouterState?.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(\n      (m) => m.route.id && errors?.[m.route.id]\n    );\n    invariant(\n      errorIndex >= 0,\n      `Could not find a matching route for the current errors: ${errors}`\n    );\n    renderedMatches = renderedMatches.slice(\n      0,\n      Math.min(renderedMatches.length, errorIndex + 1)\n    );\n  }\n\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    let error = match.route.id ? errors?.[match.route.id] : null;\n    // Only data routers handle errors\n    let errorElement = dataRouterState\n      ? match.route.errorElement || <DefaultErrorElement />\n      : null;\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => (\n      <RenderedRoute match={match} routeContext={{ outlet, matches }}>\n        {error\n          ? errorElement\n          : match.route.element !== undefined\n          ? match.route.element\n          : outlet}\n      </RenderedRoute>\n    );\n    // Only wrap in an error boundary within data router usages when we have an\n    // errorElement on this route.  Otherwise let it bubble up to an ancestor\n    // errorElement\n    return dataRouterState && (match.route.errorElement || index === 0) ? (\n      <RenderErrorBoundary\n        location={dataRouterState.location}\n        component={errorElement}\n        error={error}\n        children={getChildren()}\n        routeContext={{ outlet: null, matches }}\n      />\n    ) : (\n      getChildren()\n    );\n  }, null as React.ReactElement | null);\n}\n\nenum DataRouterHook {\n  UseBlocker = \"useBlocker\",\n  UseRevalidator = \"useRevalidator\",\n}\n\nenum DataRouterStateHook {\n  UseLoaderData = \"useLoaderData\",\n  UseActionData = \"useActionData\",\n  UseRouteError = \"useRouteError\",\n  UseNavigation = \"useNavigation\",\n  UseRouteLoaderData = \"useRouteLoaderData\",\n  UseMatches = \"useMatches\",\n  UseRevalidator = \"useRevalidator\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\nfunction useRouteContext(hookName: DataRouterStateHook) {\n  let route = React.useContext(RouteContext);\n  invariant(route, getDataRouterConsoleError(hookName));\n  return route;\n}\n\nfunction useCurrentRouteId(hookName: DataRouterStateHook) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  invariant(\n    thisRoute.route.id,\n    `${hookName} can only be used on routes that contain a unique \"id\"`\n  );\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nexport function useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nexport function useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return {\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation,\n  };\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nexport function useMatches() {\n  let { matches, loaderData } = useDataRouterState(\n    DataRouterStateHook.UseMatches\n  );\n  return React.useMemo(\n    () =>\n      matches.map((match) => {\n        let { pathname, params } = match;\n        // Note: This structure matches that created by createUseMatchesMatch\n        // in the @remix-run/router , so if you change this please also change\n        // that :)  Eventually we'll DRY this up\n        return {\n          id: match.route.id,\n          pathname,\n          params,\n          data: loaderData[match.route.id] as unknown,\n          handle: match.route.handle as unknown,\n        };\n      }),\n    [matches, loaderData]\n  );\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nexport function useLoaderData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\n      `You cannot \\`useLoaderData\\` in an errorElement (routeId: ${routeId})`\n    );\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nexport function useRouteLoaderData(routeId: string): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nexport function useActionData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useActionData must be used inside a RouteContext`);\n\n  return Object.values(state?.actionData || {})[0];\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * errorElement to display a proper error message.\n */\nexport function useRouteError(): unknown {\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return state.errors?.[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor <Await /> value\n */\nexport function useAsyncValue(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._data;\n}\n\n/**\n * Returns the error from the nearest ancestor <Await /> value\n */\nexport function useAsyncError(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._error;\n}\n\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nexport function useBlocker(shouldBlock: boolean | BlockerFunction): Blocker {\n  let { router } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let [blockerKey] = React.useState(() => String(++blockerId));\n\n  let blockerFunction = React.useCallback<BlockerFunction>(\n    (args) => {\n      return typeof shouldBlock === \"function\"\n        ? !!shouldBlock(args)\n        : !!shouldBlock;\n    },\n    [shouldBlock]\n  );\n\n  let blocker = router.getBlocker(blockerKey, blockerFunction);\n\n  // Cleanup on unmount\n  React.useEffect(\n    () => () => router.deleteBlocker(blockerKey),\n    [router, blockerKey]\n  );\n\n  return blocker;\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\n\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n", "import * as React from \"react\";\nimport type {\n  TrackedPromise,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Router as RemixRouter,\n  RouterState,\n  To,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  AbortedDeferredError,\n  createMemoryHistory,\n  invariant,\n  parsePath,\n  stripBasename,\n  warning,\n} from \"@remix-run/router\";\nimport { useSyncExternalStore as useSyncExternalStoreShim } from \"./use-sync-external-store-shim\";\n\nimport type {\n  DataRouteObject,\n  IndexRouteObject,\n  RouteMatch,\n  RouteObject,\n  Navigator,\n  NonIndexRouteObject,\n  RelativeRoutingType,\n} from \"./context\";\nimport {\n  LocationContext,\n  NavigationContext,\n  DataRouterContext,\n  DataRouterStateContext,\n  AwaitContext,\n} from \"./context\";\nimport {\n  useAsyncValue,\n  useInRouterContext,\n  useNavigate,\n  useOutlet,\n  useRoutes,\n  _renderMatches,\n} from \"./hooks\";\n\nexport interface RouterProviderProps {\n  fallbackElement?: React.ReactNode;\n  router: RemixRouter;\n}\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n}: RouterProviderProps): React.ReactElement {\n  // Sync router state to our component state to force re-renders\n  let state: RouterState = useSyncExternalStoreShim(\n    router.subscribe,\n    () => router.state,\n    // We have to provide this so React@18 doesn't complain during hydration,\n    // but we pass our serialized hydration data into the router so state here\n    // is already synced with what the server saw\n    () => router.state\n  );\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider\n        value={{\n          router,\n          navigator,\n          static: false,\n          // Do we need this?\n          basename,\n        }}\n      >\n        <DataRouterStateContext.Provider value={state}>\n          <Router\n            basename={router.basename}\n            location={router.state.location}\n            navigationType={router.state.historyAction}\n            navigator={navigator}\n          >\n            {router.state.initialized ? <Routes /> : fallbackElement}\n          </Router>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex,\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true,\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nexport function Navigate({\n  to,\n  replace,\n  state,\n  relative,\n}: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let dataRouterState = React.useContext(DataRouterStateContext);\n  let navigate = useNavigate();\n\n  React.useEffect(() => {\n    // Avoid kicking off multiple navigations if we're in the middle of a\n    // data-router navigation, since components get re-rendered when we enter\n    // a submitting/loading state\n    if (dataRouterState && dataRouterState.navigation.state !== \"idle\") {\n      return;\n    }\n    navigate(to, { replace, state, relative });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: NonIndexRouteObject[\"caseSensitive\"];\n  path?: NonIndexRouteObject[\"path\"];\n  id?: NonIndexRouteObject[\"id\"];\n  loader?: NonIndexRouteObject[\"loader\"];\n  action?: NonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: NonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: NonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: NonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n}\n\nexport interface LayoutRouteProps extends PathRouteProps {}\n\nexport interface IndexRouteProps {\n  caseSensitive?: IndexRouteObject[\"caseSensitive\"];\n  path?: IndexRouteObject[\"path\"];\n  id?: IndexRouteObject[\"id\"];\n  loader?: IndexRouteObject[\"loader\"];\n  action?: IndexRouteObject[\"action\"];\n  hasErrorBoundary?: IndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: IndexRouteObject[\"shouldRevalidate\"];\n  handle?: IndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n}\n\nexport type RouteProps = PathRouteProps | LayoutRouteProps | IndexRouteProps;\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nexport function Route(_props: RouteProps): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false,\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\",\n  } = locationProp;\n\n  let location = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key,\n    };\n  }, [basename, pathname, search, hash, state, key]);\n\n  warning(\n    location != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (location == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider\n        children={children}\n        value={{ location, navigationType }}\n      />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  let dataRouterContext = React.useContext(DataRouterContext);\n  // When in a DataRouterContext _without_ children, we use the router routes\n  // directly.  If we have children, then we're in a descendant tree and we\n  // need to use child routes.\n  let routes =\n    dataRouterContext && !children\n      ? (dataRouterContext.router.routes as DataRouteObject[])\n      : createRoutesFromChildren(children);\n  return useRoutes(routes, location);\n}\n\nexport interface AwaitResolveRenderFunction {\n  (data: Awaited<any>): React.ReactNode;\n}\n\nexport interface AwaitProps {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}\n\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nexport function Await({ children, errorElement, resolve }: AwaitProps) {\n  return (\n    <AwaitErrorBoundary resolve={resolve} errorElement={errorElement}>\n      <ResolveAwait>{children}</ResolveAwait>\n    </AwaitErrorBoundary>\n  );\n}\n\ntype AwaitErrorBoundaryProps = React.PropsWithChildren<{\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}>;\n\ntype AwaitErrorBoundaryState = {\n  error: any;\n};\n\nenum AwaitRenderStatus {\n  pending,\n  success,\n  error,\n}\n\nconst neverSettledPromise = new Promise(() => {});\n\nclass AwaitErrorBoundary extends React.Component<\n  AwaitErrorBoundaryProps,\n  AwaitErrorBoundaryState\n> {\n  constructor(props: AwaitErrorBoundaryProps) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"<Await> caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    let { children, errorElement, resolve } = this.props;\n\n    let promise: TrackedPromise | null = null;\n    let status: AwaitRenderStatus = AwaitRenderStatus.pending;\n\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_data\", { get: () => resolve });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_error\", { get: () => renderError });\n    } else if ((resolve as TrackedPromise)._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status =\n        promise._error !== undefined\n          ? AwaitRenderStatus.error\n          : promise._data !== undefined\n          ? AwaitRenderStatus.success\n          : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", { get: () => true });\n      promise = resolve.then(\n        (data: any) =>\n          Object.defineProperty(resolve, \"_data\", { get: () => data }),\n        (error: any) =>\n          Object.defineProperty(resolve, \"_error\", { get: () => error })\n      );\n    }\n\n    if (\n      status === AwaitRenderStatus.error &&\n      promise._error instanceof AbortedDeferredError\n    ) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return <AwaitContext.Provider value={promise} children={errorElement} />;\n    }\n\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return <AwaitContext.Provider value={promise} children={children} />;\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on <Await>\n */\nfunction ResolveAwait({\n  children,\n}: {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n}) {\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return <>{toRender}</>;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode,\n  parentPath: number[] = []\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element, index) => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children, parentPath)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    invariant(\n      !element.props.index || !element.props.children,\n      \"An index route cannot have child routes.\"\n    );\n\n    let treePath = [...parentPath, index];\n    let route: RouteObject = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      hasErrorBoundary: element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(\n        element.props.children,\n        treePath\n      );\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n\n/**\n * @private\n * Walk the route tree and add hasErrorBoundary if it's not provided, so that\n * users providing manual route arrays can just specify errorElement\n */\nexport function enhanceManualRouteObjects(\n  routes: RouteObject[]\n): RouteObject[] {\n  return routes.map((route) => {\n    let routeClone = { ...route };\n    if (routeClone.hasErrorBoundary == null) {\n      routeClone.hasErrorBoundary = routeClone.errorElement != null;\n    }\n    if (routeClone.children) {\n      routeClone.children = enhanceManualRouteObjects(routeClone.children);\n    }\n    return routeClone;\n  });\n}\n", "import type {\n  ActionFunction,\n  ActionFunctionArgs,\n  Blocker,\n  BlockerFunction,\n  Fetcher,\n  HydrationState,\n  JsonFunction,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  Navigation,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  PathPattern,\n  RedirectFunction,\n  Router as RemixRouter,\n  ShouldRevalidateFunction,\n  To,\n  InitialEntry,\n} from \"@remix-run/router\";\nimport {\n  AbortedDeferredError,\n  Action as NavigationType,\n  createMemoryHistory,\n  createPath,\n  createRouter,\n  defer,\n  generatePath,\n  isRouteErrorResponse,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  resolvePath,\n} from \"@remix-run/router\";\n\nimport type {\n  AwaitProps,\n  MemoryRouterProps,\n  NavigateProps,\n  OutletProps,\n  RouteProps,\n  PathRouteProps,\n  LayoutRouteProps,\n  IndexRouteProps,\n  RouterProps,\n  RoutesProps,\n  RouterProviderProps,\n} from \"./lib/components\";\nimport {\n  enhanceManualRouteObjects,\n  createRoutesFromChildren,\n  renderMatches,\n  Await,\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n} from \"./lib/components\";\nimport type {\n  DataRouteMatch,\n  DataRouteObject,\n  IndexRouteObject,\n  Navigator,\n  NavigateOptions,\n  NonIndexRouteObject,\n  RouteMatch,\n  RouteObject,\n  RelativeRoutingType,\n} from \"./lib/context\";\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n} from \"./lib/context\";\nimport type { NavigateFunction } from \"./lib/hooks\";\nimport {\n  useBlocker,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigationType,\n  useNavigate,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useLoaderData,\n  useMatches,\n  useNavigation,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n} from \"./lib/hooks\";\n\n// Exported for backwards compatibility, but not being used internally anymore\ntype Hash = string;\ntype Pathname = string;\ntype Search = string;\n\n// Expose react-router public API\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  Blocker as unstable_Blocker,\n  BlockerFunction as unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n};\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromChildren as createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useBlocker as unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n};\n\nexport function createMemoryRouter(\n  routes: RouteObject[],\n  opts?: {\n    basename?: string;\n    hydrationData?: HydrationState;\n    initialEntries?: InitialEntry[];\n    initialIndex?: number;\n  }\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    history: createMemoryHistory({\n      initialEntries: opts?.initialEntries,\n      initialIndex: opts?.initialIndex,\n    }),\n    hydrationData: opts?.hydrationData,\n    routes: enhanceManualRouteObjects(routes),\n  }).initialize();\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  NavigationContext as UNSAFE_NavigationContext,\n  LocationContext as UNSAFE_LocationContext,\n  RouteContext as UNSAFE_RouteContext,\n  DataRouterContext as UNSAFE_DataRouterContext,\n  DataRouterStateContext as UNSAFE_DataRouterStateContext,\n  enhanceManualRouteObjects as UNSAFE_enhanceManualRouteObjects,\n};\n", "import type { FormEncType, FormMethod } from \"@remix-run/router\";\nimport type { RelativeRoutingType } from \"react-router\";\n\nexport const defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    for (let key of defaultSearchParams.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n  }\n\n  return searchParams;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: FormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   *\n   * Note: It is assumed the path is already resolved. If you need to resolve a\n   * relative path, use `useFormAction`.\n   */\n  action?: string;\n\n  /**\n   * The action URL used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n}\n\nexport function getFormSubmissionInfo(\n  target:\n    | HTMLFormElement\n    | HTMLButtonElement\n    | HTMLInputElement\n    | FormData\n    | URLSearchParams\n    | { [name: string]: string }\n    | null,\n  defaultAction: string,\n  options: SubmitOptions\n): {\n  url: URL;\n  method: string;\n  encType: string;\n  formData: FormData;\n} {\n  let method: string;\n  let action: string;\n  let encType: string;\n  let formData: FormData;\n\n  if (isFormElement(target)) {\n    let submissionTrigger: HTMLButtonElement | HTMLInputElement = (\n      options as any\n    ).submissionTrigger;\n\n    method = options.method || target.getAttribute(\"method\") || defaultMethod;\n    action = options.action || target.getAttribute(\"action\") || defaultAction;\n    encType =\n      options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n\n    formData = new FormData(target);\n\n    if (submissionTrigger && submissionTrigger.name) {\n      formData.append(submissionTrigger.name, submissionTrigger.value);\n    }\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    method =\n      options.method ||\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    action =\n      options.action ||\n      target.getAttribute(\"formaction\") ||\n      form.getAttribute(\"action\") ||\n      defaultAction;\n    encType =\n      options.encType ||\n      target.getAttribute(\"formenctype\") ||\n      form.getAttribute(\"enctype\") ||\n      defaultEncType;\n\n    formData = new FormData(form);\n\n    // Include name + value from a <button>, appending in case the button name\n    // matches an existing input name\n    if (target.name) {\n      formData.append(target.name, target.value);\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = options.method || defaultMethod;\n    action = options.action || defaultAction;\n    encType = options.encType || defaultEncType;\n\n    if (target instanceof FormData) {\n      formData = target;\n    } else {\n      formData = new FormData();\n\n      if (target instanceof URLSearchParams) {\n        for (let [name, value] of target) {\n          formData.append(name, value);\n        }\n      } else if (target != null) {\n        for (let name of Object.keys(target)) {\n          formData.append(name, target[name]);\n        }\n      }\n    }\n  }\n\n  let { protocol, host } = window.location;\n  let url = new URL(action, `${protocol}//${host}`);\n\n  return { url, method: method.toLowerCase(), encType, formData };\n}\n", "/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport type {\n  NavigateOptions,\n  RelativeRoutingType,\n  RouteObject,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  unstable_useBlocker as useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_enhanceManualRouteObjects as enhanceManualRouteObjects,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HydrationState,\n  Router as RemixRouter,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  invariant,\n  joinPaths,\n  ErrorResponse,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n};\nexport { createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  unstable_Blocker,\n  unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_enhanceManualRouteObjects,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: {\n    basename?: string;\n    hydrationData?: HydrationState;\n    window?: Window;\n  }\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes: enhanceManualRouteObjects(routes),\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: {\n    basename?: string;\n    hydrationData?: HydrationState;\n    window?: Window;\n  }\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes: enhanceManualRouteObjects(routes),\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      let error = new Error(val.message);\n      // Wipe away the client-side stack trace.  Nothing to fill it in with\n      // because we don't serialize SSR stack traces for security reasons\n      error.stack = \"\";\n      serialized[key] = error;\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({ basename, children, window }: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({ basename, children, history }: HistoryRouterProps) {\n  const [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      ...rest\n    },\n    ref\n  ) {\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (\n      isBrowser &&\n      typeof to === \"string\" &&\n      /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i.test(to)\n    ) {\n      absoluteHref = to;\n      let currentUrl = new URL(window.location.href);\n      let targetUrl = to.startsWith(\"//\")\n        ? new URL(currentUrl.protocol + to)\n        : new URL(to);\n      if (targetUrl.origin === currentUrl.origin) {\n        // Strip the protocol/origin for same-origin absolute URLs\n        to = targetUrl.pathname + targetUrl.search + targetUrl.hash;\n      } else {\n        isExternal = true;\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    let href = useHref(to, { relative });\n\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean; isPending: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?:\n    | string\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => React.CSSProperties | undefined);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator } = React.useContext(NavigationContext);\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive, isPending });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\"\n        ? styleProp({ isActive, isPending })\n        : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      >\n        {typeof children === \"function\"\n          ? children({ isActive, isPending })\n          : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: FormMethod;\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props, ref) => {\n    return <FormImpl {...props} ref={ref} />;\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\ninterface FormImplProps extends FormProps {\n  fetcherKey?: string;\n  routeId?: string;\n}\n\nconst FormImpl = React.forwardRef<HTMLFormElement, FormImplProps>(\n  (\n    {\n      reloadDocument,\n      replace,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      fetcherKey,\n      routeId,\n      relative,\n      preventScrollReset,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmitImpl(fetcherKey, routeId);\n    let formMethod: FormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    let formAction = useFormAction(action, { relative });\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as FormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        method: submitMethod,\n        replace,\n        relative,\n        preventScrollReset,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  FormImpl.displayName = \"FormImpl\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmitImpl = \"useSubmitImpl\",\n  UseFetcher = \"useFetcher\",\n}\n\nenum DataRouterStateHook {\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, { replace, state, preventScrollReset, relative });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\ntype SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\ntype SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | { [name: string]: string }\n  | null;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  return useSubmitImpl();\n}\n\nfunction useSubmitImpl(fetcherKey?: string, routeId?: string): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmitImpl);\n  let defaultAction = useFormAction();\n\n  return React.useCallback(\n    (target, options = {}) => {\n      if (typeof document === \"undefined\") {\n        throw new Error(\n          \"You are calling submit during the server render. \" +\n            \"Try calling submit within a `useEffect` or callback instead.\"\n        );\n      }\n\n      let { method, encType, formData, url } = getFormSubmissionInfo(\n        target,\n        defaultAction,\n        options\n      );\n\n      let href = url.pathname + url.search;\n      let opts = {\n        replace: options.replace,\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        formMethod: method as FormMethod,\n        formEncType: encType as FormEncType,\n      };\n      if (fetcherKey) {\n        invariant(routeId != null, \"No routeId available for useFetcher()\");\n        router.fetch(fetcherKey, routeId, href, opts);\n      } else {\n        router.navigate(href, opts);\n      }\n    },\n    [defaultAction, router, fetcherKey, routeId]\n  );\n}\n\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to these directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    // or hash\n    path.search = location.search;\n    path.hash = location.hash;\n\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nfunction createFetcherForm(fetcherKey: string, routeId: string) {\n  let FetcherForm = React.forwardRef<HTMLFormElement, FormProps>(\n    (props, ref) => {\n      return (\n        <FormImpl\n          {...props}\n          ref={ref}\n          fetcherKey={fetcherKey}\n          routeId={routeId}\n        />\n      );\n    }\n  );\n  if (__DEV__) {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\n\nlet fetcherId = 0;\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: ReturnType<typeof createFetcherForm>;\n  submit: (\n    target: SubmitTarget,\n    // Fetchers cannot replace/preventScrollReset because they are not\n    // navigation events\n    options?: Omit<SubmitOptions, \"replace\" | \"preventScrollReset\">\n  ) => void;\n  load: (href: string) => void;\n};\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>(): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    invariant(routeId, `No routeId available for fetcher.Form()`);\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => (href: string) => {\n    invariant(router, \"No router available for fetcher.load()\");\n    invariant(routeId, \"No routeId available for fetcher.load()\");\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitImpl(fetcherKey, routeId);\n\n  let fetcher = router.getFetcher<TData>(fetcherKey);\n\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form,\n      submit,\n      load,\n      ...fetcher,\n    }),\n    [fetcher, Form, submit, load]\n  );\n\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(`No fetcher available to clean up from useFetcher()`);\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): Fetcher[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      sessionStorage.setItem(\n        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n        JSON.stringify(savedScrollPositions)\n      );\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKey\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(location.hash.slice(1));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({ when, message }: { when: boolean; message: string }) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Utils\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: boolean, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n//#endregion\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n"],
  "mappings": "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",
  "names": ["Action", "PopStateEventType", "createMemoryHistory", "options", "initialEntries", "initialIndex", "v5Compat", "entries", "map", "entry", "index", "createMemoryLocation", "state", "undefined", "clampIndex", "length", "action", "Pop", "listener", "n", "Math", "min", "max", "getCurrentLocation", "to", "key", "location", "createLocation", "pathname", "warning", "charAt", "JSON", "stringify", "createHref", "createPath", "history", "createURL", "URL", "encodeLocation", "path", "parsePath", "search", "hash", "push", "Push", "nextLocation", "splice", "delta", "replace", "Replace", "go", "nextIndex", "listen", "fn", "createBrowserHistory", "createBrowserLocation", "window", "globalHistory", "usr", "createBrowserHref", "getUrlBasedHistory", "createHashHistory", "createHashLocation", "substr", "createHashHref", "base", "document", "querySelector", "href", "getAttribute", "url", "hashIndex", "indexOf", "slice", "validateHashLocation", "invariant", "value", "message", "Error", "cond", "console", "warn", "e", "createKey", "random", "toString", "getHistoryState", "idx", "current", "parsedPath", "searchIndex", "getLocation", "validateLocation", "defaultView", "getIndex", "replaceState", "handlePop", "historyState", "pushState", "error", "assign", "origin", "addEventListener", "removeEventListener", "ResultType", "isIndexRoute", "route", "convertRoutesToDataRoutes", "routes", "parentPath", "allIds", "Set", "treePath", "id", "join", "children", "has", "add", "indexRoute", "pathOrLayoutRoute", "matchRoutes", "locationArg", "basename", "stripBasename", "branches", "flattenRoutes", "rankRouteBranches", "matches", "i", "matchRouteBranch", "safelyDecodeURI", "parentsMeta", "flattenRoute", "relativePath", "meta", "caseSensitive", "childrenIndex", "startsWith", "joinPaths", "routesMeta", "concat", "score", "computeScore", "forEach", "includes", "exploded", "explodeOptionalSegments", "segments", "split", "first", "rest", "isOptional", "endsWith", "required", "restExploded", "result", "subpath", "sort", "a", "b", "compareIndexes", "paramRe", "dynamicSegmentValue", "indexRouteValue", "emptySegmentValue", "staticSegmentValue", "splatPenalty", "isSplat", "s", "initialScore", "some", "filter", "reduce", "segment", "test", "siblings", "every", "branch", "matchedParams", "matchedPathname", "end", "remainingPathname", "match", "matchPath", "Object", "params", "pathnameBase", "normalizePathname", "generatePath", "originalPath", "_", "optional", "param", "prefix", "__", "str", "star", "pattern", "matcher", "paramNames", "compilePath", "captureGroups", "memo", "paramName", "splatValue", "safelyDecodeURIComponent", "regexpSource", "RegExp", "decodeURI", "decodeURIComponent", "toLowerCase", "startIndex", "nextChar", "resolvePath", "fromPathname", "toPathname", "resolvePathname", "normalizeSearch", "normalizeHash", "relativeSegments", "pop", "getInvalidPathError", "char", "field", "dest", "getPathContributingMatches", "resolveTo", "toArg", "routePathnames", "locationPathname", "isPathRelative", "isEmptyPath", "from", "routePathnameIndex", "toSegments", "shift", "hasExplicitTrailingSlash", "hasCurrentTrailingSlash", "joinPaths", "paths", "join", "replace", "normalizePathname", "pathname", "normalizeSearch", "search", "startsWith", "normalizeHash", "hash", "json", "data", "init", "responseInit", "status", "headers", "Headers", "has", "set", "Response", "JSON", "stringify", "AbortedDeferredError", "Error", "DeferredData", "constructor", "pendingKeysSet", "Set", "subscribers", "deferredKeys", "invariant", "Array", "isArray", "reject", "abortPromise", "Promise", "_", "r", "controller", "AbortController", "onAbort", "unlistenAbortSignal", "signal", "removeEventListener", "addEventListener", "Object", "entries", "reduce", "acc", "key", "value", "assign", "trackPromise", "done", "push", "add", "promise", "race", "then", "onSettle", "error", "catch", "defineProperty", "get", "aborted", "delete", "emit", "settledKey", "forEach", "subscriber", "subscribe", "fn", "cancel", "abort", "v", "k", "resolveData", "resolve", "size", "unwrappedData", "unwrapTrackedPromise", "pendingKeys", "from", "isTrackedPromise", "_tracked", "_error", "_data", "defer", "redirect", "url", "ErrorResponse", "statusText", "internal", "toString", "isRouteErrorResponse", "validMutationMethodsArr", "validMutationMethods", "validRequestMethodsArr", "validRequestMethods", "redirectStatusCodes", "redirectPreserveMethodStatusCodes", "IDLE_NAVIGATION", "state", "location", "undefined", "formMethod", "formAction", "formEncType", "formData", "IDLE_FETCHER", "IDLE_BLOCKER", "proceed", "reset", "ABSOLUTE_URL_REGEX", "isBrowser", "window", "document", "createElement", "isServer", "createRouter", "routes", "length", "dataRoutes", "convertRoutesToDataRoutes", "unlistenHistory", "savedScrollPositions", "getScrollRestorationKey", "getScrollPosition", "initialScrollRestored", "hydrationData", "initialMatches", "matchRoutes", "history", "basename", "initialErrors", "getInternalRouterError", "matches", "route", "getShortCircuitMatches", "id", "initialized", "some", "m", "loader", "router", "historyAction", "action", "navigation", "restoreScrollPosition", "preventScrollReset", "revalidation", "loaderData", "actionData", "errors", "fetchers", "Map", "blockers", "pendingAction", "HistoryAction", "Pop", "pendingPreventScrollReset", "pendingNavigationController", "isUninterruptedRevalidation", "isRevalidationRequired", "cancelledDeferredRoutes", "cancelledFetcherLoads", "fetchControllers", "incrementingLoadId", "pendingNavigationLoadId", "fetchReloadIds", "fetchRedirectIds", "fetchLoadMatches", "activeDeferreds", "blockerFunctions", "ignoreNextHistoryUpdate", "initialize", "listen", "delta", "warning", "blockerKey", "shouldBlockNavigation", "currentLocation", "nextLocation", "go", "updateBlocker", "deleteBlocker", "updateState", "startNavigation", "dispose", "clear", "deleteFetcher", "newState", "completeNavigation", "isActionReload", "isMutationMethod", "_isRedirect", "keys", "mergeLoaderData", "getSavedScrollPosition", "Push", "Replace", "navigate", "to", "opts", "path", "submission", "normalizeNavigateOptions", "createLocation", "encodeLocation", "userReplace", "pendingError", "revalidate", "interruptActiveLoads", "startUninterruptedRevalidation", "overrideNavigation", "saveScrollPosition", "loadingNavigation", "notFoundMatches", "cancelActiveDeferreds", "isHashChangeOnly", "request", "createClientSideRequest", "pendingActionData", "findNearestBoundary", "actionOutput", "handleAction", "shortCircuited", "pendingActionError", "Request", "handleLoaders", "result", "actionMatch", "getTargetMatch", "type", "ResultType", "method", "routeId", "callLoaderOrAction", "isRedirectResult", "startRedirectNavigation", "isErrorResult", "boundaryMatch", "isDeferredResult", "activeSubmission", "matchesToLoad", "revalidatingFetchers", "getMatchesToLoad", "rf", "fetcher", "revalidatingFetcher", "results", "loaderResults", "fetcherResults", "callLoadersAndMaybeResolveData", "findRedirect", "processLoaderData", "deferredData", "markFetchRedirectsDone", "didAbortFetchLoads", "abortStaleFetchLoads", "getFetcher", "fetch", "href", "abortFetcher", "setFetcherError", "match", "handleFetcherAction", "handleFetcherLoader", "requestMatches", "existingFetcher", "abortController", "fetchRequest", "actionResult", "loadingFetcher", "isFetchActionRedirect", "revalidationRequest", "loadId", "loadFetcher", "filter", "staleKey", "doneFetcher", "resolveDeferredData", "redirectLocation", "_isFetchActionRedirect", "test", "newOrigin", "createURL", "origin", "redirectHistoryAction", "currentMatches", "fetchersToLoad", "all", "map", "f", "slice", "resolveDeferredResults", "markFetchersDone", "doneKeys", "landedId", "yeetedKeys", "getBlocker", "blocker", "newBlocker", "blockerFunction", "predicate", "cancelledRouteIds", "dfd", "enableScrollRestoration", "positions", "getPosition", "getKey", "y", "userMatches", "createUseMatchesMatch", "createHref", "_internalFetchControllers", "_internalActiveDeferreds", "UNSAFE_DEFERRED_SYMBOL", "Symbol", "isSubmissionNavigation", "opts", "normalizeNavigateOptions", "to", "isFetcher", "path", "createPath", "formMethod", "isValidMethod", "error", "getInternalRouterError", "method", "submission", "formData", "formAction", "stripHashFromPath", "formEncType", "isMutationMethod", "parsedPath", "parsePath", "searchParams", "convertFormDataToSearchParams", "search", "hasNakedIndexQuery", "append", "getLoaderMatchesUntilBoundary", "matches", "boundaryId", "boundaryMatches", "index", "findIndex", "m", "route", "id", "slice", "getMatchesToLoad", "history", "state", "location", "isRevalidationRequired", "cancelledDeferredRoutes", "cancelledFetcherLoads", "pendingActionData", "pendingError", "fetchLoadMatches", "actionResult", "Object", "values", "undefined", "currentUrl", "createURL", "nextUrl", "defaultShouldRevalidate", "toString", "keys", "navigationMatches", "filter", "match", "loader", "isNewLoader", "loaderData", "some", "currentRouteMatch", "nextRouteMatch", "shouldRevalidateLoader", "currentParams", "params", "nextParams", "isNewRouteInstance", "revalidatingFetchers", "forEach", "f", "key", "routeId", "includes", "push", "shouldRevalidate", "length", "currentLoaderData", "currentMatch", "isNew", "isMissingData", "currentPath", "pathname", "endsWith", "loaderMatch", "arg", "routeChoice", "callLoaderOrAction", "type", "request", "basename", "isStaticRequest", "isRouteRequest", "requestContext", "resultType", "result", "reject", "abortPromise", "Promise", "_", "r", "onReject", "signal", "addEventListener", "handler", "invariant", "race", "context", "e", "ResultType", "removeEventListener", "isResponse", "status", "redirectStatusCodes", "has", "headers", "get", "ABSOLUTE_URL_REGEX", "test", "activeMatches", "indexOf", "routePathnames", "getPathContributingMatches", "map", "pathnameBase", "resolvedLocation", "resolveTo", "URL", "url", "joinPaths", "startsWith", "protocol", "origin", "hash", "set", "redirect", "revalidate", "data", "response", "contentType", "json", "text", "ErrorResponse", "statusText", "statusCode", "DeferredData", "deferred", "deferredData", "createClientSideRequest", "init", "toUpperCase", "body", "Request", "URLSearchParams", "value", "entries", "File", "name", "processRouteLoaderData", "matchesToLoad", "results", "activeDeferreds", "errors", "foundError", "loaderHeaders", "isRedirectResult", "isErrorResult", "boundaryMatch", "findNearestBoundary", "isRouteErrorResponse", "isDeferredResult", "processLoaderData", "fetcherResults", "fetchers", "delete", "doneFetcher", "mergeLoaderData", "newLoaderData", "mergedLoaderData", "hasOwnProperty", "eligibleMatches", "reverse", "find", "hasErrorBoundary", "getShortCircuitMatches", "routes", "errorMessage", "Error", "findRedirect", "i", "isHashChangeOnly", "a", "b", "isValidMethod", "method", "validRequestMethods", "has", "isMutationMethod", "validMutationMethods", "resolveDeferredResults", "currentMatches", "matchesToLoad", "results", "signal", "isFetcher", "currentLoaderData", "index", "length", "result", "match", "currentMatch", "find", "m", "route", "id", "isRevalidatingLoader", "isNewRouteInstance", "undefined", "isDeferredResult", "resolveDeferredData", "then", "unwrap", "aborted", "deferredData", "resolveData", "type", "ResultType", "data", "unwrappedData", "e", "error", "hasNakedIndexQuery", "search", "URLSearchParams", "getAll", "some", "v", "createUseMatchesMatch", "loaderData", "pathname", "params", "handle", "getTargetMatch", "matches", "location", "parsePath", "pathMatches", "getPathContributingMatches", "isPolyfill", "x", "y", "is", "Object", "useState", "useEffect", "useLayoutEffect", "useDebugValue", "React", "didWarnOld18Alpha", "didWarnUncachedGetSnapshot", "useSyncExternalStore", "subscribe", "getSnapshot", "getServerSnapshot", "console", "error", "value", "cachedValue", "inst", "forceUpdate", "checkIfSnapshotChanged", "handleStoreChange", "latestGetSnapshot", "prevValue", "nextValue", "canUseDOM", "window", "document", "createElement", "isServerEnvironment", "shim", "server", "client", "module", "DataRouterContext", "createContext", "displayName", "DataRouterStateContext", "AwaitContext", "NavigationContext", "LocationContext", "RouteContext", "outlet", "matches", "RouteErrorContext", "useHref", "to", "relative", "useInRouterContext", "invariant", "basename", "navigator", "useContext", "hash", "pathname", "search", "useResolvedPath", "joinedPathname", "joinPaths", "createHref", "useLocation", "location", "useNavigationType", "navigationType", "useMatch", "pattern", "useMemo", "matchPath", "useNavigate", "locationPathname", "routePathnamesJson", "JSON", "stringify", "getPathContributingMatches", "map", "match", "pathnameBase", "activeRef", "useRef", "current", "navigate", "useCallback", "options", "warning", "go", "path", "resolveTo", "parse", "replace", "push", "state", "OutletContext", "useOutletContext", "useOutlet", "context", "useParams", "routeMatch", "length", "params", "useRoutes", "routes", "locationArg", "dataRouterStateContext", "parentMatches", "parentParams", "parentPathname", "parentPathnameBase", "parentRoute", "route", "parentPath", "warningOnce", "endsWith", "locationFromContext", "parsedLocationArg", "parsePath", "startsWith", "remainingPathname", "slice", "matchRoutes", "element", "undefined", "renderedMatches", "_renderMatches", "assign", "encodeLocation", "_extends", "key", "NavigationType", "Pop", "DefaultErrorElement", "useRouteError", "message", "isRouteErrorResponse", "status", "statusText", "Error", "stack", "lightgrey", "preStyles", "padding", "backgroundColor", "codeStyles", "devInfo", "fontStyle", "RenderErrorBoundary", "Component", "constructor", "props", "getDerivedStateFromError", "getDerivedStateFromProps", "componentDidCatch", "errorInfo", "render", "routeContext", "component", "children", "RenderedRoute", "dataRouterContext", "static", "staticContext", "errorElement", "_deepestRenderedBoundaryId", "id", "dataRouterState", "errors", "errorIndex", "findIndex", "m", "Math", "min", "reduceRight", "index", "concat", "getChildren", "DataRouterHook", "DataRouterStateHook", "getDataRouterConsoleError", "hookName", "useDataRouterContext", "ctx", "useDataRouterState", "useRouteContext", "useCurrentRouteId", "thisRoute", "useNavigation", "UseNavigation", "navigation", "useRevalidator", "UseRevalidator", "revalidate", "router", "revalidation", "useMatches", "loaderData", "UseMatches", "data", "handle", "useLoaderData", "UseLoaderData", "routeId", "useRouteLoaderData", "UseRouteLoaderData", "useActionData", "UseActionData", "values", "actionData", "UseRouteError", "useAsyncValue", "_data", "useAsyncError", "_error", "blockerId", "useBlocker", "shouldBlock", "UseBlocker", "blockerKey", "String", "blockerFunction", "args", "blocker", "getBlocker", "deleteBlocker", "alreadyWarned", "cond", "RouterProvider", "fallbackElement", "useSyncExternalStoreShim", "n", "opts", "preventScrollReset", "historyAction", "initialized", "MemoryRouter", "initialEntries", "initialIndex", "historyRef", "createMemoryHistory", "v5Compat", "history", "setState", "action", "listen", "Navigate", "Outlet", "Route", "_props", "Router", "basenameProp", "locationProp", "staticProp", "navigationContext", "trailingPathname", "stripBasename", "Routes", "createRoutesFromChildren", "Await", "resolve", "AwaitRenderStatus", "neverSettledPromise", "Promise", "AwaitErrorBoundary", "promise", "pending", "success", "defineProperty", "get", "renderError", "reject", "catch", "_tracked", "then", "AbortedDeferredError", "ResolveAwait", "toRender", "Children", "forEach", "isValidElement", "type", "Fragment", "apply", "name", "treePath", "join", "caseSensitive", "loader", "hasErrorBoundary", "shouldRevalidate", "renderMatches", "enhanceManualRouteObjects", "routeClone", "createMemoryRouter", "createRouter", "hydrationData", "initialize", "defaultMethod", "defaultEncType", "isHtmlElement", "object", "tagName", "isButtonElement", "toLowerCase", "isFormElement", "isInputElement", "isModifiedEvent", "event", "metaKey", "altKey", "ctrlKey", "shiftKey", "shouldProcessLinkClick", "target", "button", "createSearchParams", "init", "URLSearchParams", "Array", "isArray", "Object", "keys", "reduce", "memo", "key", "value", "concat", "map", "v", "getSearchParamsForLocation", "locationSearch", "defaultSearchParams", "searchParams", "has", "getAll", "forEach", "append", "getFormSubmissionInfo", "defaultAction", "options", "method", "action", "encType", "formData", "submissionTrigger", "getAttribute", "FormData", "name", "type", "form", "Error", "protocol", "host", "window", "location", "url", "URL", "createBrowserRouter", "routes", "opts", "createRouter", "basename", "history", "createBrowserHistory", "hydrationData", "parseHydrationData", "enhanceManualRouteObjects", "initialize", "createHashRouter", "createHashHistory", "state", "__staticRouterHydrationData", "errors", "_extends", "deserializeErrors", "entries", "serialized", "val", "__type", "ErrorResponse", "status", "statusText", "data", "internal", "error", "message", "stack", "BrowserRouter", "children", "historyRef", "useRef", "current", "v5Compat", "setState", "useState", "React", "useLayoutEffect", "listen", "createElement", "Router", "navigationType", "navigator", "HashRouter", "HistoryRouter", "displayName", "isBrowser", "document", "Link", "forwardRef", "LinkWithRef", "ref", "onClick", "relative", "reloadDocument", "replace", "to", "preventScrollReset", "rest", "absoluteHref", "isExternal", "test", "currentUrl", "href", "targetUrl", "startsWith", "origin", "pathname", "search", "hash", "useHref", "internalOnClick", "useLinkClickHandler", "handleClick", "defaultPrevented", "NavLink", "NavLinkWithRef", "ariaCurrentProp", "caseSensitive", "className", "classNameProp", "end", "style", "styleProp", "path", "useResolvedPath", "useLocation", "routerState", "useContext", "DataRouterStateContext", "NavigationContext", "toPathname", "encodeLocation", "locationPathname", "nextLocationPathname", "navigation", "isActive", "charAt", "length", "isPending", "ariaCurrent", "undefined", "filter", "Boolean", "join", "Form", "props", "FormImpl", "forwardedRef", "onSubmit", "fetcherKey", "routeId", "submit", "useSubmitImpl", "formMethod", "formAction", "useFormAction", "submitHandler", "preventDefault", "submitter", "nativeEvent", "submitMethod", "currentTarget", "ScrollRestoration", "getKey", "storageKey", "useScrollRestoration", "DataRouterHook", "DataRouterStateHook", "getDataRouterConsoleError", "hookName", "useDataRouterContext", "ctx", "DataRouterContext", "invariant", "useDataRouterState", "replaceProp", "navigate", "useNavigate", "useCallback", "createPath", "useSearchParams", "defaultInit", "warning", "defaultSearchParamsRef", "hasSetSearchParamsRef", "useMemo", "setSearchParams", "nextInit", "navigateOptions", "newSearchParams", "useSubmit", "router", "UseSubmitImpl", "formEncType", "fetch", "routeContext", "RouteContext", "match", "matches", "slice", "route", "index", "params", "delete", "toString", "joinPaths", "createFetcherForm", "FetcherForm", "fetcherId", "useFetcher", "UseFetcher", "id", "String", "load", "fetcher", "getFetcher", "fetcherWithComponents", "useEffect", "console", "warn", "deleteFetcher", "useFetchers", "UseFetchers", "fetchers", "values", "SCROLL_RESTORATION_STORAGE_KEY", "savedScrollPositions", "UseScrollRestoration", "restoreScrollPosition", "useMatches", "useNavigation", "scrollRestoration", "usePageHide", "scrollY", "sessionStorage", "setItem", "JSON", "stringify", "sessionPositions", "getItem", "parse", "e", "disableScrollRestoration", "enableScrollRestoration", "scrollTo", "el", "getElementById", "scrollIntoView", "useBeforeUnload", "callback", "capture", "addEventListener", "removeEventListener", "usePrompt", "when", "blocker", "useBlocker", "reset", "proceed", "confirm", "setTimeout", "cond"]
}
