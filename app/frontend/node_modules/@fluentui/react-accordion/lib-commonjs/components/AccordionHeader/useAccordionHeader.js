"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useAccordionHeader_unstable", {
    enumerable: true,
    get: ()=>useAccordionHeader_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactUtilities = require("@fluentui/react-utilities");
const _index = require("../AccordionItem/index");
const _reactAria = require("@fluentui/react-aria");
const _accordionContext = require("../Accordion/AccordionContext");
const _reactIcons = require("@fluentui/react-icons");
const _reactSharedContexts = require("@fluentui/react-shared-contexts");
const useAccordionHeader_unstable = (props, ref)=>{
    const { as , icon , button , expandIcon , inline =false , size ='medium' , expandIconPosition ='start'  } = props;
    const { onHeaderClick: onAccordionHeaderClick , disabled , open  } = (0, _index.useAccordionItemContext_unstable)();
    /**
  * force disabled state on button if accordion isn't collapsible
  * and this is the only item opened
  */ const disabledFocusable = (0, _accordionContext.useAccordionContext_unstable)((ctx)=>!ctx.collapsible && ctx.openItems.length === 1 && open);
    const { dir  } = (0, _reactSharedContexts.useFluent_unstable)();
    // Calculate how to rotate the expand icon [>] (ChevronRightRegular)
    let expandIconRotation;
    if (expandIconPosition === 'end') {
        // If expand icon is at the end, the chevron points up [^] when open, and down [v] when closed
        expandIconRotation = open ? -90 : 90;
    } else {
        // Otherwise, the chevron points down [v] when open, and right [>] (or left [<] in RTL) when closed
        expandIconRotation = open ? 90 : dir !== 'rtl' ? 0 : 180;
    }
    const buttonShorthand = (0, _reactAria.useARIAButtonShorthand)(button, {
        required: true,
        defaultProps: {
            disabled,
            disabledFocusable,
            'aria-expanded': open,
            type: 'button'
        }
    });
    return {
        disabled,
        open,
        size,
        inline,
        expandIconPosition,
        components: {
            root: 'div',
            button: 'button',
            expandIcon: 'span',
            icon: 'div'
        },
        root: (0, _reactUtilities.getNativeElementProps)(as || 'div', {
            ref,
            ...props
        }),
        icon: (0, _reactUtilities.resolveShorthand)(icon),
        expandIcon: (0, _reactUtilities.resolveShorthand)(expandIcon, {
            required: true,
            defaultProps: {
                children: /*#__PURE__*/ _react.createElement(_reactIcons.ChevronRightRegular, {
                    style: {
                        transform: `rotate(${expandIconRotation}deg)`
                    }
                }),
                'aria-hidden': true
            }
        }),
        button: {
            ...buttonShorthand,
            onClick: (0, _reactUtilities.useEventCallback)((ev)=>{
                var _buttonShorthand_onClick;
                (_buttonShorthand_onClick = buttonShorthand.onClick) === null || _buttonShorthand_onClick === void 0 ? void 0 : _buttonShorthand_onClick.call(buttonShorthand, ev);
                if (!ev.defaultPrevented) {
                    onAccordionHeaderClick(ev);
                }
            })
        }
    };
}; //# sourceMappingURL=useAccordionHeader.js.map

//# sourceMappingURL=useAccordionHeader.js.map