"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useAlert_unstable", {
    enumerable: true,
    get: ()=>useAlert_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactAvatar = require("@fluentui/react-avatar");
const _reactButton = require("@fluentui/react-button");
const _reactIcons = require("@fluentui/react-icons");
const _reactUtilities = require("@fluentui/react-utilities");
const useAlert_unstable = (props, ref)=>{
    const { appearance ='primary' , intent  } = props;
    /** Determine the role and icon to render based on the intent */ let defaultIcon;
    let defaultRole = 'status';
    switch(intent){
        case 'success':
            defaultIcon = /*#__PURE__*/ _react.createElement(_reactIcons.CheckmarkCircleFilled, null);
            break;
        case 'error':
            defaultIcon = /*#__PURE__*/ _react.createElement(_reactIcons.DismissCircleFilled, null);
            defaultRole = 'alert';
            break;
        case 'warning':
            defaultIcon = /*#__PURE__*/ _react.createElement(_reactIcons.WarningFilled, null);
            defaultRole = 'alert';
            break;
        case 'info':
            defaultIcon = /*#__PURE__*/ _react.createElement(_reactIcons.InfoFilled, null);
            break;
    }
    const action = (0, _reactUtilities.resolveShorthand)(props.action, {
        defaultProps: {
            appearance: 'transparent'
        }
    });
    const avatar = (0, _reactUtilities.resolveShorthand)(props.avatar);
    let icon;
    /** Avatar prop takes precedence over the icon or intent prop */ if (!avatar) {
        icon = (0, _reactUtilities.resolveShorthand)(props.icon, {
            defaultProps: {
                children: defaultIcon
            },
            required: !!props.intent
        });
    }
    return {
        action,
        appearance,
        avatar,
        components: {
            root: 'div',
            icon: 'span',
            action: _reactButton.Button,
            avatar: _reactAvatar.Avatar
        },
        icon,
        intent,
        root: (0, _reactUtilities.getNativeElementProps)('div', {
            ref,
            role: defaultRole,
            children: props.children,
            ...props
        })
    };
}; //# sourceMappingURL=useAlert.js.map

//# sourceMappingURL=useAlert.js.map