{"version":3,"sources":["../../../lib/components/Avatar/useAvatar.js"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, mergeCallbacks, resolveShorthand, useId } from '@fluentui/react-utilities';\nimport { getInitials } from '../../utils/index';\nimport { PersonRegular } from '@fluentui/react-icons';\nimport { PresenceBadge } from '@fluentui/react-badge';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { useAvatarContext } from '../../contexts/AvatarContext';\nexport const DEFAULT_STRINGS = {\n  active: 'active',\n  inactive: 'inactive'\n};\nexport const useAvatar_unstable = (props, ref) => {\n  const {\n    dir\n  } = useFluent();\n  const {\n    size: contextSize\n  } = useAvatarContext();\n  const {\n    name,\n    size = contextSize !== null && contextSize !== void 0 ? contextSize : 32,\n    shape = 'circular',\n    active = 'unset',\n    activeAppearance = 'ring',\n    idForColor\n  } = props;\n  let {\n    color = 'neutral'\n  } = props;\n  // Resolve 'colorful' to a specific color name\n  if (color === 'colorful') {\n    var _ref;\n    color = avatarColors[getHashCode((_ref = idForColor !== null && idForColor !== void 0 ? idForColor : name) !== null && _ref !== void 0 ? _ref : '') % avatarColors.length];\n  }\n  const baseId = useId('avatar-');\n  const root = getNativeElementProps('span', {\n    role: 'img',\n    id: baseId,\n    // aria-label and/or aria-labelledby are resolved below\n    ...props,\n    ref\n  }, /* excludedPropNames: */['name']);\n  const [imageHidden, setImageHidden] = React.useState(undefined);\n  const image = resolveShorthand(props.image, {\n    defaultProps: {\n      alt: '',\n      role: 'presentation',\n      'aria-hidden': true,\n      hidden: imageHidden\n    }\n  });\n  // Hide the image if it fails to load and restore it on a successful load\n  if (image) {\n    image.onError = mergeCallbacks(image.onError, () => setImageHidden(true));\n    image.onLoad = mergeCallbacks(image.onLoad, () => setImageHidden(undefined));\n  }\n  // Resolve the initials slot, defaulted to getInitials.\n  let initials = resolveShorthand(props.initials, {\n    required: true,\n    defaultProps: {\n      children: getInitials(name, dir === 'rtl', {\n        firstInitialOnly: size <= 16\n      }),\n      id: baseId + '__initials'\n    }\n  });\n  // Don't render the initials slot if it's empty\n  if (!(initials === null || initials === void 0 ? void 0 : initials.children)) {\n    initials = undefined;\n  }\n  // Render the icon slot *only if* there aren't any initials or image to display\n  let icon = undefined;\n  if (!initials && (!image || imageHidden)) {\n    icon = resolveShorthand(props.icon, {\n      required: true,\n      defaultProps: {\n        children: /*#__PURE__*/React.createElement(PersonRegular, null),\n        'aria-hidden': true\n      }\n    });\n  }\n  const badge = resolveShorthand(props.badge, {\n    defaultProps: {\n      size: getBadgeSize(size),\n      id: baseId + '__badge'\n    }\n  });\n  let activeAriaLabelElement;\n  // Resolve aria-label and/or aria-labelledby if not provided by the user\n  if (!root['aria-label'] && !root['aria-labelledby']) {\n    if (name) {\n      root['aria-label'] = name;\n      // Include the badge in labelledby if it exists\n      if (badge) {\n        root['aria-labelledby'] = root.id + ' ' + badge.id;\n      }\n    } else if (initials) {\n      // root's aria-label should be the name, but fall back to being labelledby the initials if name is missing\n      root['aria-labelledby'] = initials.id + (badge ? ' ' + badge.id : '');\n    }\n    // Add the active state to the aria label\n    if (active === 'active' || active === 'inactive') {\n      const activeText = DEFAULT_STRINGS[active];\n      if (root['aria-labelledby']) {\n        // If using aria-labelledby, render a hidden span and append it to the labelledby\n        const activeId = baseId + '__active';\n        root['aria-labelledby'] += ' ' + activeId;\n        activeAriaLabelElement = /*#__PURE__*/React.createElement(\"span\", {\n          hidden: true,\n          id: activeId\n        }, activeText);\n      } else if (root['aria-label']) {\n        // Otherwise, just append it to the aria-label\n        root['aria-label'] += ' ' + activeText;\n      }\n    }\n  }\n  return {\n    size,\n    shape,\n    active,\n    activeAppearance,\n    activeAriaLabelElement,\n    color,\n    components: {\n      root: 'span',\n      initials: 'span',\n      icon: 'span',\n      image: 'img',\n      badge: PresenceBadge\n    },\n    root,\n    initials,\n    icon,\n    image,\n    badge\n  };\n};\nconst getBadgeSize = size => {\n  if (size >= 96) {\n    return 'extra-large';\n  } else if (size >= 64) {\n    return 'large';\n  } else if (size >= 56) {\n    return 'medium';\n  } else if (size >= 40) {\n    return 'small';\n  } else if (size >= 28) {\n    return 'extra-small';\n  } else {\n    return 'tiny';\n  }\n};\nconst avatarColors = ['dark-red', 'cranberry', 'red', 'pumpkin', 'peach', 'marigold', 'gold', 'brass', 'brown', 'forest', 'seafoam', 'dark-green', 'light-teal', 'teal', 'steel', 'blue', 'royal-blue', 'cornflower', 'navy', 'lavender', 'purple', 'grape', 'lilac', 'pink', 'magenta', 'plum', 'beige', 'mink', 'platinum', 'anchor'];\nconst getHashCode = str => {\n  let hashCode = 0;\n  for (let len = str.length - 1; len >= 0; len--) {\n    const ch = str.charCodeAt(len);\n    const shift = len % 8;\n    hashCode ^= (ch << shift) + (ch >> 8 - shift); // eslint-disable-line no-bitwise\n  }\n\n  return hashCode;\n};\n//# sourceMappingURL=useAvatar.js.map"],"names":["DEFAULT_STRINGS","useAvatar_unstable","active","inactive","props","ref","dir","useFluent","size","contextSize","useAvatarContext","name","shape","activeAppearance","idForColor","color","_ref","avatarColors","getHashCode","length","baseId","useId","root","getNativeElementProps","role","id","imageHidden","setImageHidden","React","useState","undefined","image","resolveShorthand","defaultProps","alt","hidden","onError","mergeCallbacks","onLoad","initials","required","children","getInitials","firstInitialOnly","icon","createElement","PersonRegular","badge","getBadgeSize","activeAriaLabelElement","activeText","activeId","components","PresenceBadge","str","hashCode","len","ch","charCodeAt","shift"],"mappings":"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"}