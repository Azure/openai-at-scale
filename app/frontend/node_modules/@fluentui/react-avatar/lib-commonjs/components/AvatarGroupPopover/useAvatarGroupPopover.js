"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useAvatarGroupPopover_unstable", {
    enumerable: true,
    get: ()=>useAvatarGroupPopover_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _avatarGroupContext = require("../../contexts/AvatarGroupContext");
const _useAvatarGroup = require("../AvatarGroup/useAvatarGroup");
const _reactUtilities = require("@fluentui/react-utilities");
const _reactIcons = require("@fluentui/react-icons");
const _reactPopover = require("@fluentui/react-popover");
const _reactTooltip = require("@fluentui/react-tooltip");
const useAvatarGroupPopover_unstable = (props)=>{
    var _useAvatarGroupContext_unstable;
    const size = (_useAvatarGroupContext_unstable = (0, _avatarGroupContext.useAvatarGroupContext_unstable)((ctx)=>ctx.size)) !== null && _useAvatarGroupContext_unstable !== void 0 ? _useAvatarGroupContext_unstable : _useAvatarGroup.defaultAvatarGroupSize;
    const layout = (0, _avatarGroupContext.useAvatarGroupContext_unstable)((ctx)=>ctx.layout);
    const { indicator =size < 24 ? 'icon' : 'count' , count =_react.Children.count(props.children) , children , ...restOfProps } = props;
    const [popoverOpen, setPopoverOpen] = (0, _reactUtilities.useControllableState)({
        state: props.open,
        defaultState: props.defaultOpen,
        initialState: false
    });
    const handleOnPopoverChange = (e, data)=>{
        var _restOfProps_onOpenChange;
        (_restOfProps_onOpenChange = restOfProps.onOpenChange) === null || _restOfProps_onOpenChange === void 0 ? void 0 : _restOfProps_onOpenChange.call(restOfProps, e, data);
        setPopoverOpen(data.open);
    };
    let triggerButtonChildren;
    if (layout === 'pie') {
        triggerButtonChildren = null;
    } else if (indicator === 'icon') {
        triggerButtonChildren = /*#__PURE__*/ _react.createElement(_reactIcons.MoreHorizontalRegular, null);
    } else {
        triggerButtonChildren = count > 99 ? '99+' : `+${count}`;
    }
    return {
        count,
        indicator,
        layout,
        popoverOpen,
        size,
        components: {
            root: _reactPopover.Popover,
            triggerButton: 'button',
            content: 'ul',
            popoverSurface: _reactPopover.PopoverSurface,
            tooltip: _reactTooltip.Tooltip
        },
        root: {
            // Popover expects a child for its children. The children are added in the renderAvatarGroupPopover.
            children: /*#__PURE__*/ _react.createElement(_react.Fragment, null),
            size: 'small',
            trapFocus: true,
            ...restOfProps,
            open: popoverOpen,
            onOpenChange: handleOnPopoverChange
        },
        triggerButton: (0, _reactUtilities.resolveShorthand)(props.triggerButton, {
            required: true,
            defaultProps: {
                children: triggerButtonChildren,
                type: 'button'
            }
        }),
        content: (0, _reactUtilities.resolveShorthand)(props.content, {
            required: true,
            defaultProps: {
                children,
                role: 'list'
            }
        }),
        popoverSurface: (0, _reactUtilities.resolveShorthand)(props.popoverSurface, {
            required: true,
            defaultProps: {
                'aria-label': 'Overflow',
                tabIndex: 0
            }
        }),
        tooltip: (0, _reactUtilities.resolveShorthand)(props.tooltip, {
            required: true,
            defaultProps: {
                content: 'View more people.',
                relationship: 'label'
            }
        })
    };
}; //# sourceMappingURL=useAvatarGroupPopover.js.map

//# sourceMappingURL=useAvatarGroupPopover.js.map