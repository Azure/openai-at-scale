"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useSplitButton_unstable", {
    enumerable: true,
    get: ()=>useSplitButton_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactUtilities = require("@fluentui/react-utilities");
const _button = require("../Button/Button");
const _menuButton = require("../MenuButton/MenuButton");
const useSplitButton_unstable = (props, ref)=>{
    const { appearance ='secondary' , children , disabled =false , disabledFocusable =false , icon , iconPosition ='before' , menuButton , menuIcon , primaryActionButton , shape ='rounded' , size ='medium'  } = props;
    const baseId = (0, _reactUtilities.useId)('splitButton-');
    const menuButtonShorthand = (0, _reactUtilities.resolveShorthand)(menuButton, {
        defaultProps: {
            appearance,
            disabled,
            disabledFocusable,
            menuIcon,
            shape,
            size
        },
        required: true
    });
    const primaryActionButtonShorthand = (0, _reactUtilities.resolveShorthand)(primaryActionButton, {
        defaultProps: {
            appearance,
            children,
            disabled,
            disabledFocusable,
            icon,
            iconPosition,
            id: baseId + '__primaryActionButton',
            shape,
            size
        },
        required: true
    });
    // Resolve menu button's aria-labelledby to be labelled by the primary action button if not a label was not provided
    // by the user.
    if (menuButtonShorthand && primaryActionButtonShorthand && !menuButtonShorthand['aria-label'] && !menuButtonShorthand['aria-labelledby']) {
        menuButtonShorthand['aria-labelledby'] = primaryActionButtonShorthand.id;
    }
    return {
        // Props passed at the top-level
        appearance,
        disabled,
        disabledFocusable,
        iconPosition,
        shape,
        size,
        // Slots definition
        components: {
            root: 'div',
            menuButton: _menuButton.MenuButton,
            primaryActionButton: _button.Button
        },
        root: (0, _reactUtilities.getNativeElementProps)('div', {
            ref,
            ...props
        }),
        menuButton: menuButtonShorthand,
        primaryActionButton: primaryActionButtonShorthand
    };
}; //# sourceMappingURL=useSplitButton.js.map

//# sourceMappingURL=useSplitButton.js.map