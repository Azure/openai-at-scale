"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useCard_unstable", {
    enumerable: true,
    get: ()=>useCard_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactUtilities = require("@fluentui/react-utilities");
const _reactTabster = require("@fluentui/react-tabster");
const _useCardSelectable = require("./useCardSelectable");
const _cardContext = require("./CardContext");
const focusMap = {
    off: undefined,
    'no-tab': 'limited-trap-focus',
    'tab-exit': 'limited',
    'tab-only': 'unlimited'
};
/**
 * Create the state for interactive cards.
 *
 * This internal hook defines if the card is interactive
 * and control focus properties based on that.
 *
 * @param props - props from this instance of Card
 */ const useCardInteractive = ({ focusMode ='off' , ...props })=>{
    const interactive = [
        'onClick',
        'onDoubleClick',
        'onMouseUp',
        'onMouseDown',
        'onPointerUp',
        'onPointerDown',
        'onTouchStart',
        'onTouchEnd',
        'onDragStart',
        'onDragEnd'
    ].some((prop)=>props[prop]);
    const groupperAttrs = (0, _reactTabster.useFocusableGroup)({
        tabBehavior: focusMap[interactive ? 'no-tab' : focusMode]
    });
    const interactiveFocusAttributes = {
        ...groupperAttrs,
        tabIndex: 0
    };
    return {
        interactive,
        focusAttributes: focusMode === 'off' ? null : interactiveFocusAttributes
    };
};
const useCard_unstable = (props, ref)=>{
    const { appearance ='filled' , orientation ='vertical' , size ='medium'  } = props;
    const [referenceId, setReferenceId] = _react.useState(_cardContext.cardContextDefaultValue.selectableA11yProps.referenceId);
    const [referenceLabel, setReferenceLabel] = _react.useState(_cardContext.cardContextDefaultValue.selectableA11yProps.referenceId);
    const cardBaseRef = (0, _reactTabster.useFocusWithin)();
    const { selectable , selected , selectableCardProps , selectFocused , checkboxSlot , floatingActionSlot  } = (0, _useCardSelectable.useCardSelectable)(props, {
        referenceId,
        referenceLabel
    }, cardBaseRef);
    const cardRef = (0, _reactUtilities.useMergedRefs)(cardBaseRef, ref);
    const { interactive , focusAttributes  } = useCardInteractive(props);
    return {
        appearance,
        orientation,
        size,
        interactive,
        selectable,
        selectFocused,
        selected,
        selectableA11yProps: {
            setReferenceId,
            referenceId,
            referenceLabel,
            setReferenceLabel
        },
        components: {
            root: 'div',
            floatingAction: 'div',
            checkbox: 'input'
        },
        root: (0, _reactUtilities.getNativeElementProps)('div', {
            ref: cardRef,
            role: 'group',
            ...focusAttributes,
            ...props,
            ...selectableCardProps
        }),
        floatingAction: floatingActionSlot,
        checkbox: checkboxSlot
    };
}; //# sourceMappingURL=useCard.js.map

//# sourceMappingURL=useCard.js.map