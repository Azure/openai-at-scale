"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useCheckbox_unstable", {
    enumerable: true,
    get: ()=>useCheckbox_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactUtilities = require("@fluentui/react-utilities");
const _reactIcons = require("@fluentui/react-icons");
const _reactLabel = require("@fluentui/react-label");
const _reactTabster = require("@fluentui/react-tabster");
const useCheckbox_unstable = (props, ref)=>{
    const { disabled =false , required , shape ='square' , size ='medium' , labelPosition ='after' , onChange  } = props;
    const [checked, setChecked] = (0, _reactUtilities.useControllableState)({
        defaultState: props.defaultChecked,
        state: props.checked,
        initialState: false
    });
    const nativeProps = (0, _reactUtilities.getPartitionedNativeProps)({
        props,
        primarySlotTagName: 'input',
        excludedPropNames: [
            'checked',
            'defaultChecked',
            'size',
            'onChange'
        ]
    });
    const mixed = checked === 'mixed';
    const id = (0, _reactUtilities.useId)('checkbox-', nativeProps.primary.id);
    let checkmarkIcon;
    if (mixed) {
        if (shape === 'circular') {
            checkmarkIcon = /*#__PURE__*/ _react.createElement(_reactIcons.CircleFilled, null);
        } else {
            checkmarkIcon = size === 'large' ? /*#__PURE__*/ _react.createElement(_reactIcons.Square16Filled, null) : /*#__PURE__*/ _react.createElement(_reactIcons.Square12Filled, null);
        }
    } else if (checked) {
        checkmarkIcon = size === 'large' ? /*#__PURE__*/ _react.createElement(_reactIcons.Checkmark16Filled, null) : /*#__PURE__*/ _react.createElement(_reactIcons.Checkmark12Filled, null);
    }
    const state = {
        shape,
        checked,
        disabled,
        size,
        labelPosition,
        components: {
            root: 'span',
            input: 'input',
            indicator: 'div',
            label: _reactLabel.Label
        },
        root: (0, _reactUtilities.resolveShorthand)(props.root, {
            required: true,
            defaultProps: {
                ref: (0, _reactTabster.useFocusWithin)(),
                ...nativeProps.root
            }
        }),
        input: (0, _reactUtilities.resolveShorthand)(props.input, {
            required: true,
            defaultProps: {
                type: 'checkbox',
                id,
                ref,
                checked: checked === true,
                ...nativeProps.primary
            }
        }),
        label: (0, _reactUtilities.resolveShorthand)(props.label, {
            required: false,
            defaultProps: {
                htmlFor: id,
                disabled,
                required,
                size: 'medium'
            }
        }),
        indicator: (0, _reactUtilities.resolveShorthand)(props.indicator, {
            required: true,
            defaultProps: {
                'aria-hidden': true,
                children: checkmarkIcon
            }
        })
    };
    state.input.onChange = (0, _reactUtilities.useEventCallback)((ev)=>{
        const val = ev.currentTarget.indeterminate ? 'mixed' : ev.currentTarget.checked;
        onChange === null || onChange === void 0 ? void 0 : onChange(ev, {
            checked: val
        });
        setChecked(val);
    });
    // Create a ref object for the input element so we can use it to set the indeterminate prop.
    // Use useMergedRefs, since the ref might be undefined or a function-ref (no .current)
    const inputRef = (0, _reactUtilities.useMergedRefs)(state.input.ref);
    state.input.ref = inputRef;
    // Set the <input> element's checked and indeterminate properties based on our tri-state property.
    // Since indeterminate can only be set via javascript, it has to be done in a layout effect.
    (0, _reactUtilities.useIsomorphicLayoutEffect)(()=>{
        if (inputRef.current) {
            inputRef.current.indeterminate = mixed;
        }
    }, [
        inputRef,
        mixed
    ]);
    return state;
}; //# sourceMappingURL=useCheckbox.js.map

//# sourceMappingURL=useCheckbox.js.map