{"version":3,"sources":["../../../lib/components/Combobox/useCombobox.js"],"sourcesContent":["import * as React from 'react';\nimport { ArrowLeft, ArrowRight } from '@fluentui/keyboard-keys';\nimport { ChevronDownRegular as ChevronDownIcon } from '@fluentui/react-icons';\nimport { getPartitionedNativeProps, resolveShorthand, mergeCallbacks, useEventCallback, useId, useMergedRefs } from '@fluentui/react-utilities';\nimport { getDropdownActionFromKey } from '../../utils/dropdownKeyActions';\nimport { useComboboxBaseState } from '../../utils/useComboboxBaseState';\nimport { useComboboxPopup } from '../../utils/useComboboxPopup';\nimport { useTriggerListboxSlots } from '../../utils/useTriggerListboxSlots';\nimport { Listbox } from '../Listbox/Listbox';\n/**\n * Create the state required to render Combobox.\n *\n * The returned state can be modified with hooks such as useComboboxStyles_unstable,\n * before being passed to renderCombobox_unstable.\n *\n * @param props - props from this instance of Combobox\n * @param ref - reference to root HTMLElement of Combobox\n */\nexport const useCombobox_unstable = (props, ref) => {\n  var _props_input;\n  const baseState = useComboboxBaseState({\n    ...props,\n    editable: true\n  });\n  const {\n    activeOption,\n    clearSelection,\n    getIndexOfId,\n    getOptionsMatchingText,\n    hasFocus,\n    open,\n    selectOption,\n    selectedOptions,\n    setActiveOption,\n    setFocusVisible,\n    setOpen,\n    setValue,\n    value\n  } = baseState;\n  const {\n    disabled,\n    freeform,\n    inlinePopup,\n    multiselect\n  } = props;\n  const comboId = useId('combobox-');\n  const {\n    primary: triggerNativeProps,\n    root: rootNativeProps\n  } = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['children', 'size']\n  });\n  const rootRef = React.useRef(null);\n  const triggerRef = React.useRef(null);\n  // NVDA and JAWS have bugs that suppress reading the input value text when aria-activedescendant is set\n  // To prevent this, we clear the HTML attribute (but save the state) when a user presses left/right arrows\n  // ref: https://github.com/microsoft/fluentui/issues/26359#issuecomment-1397759888\n  const [hideActiveDescendant, setHideActiveDescendant] = React.useState(false);\n  // calculate listbox width style based on trigger width\n  const [popupDimensions, setPopupDimensions] = React.useState();\n  React.useEffect(() => {\n    // only recalculate width when opening\n    if (open) {\n      var _rootRef_current;\n      const width = `${(_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.clientWidth}px`;\n      if (width !== (popupDimensions === null || popupDimensions === void 0 ? void 0 : popupDimensions.width)) {\n        setPopupDimensions({\n          width\n        });\n      }\n    }\n  }, [open, popupDimensions]);\n  // set active option and selection based on typing\n  const getOptionFromInput = inputValue => {\n    const searchString = inputValue === null || inputValue === void 0 ? void 0 : inputValue.trim().toLowerCase();\n    if (!searchString || searchString.length === 0) {\n      return;\n    }\n    const matcher = optionText => optionText.toLowerCase().indexOf(searchString) === 0;\n    const matches = getOptionsMatchingText(matcher);\n    // return first matching option after the current active option, looping back to the top\n    if (matches.length > 1 && activeOption) {\n      const startIndex = getIndexOfId(activeOption.id);\n      const nextMatch = matches.find(option => getIndexOfId(option.id) >= startIndex);\n      return nextMatch !== null && nextMatch !== void 0 ? nextMatch : matches[0];\n    }\n    var _matches_;\n    return (_matches_ = matches[0]) !== null && _matches_ !== void 0 ? _matches_ : undefined;\n  };\n  /* Handle typed input */ // reset any typed value when an option is selected\n  baseState.selectOption = (ev, option) => {\n    setValue(undefined);\n    selectOption(ev, option);\n  };\n  const onTriggerBlur = ev => {\n    // handle selection and updating value if freeform is false\n    if (!baseState.open && !freeform) {\n      // select matching option, if the value fully matches\n      if (value && activeOption && value.trim().toLowerCase() === (activeOption === null || activeOption === void 0 ? void 0 : activeOption.text.toLowerCase())) {\n        baseState.selectOption(ev, activeOption);\n      }\n      // reset typed value when the input loses focus while collapsed, unless freeform is true\n      setValue(undefined);\n    }\n  };\n  baseState.setOpen = (ev, newState) => {\n    if (disabled) {\n      return;\n    }\n    if (!newState && !freeform) {\n      setValue(undefined);\n    }\n    setOpen(ev, newState);\n  };\n  // update value and active option based on input\n  const onTriggerChange = ev => {\n    const inputValue = ev.target.value;\n    // update uncontrolled value\n    baseState.setValue(inputValue);\n    // handle updating active option based on input\n    const matchingOption = getOptionFromInput(inputValue);\n    setActiveOption(matchingOption);\n    setFocusVisible(true);\n    // clear selection for single-select if the input value no longer matches the selection\n    if (!multiselect && selectedOptions.length === 1 && (inputValue.length < 1 || !matchingOption)) {\n      clearSelection(ev);\n    }\n  };\n  // open Combobox when typing\n  const onTriggerKeyDown = ev => {\n    if (!open && getDropdownActionFromKey(ev) === 'Type') {\n      baseState.setOpen(ev, true);\n    }\n    // clear activedescendant when moving the text insertion cursor\n    if (ev.key === ArrowLeft || ev.key === ArrowRight) {\n      setHideActiveDescendant(true);\n    } else {\n      setHideActiveDescendant(false);\n    }\n  };\n  // resolve input and listbox slot props\n  let triggerSlot;\n  let listboxSlot;\n  triggerSlot = resolveShorthand(props.input, {\n    required: true,\n    defaultProps: {\n      ref: useMergedRefs((_props_input = props.input) === null || _props_input === void 0 ? void 0 : _props_input.ref, triggerRef),\n      type: 'text',\n      value: value !== null && value !== void 0 ? value : '',\n      ...triggerNativeProps\n    }\n  });\n  triggerSlot.onChange = mergeCallbacks(triggerSlot.onChange, onTriggerChange);\n  triggerSlot.onBlur = mergeCallbacks(triggerSlot.onBlur, onTriggerBlur);\n  triggerSlot.onKeyDown = mergeCallbacks(triggerSlot.onKeyDown, onTriggerKeyDown);\n  // only resolve listbox slot if needed\n  listboxSlot = open || hasFocus ? resolveShorthand(props.listbox, {\n    required: true,\n    defaultProps: {\n      children: props.children,\n      style: popupDimensions\n    }\n  }) : undefined;\n  [triggerSlot, listboxSlot] = useComboboxPopup(props, triggerSlot, listboxSlot);\n  [triggerSlot, listboxSlot] = useTriggerListboxSlots(props, baseState, ref, triggerSlot, listboxSlot);\n  if (hideActiveDescendant) {\n    triggerSlot['aria-activedescendant'] = undefined;\n  }\n  const state = {\n    components: {\n      root: 'div',\n      input: 'input',\n      expandIcon: 'span',\n      listbox: Listbox\n    },\n    root: resolveShorthand(props.root, {\n      required: true,\n      defaultProps: {\n        'aria-owns': !inlinePopup ? listboxSlot === null || listboxSlot === void 0 ? void 0 : listboxSlot.id : undefined,\n        ...rootNativeProps\n      }\n    }),\n    input: triggerSlot,\n    listbox: listboxSlot,\n    expandIcon: resolveShorthand(props.expandIcon, {\n      required: true,\n      defaultProps: {\n        'aria-expanded': open,\n        children: /*#__PURE__*/React.createElement(ChevronDownIcon, null),\n        role: 'button'\n      }\n    }),\n    ...baseState\n  };\n  state.root.ref = useMergedRefs(state.root.ref, rootRef);\n  /* handle open/close + focus change when clicking expandIcon */\n  const {\n    onMouseDown: onIconMouseDown,\n    onClick: onIconClick\n  } = state.expandIcon || {};\n  const onExpandIconMouseDown = useEventCallback(mergeCallbacks(onIconMouseDown, () => {\n    // do not dismiss on blur when closing via clicking the icon\n    if (open) {\n      baseState.ignoreNextBlur.current = true;\n    }\n  }));\n  const onExpandIconClick = useEventCallback(mergeCallbacks(onIconClick, event => {\n    var _triggerRef_current;\n    // open and set focus\n    state.setOpen(event, !state.open);\n    (_triggerRef_current = triggerRef.current) === null || _triggerRef_current === void 0 ? void 0 : _triggerRef_current.focus();\n    // set focus visible=false, since this can only be done with the mouse/pointer\n    setFocusVisible(false);\n  }));\n  if (state.expandIcon) {\n    state.expandIcon.onMouseDown = onExpandIconMouseDown;\n    state.expandIcon.onClick = onExpandIconClick;\n    // If there is no explicit aria-label, calculate default accName attribute for expandIcon button,\n    // using the following steps:\n    // 1. If there is an aria-label, it is \"Open [aria-label]\"\n    // 2. If there is an aria-labelledby, it is \"Open [aria-labelledby target]\" (using aria-labelledby + ids)\n    // 3. If there is no aria-label/ledby attr, it falls back to \"Open\"\n    // We can't fall back to a label/htmlFor name because of https://github.com/w3c/accname/issues/179\n    const hasExpandLabel = state.expandIcon['aria-label'] || state.expandIcon['aria-labelledby'];\n    const defaultOpenString = 'Open'; // this is english-only since it is the fallback\n    if (!hasExpandLabel) {\n      if (props['aria-labelledby']) {\n        var _state_expandIcon_id;\n        const chevronId = (_state_expandIcon_id = state.expandIcon.id) !== null && _state_expandIcon_id !== void 0 ? _state_expandIcon_id : `${comboId}-chevron`;\n        const chevronLabelledBy = `${chevronId} ${state.input['aria-labelledby']}`;\n        state.expandIcon['aria-label'] = defaultOpenString;\n        state.expandIcon.id = chevronId;\n        state.expandIcon['aria-labelledby'] = chevronLabelledBy;\n      } else if (props['aria-label']) {\n        state.expandIcon['aria-label'] = `${defaultOpenString} ${props['aria-label']}`;\n      } else {\n        state.expandIcon['aria-label'] = defaultOpenString;\n      }\n    }\n  }\n  return state;\n};\n//# sourceMappingURL=useCombobox.js.map"],"names":["useCombobox_unstable","props","ref","_props_input","baseState","useComboboxBaseState","editable","activeOption","clearSelection","getIndexOfId","getOptionsMatchingText","hasFocus","open","selectOption","selectedOptions","setActiveOption","setFocusVisible","setOpen","setValue","value","disabled","freeform","inlinePopup","multiselect","comboId","useId","primary","triggerNativeProps","root","rootNativeProps","getPartitionedNativeProps","primarySlotTagName","excludedPropNames","rootRef","React","useRef","triggerRef","hideActiveDescendant","setHideActiveDescendant","useState","popupDimensions","setPopupDimensions","useEffect","_rootRef_current","width","current","clientWidth","getOptionFromInput","inputValue","searchString","trim","toLowerCase","length","matcher","optionText","indexOf","matches","startIndex","id","nextMatch","find","option","_matches_","undefined","ev","onTriggerBlur","text","newState","onTriggerChange","target","matchingOption","onTriggerKeyDown","getDropdownActionFromKey","key","ArrowLeft","ArrowRight","triggerSlot","listboxSlot","resolveShorthand","input","required","defaultProps","useMergedRefs","type","onChange","mergeCallbacks","onBlur","onKeyDown","listbox","children","style","useComboboxPopup","useTriggerListboxSlots","state","components","expandIcon","Listbox","createElement","ChevronDownIcon","role","onMouseDown","onIconMouseDown","onClick","onIconClick","onExpandIconMouseDown","useEventCallback","ignoreNextBlur","onExpandIconClick","event","_triggerRef_current","focus","hasExpandLabel","defaultOpenString","_state_expandIcon_id","chevronId","chevronLabelledBy"],"mappings":"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"}