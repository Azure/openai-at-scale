"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useDropdown_unstable", {
    enumerable: true,
    get: ()=>useDropdown_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactIcons = require("@fluentui/react-icons");
const _reactUtilities = require("@fluentui/react-utilities");
const _dropdownKeyActions = require("../../utils/dropdownKeyActions");
const _useComboboxBaseState = require("../../utils/useComboboxBaseState");
const _useComboboxPopup = require("../../utils/useComboboxPopup");
const _useTriggerListboxSlots = require("../../utils/useTriggerListboxSlots");
const _listbox = require("../Listbox/Listbox");
const useDropdown_unstable = (props, ref)=>{
    const baseState = (0, _useComboboxBaseState.useComboboxBaseState)(props);
    const { activeOption , getIndexOfId , getOptionsMatchingText , open , setActiveOption , setFocusVisible , setOpen  } = baseState;
    const { primary: triggerNativeProps , root: rootNativeProps  } = (0, _reactUtilities.getPartitionedNativeProps)({
        props,
        primarySlotTagName: 'button',
        excludedPropNames: [
            'children'
        ]
    });
    // set listbox popup width based off the root/trigger width
    const rootRef = _react.useRef(null);
    const [popupWidth, setPopupWidth] = _react.useState();
    _react.useEffect(()=>{
        var _rootRef_current;
        const width = open ? `${(_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.clientWidth}px` : undefined;
        setPopupWidth(width);
    }, [
        open
    ]);
    // jump to matching option based on typing
    const searchString = _react.useRef('');
    const [setKeyTimeout, clearKeyTimeout] = (0, _reactUtilities.useTimeout)();
    const getNextMatchingOption = ()=>{
        // first check for matches for the full searchString
        let matcher = (optionText)=>optionText.toLowerCase().indexOf(searchString.current) === 0;
        let matches = getOptionsMatchingText(matcher);
        let startIndex = activeOption ? getIndexOfId(activeOption.id) : 0;
        // if the dropdown is already open and the searchstring is a single character,
        // then look after the current activeOption for letters
        // this is so slowly typing the same letter will cycle through matches
        if (open && searchString.current.length === 1) {
            startIndex++;
        }
        // if there are no direct matches, check if the search is all the same letter, e.g. "aaa"
        if (!matches.length) {
            const letters = searchString.current.split('');
            const allSameLetter = letters.length && letters.every((letter)=>letter === letters[0]);
            // if the search is all the same letter, cycle through options starting with that letter
            if (allSameLetter) {
                startIndex++;
                matcher = (optionText)=>optionText.toLowerCase().indexOf(letters[0]) === 0;
                matches = getOptionsMatchingText(matcher);
            }
        }
        // if there is an active option and multiple matches,
        // return first matching option after the current active option, looping back to the top
        if (matches.length > 1 && activeOption) {
            const nextMatch = matches.find((option)=>getIndexOfId(option.id) >= startIndex);
            return nextMatch !== null && nextMatch !== void 0 ? nextMatch : matches[0];
        }
        var _matches_;
        return (_matches_ = matches[0]) !== null && _matches_ !== void 0 ? _matches_ : undefined;
    };
    const onTriggerKeyDown = (ev)=>{
        // clear timeout, if it exists
        clearKeyTimeout();
        // if the key was a char key, update search string
        if ((0, _dropdownKeyActions.getDropdownActionFromKey)(ev) === 'Type') {
            // update search string
            searchString.current += ev.key.toLowerCase();
            setKeyTimeout(()=>{
                searchString.current = '';
            }, 500);
            // update state
            !open && setOpen(ev, true);
            const nextOption = getNextMatchingOption();
            setActiveOption(nextOption);
            setFocusVisible(true);
        }
    };
    // resolve button and listbox slot props
    let triggerSlot;
    let listboxSlot;
    triggerSlot = (0, _reactUtilities.resolveShorthand)(props.button, {
        required: true,
        defaultProps: {
            type: 'button',
            children: baseState.value || props.placeholder,
            ...triggerNativeProps
        }
    });
    triggerSlot.onKeyDown = (0, _reactUtilities.mergeCallbacks)(onTriggerKeyDown, triggerSlot.onKeyDown);
    listboxSlot = baseState.open || baseState.hasFocus ? (0, _reactUtilities.resolveShorthand)(props.listbox, {
        required: true,
        defaultProps: {
            children: props.children,
            style: {
                width: popupWidth
            }
        }
    }) : undefined;
    [triggerSlot, listboxSlot] = (0, _useComboboxPopup.useComboboxPopup)(props, triggerSlot, listboxSlot);
    [triggerSlot, listboxSlot] = (0, _useTriggerListboxSlots.useTriggerListboxSlots)(props, baseState, ref, triggerSlot, listboxSlot);
    const state = {
        components: {
            root: 'div',
            button: 'button',
            expandIcon: 'span',
            listbox: _listbox.Listbox
        },
        root: (0, _reactUtilities.resolveShorthand)(props.root, {
            required: true,
            defaultProps: {
                'aria-owns': !props.inlinePopup ? listboxSlot === null || listboxSlot === void 0 ? void 0 : listboxSlot.id : undefined,
                children: props.children,
                ...rootNativeProps
            }
        }),
        button: triggerSlot,
        listbox: listboxSlot,
        expandIcon: (0, _reactUtilities.resolveShorthand)(props.expandIcon, {
            required: true,
            defaultProps: {
                children: /*#__PURE__*/ _react.createElement(_reactIcons.ChevronDownRegular, null)
            }
        }),
        placeholderVisible: !baseState.value && !!props.placeholder,
        ...baseState
    };
    state.root.ref = (0, _reactUtilities.useMergedRefs)(state.root.ref, rootRef);
    return state;
}; //# sourceMappingURL=useDropdown.js.map

//# sourceMappingURL=useDropdown.js.map