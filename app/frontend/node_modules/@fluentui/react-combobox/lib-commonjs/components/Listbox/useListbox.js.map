{"version":3,"sources":["../../../lib/components/Listbox/useListbox.js"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, mergeCallbacks, useEventCallback, useMergedRefs } from '@fluentui/react-utilities';\nimport { useContextSelector, useHasParentContext } from '@fluentui/react-context-selector';\nimport { getDropdownActionFromKey, getIndexFromAction } from '../../utils/dropdownKeyActions';\nimport { useOptionCollection } from '../../utils/useOptionCollection';\nimport { useScrollOptionsIntoView } from '../../utils/useScrollOptionsIntoView';\nimport { useSelection } from '../../utils/useSelection';\nimport { ComboboxContext } from '../../contexts/ComboboxContext';\n/**\n * Create the state required to render Listbox.\n *\n * The returned state can be modified with hooks such as useListboxStyles_unstable,\n * before being passed to renderListbox_unstable.\n *\n * @param props - props from this instance of Listbox\n * @param ref - reference to root HTMLElement of Listbox\n */\nexport const useListbox_unstable = (props, ref) => {\n  const {\n    multiselect\n  } = props;\n  const optionCollection = useOptionCollection();\n  const {\n    getCount,\n    getOptionAtIndex,\n    getIndexOfId\n  } = optionCollection;\n  const {\n    clearSelection,\n    selectedOptions,\n    selectOption\n  } = useSelection(props);\n  const [activeOption, setActiveOption] = React.useState();\n  // track whether keyboard focus outline should be shown\n  // tabster/keyborg doesn't work here, since the actual keyboard focus target doesn't move\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  const onKeyDown = event => {\n    const action = getDropdownActionFromKey(event, {\n      open: true\n    });\n    const maxIndex = getCount() - 1;\n    const activeIndex = activeOption ? getIndexOfId(activeOption.id) : -1;\n    let newIndex = activeIndex;\n    switch (action) {\n      case 'Select':\n      case 'CloseSelect':\n        activeOption && selectOption(event, activeOption);\n        break;\n      default:\n        newIndex = getIndexFromAction(action, activeIndex, maxIndex);\n    }\n    if (newIndex !== activeIndex) {\n      // prevent default page scroll/keyboard action if the index changed\n      event.preventDefault();\n      setActiveOption(getOptionAtIndex(newIndex));\n      setFocusVisible(true);\n    }\n  };\n  const onMouseOver = event => {\n    setFocusVisible(false);\n  };\n  // get state from parent combobox, if it exists\n  const hasComboboxContext = useHasParentContext(ComboboxContext);\n  const comboboxActiveOption = useContextSelector(ComboboxContext, ctx => ctx.activeOption);\n  const comboboxFocusVisible = useContextSelector(ComboboxContext, ctx => ctx.focusVisible);\n  const comboboxSelectedOptions = useContextSelector(ComboboxContext, ctx => ctx.selectedOptions);\n  const comboboxSelectOption = useContextSelector(ComboboxContext, ctx => ctx.selectOption);\n  const comboboxSetActiveOption = useContextSelector(ComboboxContext, ctx => ctx.setActiveOption);\n  // without a parent combobox context, provide values directly from Listbox\n  const optionContextValues = hasComboboxContext ? {\n    activeOption: comboboxActiveOption,\n    focusVisible: comboboxFocusVisible,\n    selectedOptions: comboboxSelectedOptions,\n    selectOption: comboboxSelectOption,\n    setActiveOption: comboboxSetActiveOption\n  } : {\n    activeOption,\n    focusVisible,\n    selectedOptions,\n    selectOption,\n    setActiveOption\n  };\n  const state = {\n    components: {\n      root: 'div'\n    },\n    root: getNativeElementProps('div', {\n      ref,\n      role: multiselect ? 'menu' : 'listbox',\n      'aria-activedescendant': hasComboboxContext ? undefined : activeOption === null || activeOption === void 0 ? void 0 : activeOption.id,\n      'aria-multiselectable': multiselect,\n      tabIndex: 0,\n      ...props\n    }),\n    multiselect,\n    clearSelection,\n    ...optionCollection,\n    ...optionContextValues\n  };\n  const scrollContainerRef = useScrollOptionsIntoView(state);\n  state.root.ref = useMergedRefs(state.root.ref, scrollContainerRef);\n  state.root.onKeyDown = useEventCallback(mergeCallbacks(state.root.onKeyDown, onKeyDown));\n  state.root.onMouseOver = useEventCallback(mergeCallbacks(state.root.onMouseOver, onMouseOver));\n  return state;\n};\n//# sourceMappingURL=useListbox.js.map"],"names":["useListbox_unstable","props","ref","multiselect","optionCollection","useOptionCollection","getCount","getOptionAtIndex","getIndexOfId","clearSelection","selectedOptions","selectOption","useSelection","activeOption","setActiveOption","React","useState","focusVisible","setFocusVisible","onKeyDown","event","action","getDropdownActionFromKey","open","maxIndex","activeIndex","id","newIndex","getIndexFromAction","preventDefault","onMouseOver","hasComboboxContext","useHasParentContext","ComboboxContext","comboboxActiveOption","useContextSelector","ctx","comboboxFocusVisible","comboboxSelectedOptions","comboboxSelectOption","comboboxSetActiveOption","optionContextValues","state","components","root","getNativeElementProps","role","undefined","tabIndex","scrollContainerRef","useScrollOptionsIntoView","useMergedRefs","useEventCallback","mergeCallbacks"],"mappings":"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"}