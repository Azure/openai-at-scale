"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getDropdownActionFromKey: ()=>getDropdownActionFromKey,
    getIndexFromAction: ()=>getIndexFromAction
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _keyboardKeys = /*#__PURE__*/ _interopRequireWildcard(require("@fluentui/keyboard-keys"));
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
function getDropdownActionFromKey(e, options = {}) {
    const { open =true , multiselect =false  } = options;
    const code = e.key;
    const { altKey , ctrlKey , key , metaKey  } = e;
    // typing action occurs whether open or closed
    if (key.length === 1 && code !== _keyboardKeys.Space && !altKey && !ctrlKey && !metaKey) {
        return 'Type';
    }
    // handle opening the dropdown if closed
    if (!open) {
        if (code === _keyboardKeys.ArrowDown || code === _keyboardKeys.ArrowUp || code === _keyboardKeys.Enter || code === _keyboardKeys.Space) {
            return 'Open';
        }
        // if the dropdown is closed and an action did not match the above, do nothing
        return 'None';
    }
    // select or close actions
    if (code === _keyboardKeys.ArrowUp && altKey || code === _keyboardKeys.Enter || !multiselect && code === _keyboardKeys.Space) {
        return 'CloseSelect';
    }
    if (multiselect && code === _keyboardKeys.Space) {
        return 'Select';
    }
    if (code === _keyboardKeys.Escape) {
        return 'Close';
    }
    // navigation interactions
    if (code === _keyboardKeys.ArrowDown) {
        return 'Next';
    }
    if (code === _keyboardKeys.ArrowUp) {
        return 'Previous';
    }
    if (code === _keyboardKeys.Home) {
        return 'First';
    }
    if (code === _keyboardKeys.End) {
        return 'Last';
    }
    if (code === _keyboardKeys.PageUp) {
        return 'PageUp';
    }
    if (code === _keyboardKeys.PageDown) {
        return 'PageDown';
    }
    if (code === _keyboardKeys.Tab) {
        return 'Tab';
    }
    // if nothing matched, return none
    return 'None';
}
function getIndexFromAction(action, currentIndex, maxIndex) {
    switch(action){
        case 'Next':
            return Math.min(maxIndex, currentIndex + 1);
            break;
        case 'Previous':
            return Math.max(0, currentIndex - 1);
        case 'First':
            return 0;
        case 'Last':
            return maxIndex;
        case 'PageDown':
            return Math.min(maxIndex, currentIndex + 10);
        case 'PageUp':
            return Math.max(0, currentIndex - 10);
        default:
            return currentIndex;
    }
} //# sourceMappingURL=dropdownKeyActions.js.map

//# sourceMappingURL=dropdownKeyActions.js.map