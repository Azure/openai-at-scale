{"version":3,"sources":["../../lib/utils/useComboboxBaseState.js"],"sourcesContent":["import * as React from 'react';\nimport { useControllableState, useFirstMount } from '@fluentui/react-utilities';\nimport { useOptionCollection } from '../utils/useOptionCollection';\nimport { useSelection } from '../utils/useSelection';\n/**\n * State shared between Combobox and Dropdown components\n */\nexport const useComboboxBaseState = props => {\n  const {\n    appearance = 'outline',\n    children,\n    editable = false,\n    inlinePopup = false,\n    multiselect,\n    onOpenChange,\n    size = 'medium'\n  } = props;\n  const optionCollection = useOptionCollection();\n  const {\n    getOptionAtIndex,\n    getOptionsMatchingValue\n  } = optionCollection;\n  const [activeOption, setActiveOption] = React.useState();\n  // track whether keyboard focus outline should be shown\n  // tabster/keyborg doesn't work here, since the actual keyboard focus target doesn't move\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  // track focused state to conditionally render collapsed listbox\n  const [hasFocus, setHasFocus] = React.useState(false);\n  const ignoreNextBlur = React.useRef(false);\n  const selectionState = useSelection(props);\n  const {\n    selectedOptions\n  } = selectionState;\n  // calculate value based on props, internal value changes, and selected options\n  const isFirstMount = useFirstMount();\n  const [controllableValue, setValue] = useControllableState({\n    state: props.value,\n    initialState: undefined\n  });\n  const value = React.useMemo(() => {\n    // don't compute the value if it is defined through props or setValue,\n    if (controllableValue !== undefined) {\n      return controllableValue;\n    }\n    // handle defaultValue here, so it is overridden by selection\n    if (isFirstMount && props.defaultValue !== undefined) {\n      return props.defaultValue;\n    }\n    const selectedOptionsText = getOptionsMatchingValue(optionValue => {\n      return selectedOptions.includes(optionValue);\n    }).map(option => option.text);\n    if (multiselect) {\n      // editable inputs should not display multiple selected options in the input as text\n      return editable ? '' : selectedOptionsText.join(', ');\n    }\n    return selectedOptionsText[0];\n    // do not change value after isFirstMount changes,\n    // we do not want to accidentally override defaultValue on a second render\n    // unless another value is intentionally set\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [controllableValue, editable, getOptionsMatchingValue, multiselect, props.defaultValue, selectedOptions]);\n  // Handle open state, which is shared with options in context\n  const [open, setOpenState] = useControllableState({\n    state: props.open,\n    defaultState: props.defaultOpen,\n    initialState: false\n  });\n  const setOpen = React.useCallback((event, newState) => {\n    onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(event, {\n      open: newState\n    });\n    setOpenState(newState);\n  }, [onOpenChange, setOpenState]);\n  // update active option based on change in open state or children\n  React.useEffect(() => {\n    if (open && !activeOption) {\n      // if it is single-select and there is a selected option, start at the selected option\n      if (!multiselect && selectedOptions.length > 0) {\n        const selectedOption = getOptionsMatchingValue(v => v === selectedOptions[0]).pop();\n        selectedOption && setActiveOption(selectedOption);\n      } else {\n        setActiveOption(getOptionAtIndex(0));\n      }\n    } else if (!open) {\n      // reset the active option when closing\n      setActiveOption(undefined);\n    }\n    // this should only be run in response to changes in the open state or children\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, children]);\n  return {\n    ...optionCollection,\n    ...selectionState,\n    activeOption,\n    appearance,\n    focusVisible,\n    hasFocus,\n    ignoreNextBlur,\n    inlinePopup,\n    open,\n    setActiveOption,\n    setFocusVisible,\n    setHasFocus,\n    setOpen,\n    setValue,\n    size,\n    value\n  };\n};\n//# sourceMappingURL=useComboboxBaseState.js.map"],"names":["useComboboxBaseState","props","appearance","children","editable","inlinePopup","multiselect","onOpenChange","size","optionCollection","useOptionCollection","getOptionAtIndex","getOptionsMatchingValue","activeOption","setActiveOption","React","useState","focusVisible","setFocusVisible","hasFocus","setHasFocus","ignoreNextBlur","useRef","selectionState","useSelection","selectedOptions","isFirstMount","useFirstMount","controllableValue","setValue","useControllableState","state","value","initialState","undefined","useMemo","defaultValue","selectedOptionsText","optionValue","includes","map","option","text","join","open","setOpenState","defaultState","defaultOpen","setOpen","useCallback","event","newState","useEffect","length","selectedOption","v","pop"],"mappings":";;;;+BAOaA;;aAAAA;;;6DAPU;gCAC6B;qCAChB;8BACP;AAItB,MAAMA,uBAAuBC,CAAAA,QAAS;IAC3C,MAAM,EACJC,YAAa,UAAS,EACtBC,SAAQ,EACRC,UAAW,KAAK,CAAA,EAChBC,aAAc,KAAK,CAAA,EACnBC,YAAW,EACXC,aAAY,EACZC,MAAO,SAAQ,EAChB,GAAGP;IACJ,MAAMQ,mBAAmBC,IAAAA,wCAAmB;IAC5C,MAAM,EACJC,iBAAgB,EAChBC,wBAAuB,EACxB,GAAGH;IACJ,MAAM,CAACI,cAAcC,gBAAgB,GAAGC,OAAMC,QAAQ;IACtD,uDAAuD;IACvD,yFAAyF;IACzF,MAAM,CAACC,cAAcC,gBAAgB,GAAGH,OAAMC,QAAQ,CAAC,KAAK;IAC5D,gEAAgE;IAChE,MAAM,CAACG,UAAUC,YAAY,GAAGL,OAAMC,QAAQ,CAAC,KAAK;IACpD,MAAMK,iBAAiBN,OAAMO,MAAM,CAAC,KAAK;IACzC,MAAMC,iBAAiBC,IAAAA,0BAAY,EAACvB;IACpC,MAAM,EACJwB,gBAAe,EAChB,GAAGF;IACJ,+EAA+E;IAC/E,MAAMG,eAAeC,IAAAA,6BAAa;IAClC,MAAM,CAACC,mBAAmBC,SAAS,GAAGC,IAAAA,oCAAoB,EAAC;QACzDC,OAAO9B,MAAM+B,KAAK;QAClBC,cAAcC;IAChB;IACA,MAAMF,QAAQjB,OAAMoB,OAAO,CAAC,IAAM;QAChC,sEAAsE;QACtE,IAAIP,sBAAsBM,WAAW;YACnC,OAAON;QACT,CAAC;QACD,6DAA6D;QAC7D,IAAIF,gBAAgBzB,MAAMmC,YAAY,KAAKF,WAAW;YACpD,OAAOjC,MAAMmC,YAAY;QAC3B,CAAC;QACD,MAAMC,sBAAsBzB,wBAAwB0B,CAAAA,cAAe;YACjE,OAAOb,gBAAgBc,QAAQ,CAACD;QAClC,GAAGE,GAAG,CAACC,CAAAA,SAAUA,OAAOC,IAAI;QAC5B,IAAIpC,aAAa;YACf,oFAAoF;YACpF,OAAOF,WAAW,KAAKiC,oBAAoBM,IAAI,CAAC,KAAK;QACvD,CAAC;QACD,OAAON,mBAAmB,CAAC,EAAE;IAC7B,kDAAkD;IAClD,0EAA0E;IAC1E,4CAA4C;IAC5C,uDAAuD;IACzD,GAAG;QAACT;QAAmBxB;QAAUQ;QAAyBN;QAAaL,MAAMmC,YAAY;QAAEX;KAAgB;IAC3G,6DAA6D;IAC7D,MAAM,CAACmB,MAAMC,aAAa,GAAGf,IAAAA,oCAAoB,EAAC;QAChDC,OAAO9B,MAAM2C,IAAI;QACjBE,cAAc7C,MAAM8C,WAAW;QAC/Bd,cAAc,KAAK;IACrB;IACA,MAAMe,UAAUjC,OAAMkC,WAAW,CAAC,CAACC,OAAOC,WAAa;QACrD5C,iBAAiB,IAAI,IAAIA,iBAAiB,KAAK,IAAI,KAAK,IAAIA,aAAa2C,OAAO;YAC9EN,MAAMO;QACR,EAAE;QACFN,aAAaM;IACf,GAAG;QAAC5C;QAAcsC;KAAa;IAC/B,iEAAiE;IACjE9B,OAAMqC,SAAS,CAAC,IAAM;QACpB,IAAIR,QAAQ,CAAC/B,cAAc;YACzB,sFAAsF;YACtF,IAAI,CAACP,eAAemB,gBAAgB4B,MAAM,GAAG,GAAG;gBAC9C,MAAMC,iBAAiB1C,wBAAwB2C,CAAAA,IAAKA,MAAM9B,eAAe,CAAC,EAAE,EAAE+B,GAAG;gBACjFF,kBAAkBxC,gBAAgBwC;YACpC,OAAO;gBACLxC,gBAAgBH,iBAAiB;YACnC,CAAC;QACH,OAAO,IAAI,CAACiC,MAAM;YAChB,uCAAuC;YACvC9B,gBAAgBoB;QAClB,CAAC;IACD,+EAA+E;IAC/E,uDAAuD;IACzD,GAAG;QAACU;QAAMzC;KAAS;IACnB,OAAO;QACL,GAAGM,gBAAgB;QACnB,GAAGc,cAAc;QACjBV;QACAX;QACAe;QACAE;QACAE;QACAhB;QACAuC;QACA9B;QACAI;QACAE;QACA4B;QACAnB;QACArB;QACAwB;IACF;AACF,GACA,gDAAgD"}