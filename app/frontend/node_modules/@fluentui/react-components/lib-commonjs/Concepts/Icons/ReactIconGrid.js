"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default" //# sourceMappingURL=ReactIconGrid.js.map
, {
    enumerable: true,
    get: ()=>_default
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactIcons = /*#__PURE__*/ _interopRequireWildcard(require("@fluentui/react-icons"));
const _reactInput = require("@fluentui/react-input");
const _react1 = require("@griffel/react");
const useStyles = /*#__PURE__*/ (0, _react1["__styles"])({
    grid: {
        mc9l5x: "f13qh94s",
        Budl1dq: "f103s1qi",
        w08cwm: "fz44487",
        De3pzq: "f1vbpgwy",
        Bqyf3fh: "f1y7pwzt",
        tuaewz: "fkjsrz3",
        js62xs: "f1v4pbv1",
        ge08ax: "f10n702m",
        vwmem1: "fukf1g8",
        pq1t01: "f1ke9dqw",
        Bspu8ag: [
            "ft83mph",
            "fduese8"
        ],
        B83reyd: "ffztlgx",
        d2aa3c: [
            "fduese8",
            "ft83mph"
        ],
        Bo0llhl: "f1ad31ox",
        Bfpbev4: "f1pcllc0",
        Bs90se3: "fdkswtx",
        B83tkto: "f1yxgqk0",
        pxe6pr: "fg04g75",
        Beqvepd: "fvrpp50",
        Bq5m64l: [
            "f1xqymmk",
            "f1mqnmtg"
        ],
        B0xcf35: "f12h2kxz",
        B9c2vit: [
            "f1mqnmtg",
            "f1xqymmk"
        ]
    },
    searchBox: {
        De3pzq: "f1vbpgwy",
        B2u0y6b: "f1ogbl2p",
        jrapky: "f1dl2k97"
    },
    radio: {
        De3pzq: "f1vbpgwy",
        Be2twd7: "fnsq08h"
    }
}, {
    d: [
        ".f13qh94s{display:grid;}",
        ".f103s1qi{grid-template-columns:auto auto auto auto;}",
        ".fz44487{grid-gap:10px;}",
        ".f1vbpgwy{background-color:#F7F7F7;}",
        ".f1y7pwzt>div{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}",
        ".fkjsrz3>div{background-color:#FFFFFF;}",
        ".f1v4pbv1>div{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}",
        ".f10n702m>div{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}",
        ".fukf1g8>div{-webkit-box-pack:space-around;-ms-flex-pack:space-around;-webkit-justify-content:space-around;justify-content:space-around;}",
        ".f1ke9dqw>div{padding-top:8px;}",
        ".ft83mph>div{padding-right:8px;}",
        ".fduese8>div{padding-left:8px;}",
        ".ffztlgx>div{padding-bottom:8px;}",
        ".f1ad31ox>div{overflow-x:hidden;}",
        ".f1pcllc0>div{overflow-y:hidden;}",
        ".fdkswtx>div>code{font-size:8px;}",
        ".f1yxgqk0>div>code{display:inline-block;}",
        ".fg04g75>div>code{height:auto;}",
        ".fvrpp50>div>code{padding-top:0px 8px;}",
        ".f1xqymmk>div>code{padding-right:0px 8px;}",
        ".f1mqnmtg>div>code{padding-left:0px 8px;}",
        ".f12h2kxz>div>code{padding-bottom:0px 8px;}",
        ".f1ogbl2p{max-width:320px;}",
        ".f1dl2k97{margin-bottom:10px;}",
        ".fnsq08h{font-size:11px;}"
    ]
});
const reactIcons = /*#__PURE__*/ Object.keys(_reactIcons) // eslint-disable-next-line @typescript-eslint/no-explicit-any
.map((iconName)=>_reactIcons[iconName]).filter((icon)=>!!icon && !!icon.displayName);
const ReactIconGrid = ()=>{
    const [search, setSearch] = _react.useState('');
    const [size, setSize] = _react.useState(24);
    const styles = useStyles();
    const _onSearchQueryChanged = (ev)=>{
        setSearch(ev ? ev.currentTarget.value : '');
    };
    const _filterBySize = (ev)=>{
        const newSize = ev ? ev.currentTarget.value : '';
        if (newSize === 'All') {
            setSize('');
        } else if (newSize === 'Unsized') {
            setSize('Unsized');
        } else {
            setSize(newSize);
        }
    };
    const _renderIcon = (Icon)=>{
        return /*#__PURE__*/ _react.createElement("div", {
            key: Icon.displayName,
            "aria-label": Icon.displayName
        }, /*#__PURE__*/ _react.createElement(Icon, null), /*#__PURE__*/ _react.createElement("br", null), /*#__PURE__*/ _react.createElement("code", null, Icon.displayName));
    };
    const filteredIcons = _react.useMemo(()=>{
        return reactIcons.filter((icon)=>{
            var _icon_displayName, _icon_displayName1;
            if (size === 'Unsized') {
                var _icon_displayName2;
                return icon.displayName && !/\d/.test(icon.displayName.toLowerCase()) && ((_icon_displayName2 = icon.displayName) === null || _icon_displayName2 === void 0 ? void 0 : _icon_displayName2.toLowerCase().indexOf(search.toLowerCase())) !== -1;
            }
            return ((_icon_displayName = icon.displayName) === null || _icon_displayName === void 0 ? void 0 : _icon_displayName.toLowerCase().indexOf(search.toLowerCase())) !== -1 && ((_icon_displayName1 = icon.displayName) === null || _icon_displayName1 === void 0 ? void 0 : _icon_displayName1.indexOf(String(size))) !== -1;
        });
    }, [
        search,
        size
    ]);
    return /*#__PURE__*/ _react.createElement("div", null, /*#__PURE__*/ _react.createElement(_reactInput.Input, {
        type: "search",
        placeholder: "Search icons",
        value: search,
        "aria-label": "search",
        // eslint-disable-next-line react/jsx-no-bind
        onChange: _onSearchQueryChanged,
        className: styles.searchBox
    }), [
        16,
        20,
        24,
        28,
        32,
        48,
        'Unsized',
        'All'
    ].map((option)=>/*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement("input", {
            id: `option-${option}`,
            defaultChecked: option === 24,
            type: "radio",
            value: option,
            name: "size",
            onChange: _filterBySize
        }), /*#__PURE__*/ _react.createElement("label", {
            htmlFor: `option-${option}`,
            className: styles.radio
        }, option))), /*#__PURE__*/ _react.createElement("div", {
        className: styles.grid
    }, filteredIcons.map(_renderIcon)));
};
const _default = ReactIconGrid;

//# sourceMappingURL=ReactIconGrid.js.map