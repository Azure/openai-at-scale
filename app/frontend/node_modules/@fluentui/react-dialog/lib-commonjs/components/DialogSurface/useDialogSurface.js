"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useDialogSurface_unstable", {
    enumerable: true,
    get: ()=>useDialogSurface_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactUtilities = require("@fluentui/react-utilities");
const _contexts = require("../../contexts");
const _utils = require("../../utils");
const _reactTabster = require("@fluentui/react-tabster");
const useDialogSurface_unstable = (props, ref)=>{
    const { backdrop , as  } = props;
    const modalType = (0, _contexts.useDialogContext_unstable)((ctx)=>ctx.modalType);
    const inertTrapFocus = (0, _contexts.useDialogContext_unstable)((ctx)=>ctx.inertTrapFocus);
    const dialogRef = (0, _contexts.useDialogContext_unstable)((ctx)=>ctx.dialogRef);
    const open = (0, _contexts.useDialogContext_unstable)((ctx)=>ctx.open);
    const requestOpenChange = (0, _contexts.useDialogContext_unstable)((ctx)=>ctx.requestOpenChange);
    const dialogTitleID = (0, _contexts.useDialogContext_unstable)((ctx)=>ctx.dialogTitleId);
    const handledBackdropClick = (0, _reactUtilities.useEventCallback)((event)=>{
        if ((0, _reactUtilities.isResolvedShorthand)(props.backdrop)) {
            var _props_backdrop, _props_backdrop_onClick;
            (_props_backdrop_onClick = (_props_backdrop = props.backdrop).onClick) === null || _props_backdrop_onClick === void 0 ? void 0 : _props_backdrop_onClick.call(_props_backdrop, event);
        }
        if (modalType === 'modal' && !event.isDefaultPrevented()) {
            requestOpenChange({
                event,
                open: false,
                type: 'backdropClick'
            });
        }
    });
    const handleKeyDown = (0, _reactUtilities.useEventCallback)((event)=>{
        var _props_onKeyDown;
        (_props_onKeyDown = props.onKeyDown) === null || _props_onKeyDown === void 0 ? void 0 : _props_onKeyDown.call(props, event);
        if ((0, _utils.isEscapeKeyDismiss)(event, modalType)) {
            requestOpenChange({
                event,
                open: false,
                type: 'escapeKeyDown'
            });
            // stop propagation to avoid conflicting with other elements that listen for `Escape`
            // e,g: nested Dialog, Popover, Menu and Tooltip
            event.stopPropagation();
        }
    });
    const { modalAttributes  } = (0, _reactTabster.useModalAttributes)({
        trapFocus: modalType !== 'non-modal',
        legacyTrapFocus: !inertTrapFocus
    });
    return {
        components: {
            backdrop: 'div',
            root: 'div'
        },
        backdrop: (0, _reactUtilities.resolveShorthand)(backdrop, {
            required: open && modalType !== 'non-modal',
            defaultProps: {
                'aria-hidden': 'true',
                onClick: handledBackdropClick
            }
        }),
        root: (0, _reactUtilities.getNativeElementProps)(as !== null && as !== void 0 ? as : 'div', {
            tabIndex: -1,
            'aria-modal': modalType !== 'non-modal',
            role: modalType === 'alert' ? 'alertdialog' : 'dialog',
            'aria-labelledby': props['aria-label'] ? undefined : dialogTitleID,
            ...props,
            ...modalAttributes,
            onKeyDown: handleKeyDown,
            ref: (0, _reactUtilities.useMergedRefs)(ref, dialogRef)
        })
    };
}; //# sourceMappingURL=useDialogSurface.js.map

//# sourceMappingURL=useDialogSurface.js.map