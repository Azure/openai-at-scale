"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useDisableBodyScroll: ()=>useDisableBodyScroll,
    disableScroll: ()=>disableScroll
});
const _reactSharedContexts = require("@fluentui/react-shared-contexts");
const _react = require("react");
var _element, _disableScrollElementProp;
const disableScrollElementProp = '__fluentDisableScrollElement';
function useDisableBodyScroll() {
    const { targetDocument  } = (0, _reactSharedContexts.useFluent_unstable)();
    return (0, _react.useCallback)(()=>{
        if (targetDocument) {
            return disableScroll(targetDocument.body);
        }
    }, [
        targetDocument
    ]);
}
function disableScroll(target) {
    var _target_ownerDocument_defaultView;
    const { clientWidth  } = target.ownerDocument.documentElement;
    var _target_ownerDocument_defaultView_innerWidth;
    const innerWidth = (_target_ownerDocument_defaultView_innerWidth = (_target_ownerDocument_defaultView = target.ownerDocument.defaultView) === null || _target_ownerDocument_defaultView === void 0 ? void 0 : _target_ownerDocument_defaultView.innerWidth) !== null && _target_ownerDocument_defaultView_innerWidth !== void 0 ? _target_ownerDocument_defaultView_innerWidth : 0;
    assertIsDisableScrollElement(target);
    if (target[disableScrollElementProp].count === 0) {
        target.style.overflow = 'hidden';
        target.style.paddingRight = `${innerWidth - clientWidth}px`;
    }
    target[disableScrollElementProp].count++;
    return ()=>{
        target[disableScrollElementProp].count--;
        if (target[disableScrollElementProp].count === 0) {
            target.style.overflow = target[disableScrollElementProp].previousOverflowStyle;
            target.style.paddingRight = target[disableScrollElementProp].previousPaddingRightStyle;
        }
    };
}
function assertIsDisableScrollElement(element) {
    var _;
    (_ = (_element = element)[_disableScrollElementProp = disableScrollElementProp]) !== null && _ !== void 0 ? _ : _element[_disableScrollElementProp] = {
        count: 0,
        previousOverflowStyle: element.style.overflow,
        previousPaddingRightStyle: element.style.paddingRight
    };
} //# sourceMappingURL=useDisableBodyScroll.js.map

//# sourceMappingURL=useDisableBodyScroll.js.map