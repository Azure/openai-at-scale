"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useField_unstable", {
    enumerable: true,
    get: ()=>useField_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactIcons = require("@fluentui/react-icons");
const _reactLabel = require("@fluentui/react-label");
const _reactUtilities = require("@fluentui/react-utilities");
var _controlProps, _arialabelledby, // Assign the child a generated ID if doesn't already have an ID
_controlProps1, _controlProps2, _ariainvalid, _controlProps3, _ariarequired;
const validationMessageIcons = {
    error: /*#__PURE__*/ _react.createElement(_reactIcons.ErrorCircle12Filled, null),
    warning: /*#__PURE__*/ _react.createElement(_reactIcons.Warning12Filled, null),
    success: /*#__PURE__*/ _react.createElement(_reactIcons.CheckmarkCircle12Filled, null),
    none: undefined
};
const useField_unstable = (props, ref)=>{
    const { children , orientation ='vertical' , required , validationState =props.validationMessage ? 'error' : 'none' , size  } = props;
    const baseId = (0, _reactUtilities.useId)('field-');
    const root = (0, _reactUtilities.getNativeElementProps)('div', {
        ...props,
        ref
    }, /*excludedPropNames:*/ [
        'children'
    ]);
    const label = (0, _reactUtilities.resolveShorthand)(props.label, {
        defaultProps: {
            id: baseId + '__label',
            required,
            size
        }
    });
    const validationMessage = (0, _reactUtilities.resolveShorthand)(props.validationMessage, {
        defaultProps: {
            id: baseId + '__validationMessage',
            role: validationState === 'error' ? 'alert' : undefined
        }
    });
    const hint = (0, _reactUtilities.resolveShorthand)(props.hint, {
        defaultProps: {
            id: baseId + '__hint'
        }
    });
    const defaultIcon = validationMessageIcons[validationState];
    const validationMessageIcon = (0, _reactUtilities.resolveShorthand)(props.validationMessageIcon, {
        required: !!defaultIcon,
        defaultProps: {
            children: defaultIcon
        }
    });
    const controlProps = /*#__PURE__*/ /*#__PURE__*/ _react.isValidElement(children) ? {
        ...children.props
    } : {};
    if (label) {
        var _;
        (_ = (_controlProps = controlProps)[_arialabelledby = 'aria-labelledby']) !== null && _ !== void 0 ? _ : _controlProps[_arialabelledby] = label.id;
        if (!label.htmlFor) {
            var _id;
            (_id = (_controlProps1 = controlProps).id) !== null && _id !== void 0 ? _id : _controlProps1.id = baseId + '__control';
            label.htmlFor = controlProps.id;
        }
    }
    if (validationMessage || hint) {
        // The control is described by the validation message, or hint, or both
        // We also preserve and append any aria-describedby supplied by the user
        // For reference: https://github.com/microsoft/fluentui/pull/25580#discussion_r1017259933
        controlProps['aria-describedby'] = [
            validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.id,
            hint === null || hint === void 0 ? void 0 : hint.id,
            controlProps['aria-describedby']
        ].filter(Boolean).join(' ');
    }
    if (validationState === 'error') {
        var _1;
        (_1 = (_controlProps2 = controlProps)[_ariainvalid = 'aria-invalid']) !== null && _1 !== void 0 ? _1 : _controlProps2[_ariainvalid] = true;
    }
    if (required) {
        var _2;
        (_2 = (_controlProps3 = controlProps)[_ariarequired = 'aria-required']) !== null && _2 !== void 0 ? _2 : _controlProps3[_ariarequired] = true;
    }
    if (/*#__PURE__*/ _react.isValidElement(children)) {
        root.children = /*#__PURE__*/ _react.cloneElement(children, controlProps);
    } else if (typeof children === 'function') {
        root.children = children(controlProps);
    }
    return {
        orientation,
        validationState,
        components: {
            root: 'div',
            label: _reactLabel.Label,
            validationMessage: 'div',
            validationMessageIcon: 'span',
            hint: 'div'
        },
        root,
        label,
        validationMessageIcon,
        validationMessage,
        hint
    };
}; //# sourceMappingURL=useField.js.map

//# sourceMappingURL=useField.js.map