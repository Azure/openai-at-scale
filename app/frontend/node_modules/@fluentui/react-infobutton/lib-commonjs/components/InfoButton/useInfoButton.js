"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useInfoButton_unstable", {
    enumerable: true,
    get: ()=>useInfoButton_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _defaultInfoButtonIcons = require("./DefaultInfoButtonIcons");
const _reactUtilities = require("@fluentui/react-utilities");
const _reactPopover = require("@fluentui/react-popover");
const infoButtonIconMap = {
    small: /*#__PURE__*/ _react.createElement(_defaultInfoButtonIcons.DefaultInfoButtonIcon12, null),
    medium: /*#__PURE__*/ _react.createElement(_defaultInfoButtonIcons.DefaultInfoButtonIcon16, null),
    large: /*#__PURE__*/ _react.createElement(_defaultInfoButtonIcons.DefaultInfoButtonIcon20, null)
};
const popoverSizeMap = {
    small: 'small',
    medium: 'small',
    large: 'medium'
};
const useInfoButton_unstable = (props, ref)=>{
    const { size ='medium'  } = props;
    const state = {
        size,
        components: {
            root: 'button',
            popover: _reactPopover.Popover,
            content: _reactPopover.PopoverSurface
        },
        root: (0, _reactUtilities.getNativeElementProps)('button', {
            children: infoButtonIconMap[size],
            type: 'button',
            'aria-label': 'information',
            ...props,
            ref
        }),
        popover: (0, _reactUtilities.resolveShorthand)(props.popover, {
            required: true,
            defaultProps: {
                positioning: 'above-start',
                size: popoverSizeMap[size],
                withArrow: true
            }
        }),
        content: (0, _reactUtilities.resolveShorthand)(props.content, {
            required: true,
            defaultProps: {
                role: 'note',
                tabIndex: -1
            }
        })
    };
    const [popoverOpen, setPopoverOpen] = (0, _reactUtilities.useControllableState)({
        state: state.popover.open,
        defaultState: state.popover.defaultOpen,
        initialState: false
    });
    state.popover.open = popoverOpen;
    state.popover.onOpenChange = (0, _reactUtilities.mergeCallbacks)(state.popover.onOpenChange, (e, data)=>setPopoverOpen(data.open));
    return state;
}; //# sourceMappingURL=useInfoButton.js.map

//# sourceMappingURL=useInfoButton.js.map