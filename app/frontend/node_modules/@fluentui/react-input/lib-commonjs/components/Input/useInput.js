"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useInput_unstable", {
    enumerable: true,
    get: ()=>useInput_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactUtilities = require("@fluentui/react-utilities");
const _reactSharedContexts = require("@fluentui/react-shared-contexts");
const useInput_unstable = (props, ref)=>{
    const overrides = (0, _reactSharedContexts.useOverrides_unstable)();
    var _overrides_inputDefaultAppearance;
    const { size ='medium' , appearance =(_overrides_inputDefaultAppearance = overrides.inputDefaultAppearance) !== null && _overrides_inputDefaultAppearance !== void 0 ? _overrides_inputDefaultAppearance : 'outline' , onChange  } = props;
    if (process.env.NODE_ENV !== 'production' && (appearance === 'filled-darker-shadow' || appearance === 'filled-lighter-shadow')) {
        // eslint-disable-next-line no-console
        console.error("The 'filled-darker-shadow' and 'filled-lighter-shadow' appearances are deprecated and will be removed in the" + ' future.');
    }
    const [value, setValue] = (0, _reactUtilities.useControllableState)({
        state: props.value,
        defaultState: props.defaultValue,
        initialState: ''
    });
    const nativeProps = (0, _reactUtilities.getPartitionedNativeProps)({
        props,
        primarySlotTagName: 'input',
        excludedPropNames: [
            'size',
            'onChange',
            'value',
            'defaultValue'
        ]
    });
    const state = {
        size,
        appearance,
        components: {
            root: 'span',
            input: 'input',
            contentBefore: 'span',
            contentAfter: 'span'
        },
        input: (0, _reactUtilities.resolveShorthand)(props.input, {
            required: true,
            defaultProps: {
                type: 'text',
                ref,
                ...nativeProps.primary
            }
        }),
        contentAfter: (0, _reactUtilities.resolveShorthand)(props.contentAfter),
        contentBefore: (0, _reactUtilities.resolveShorthand)(props.contentBefore),
        root: (0, _reactUtilities.resolveShorthand)(props.root, {
            required: true,
            defaultProps: nativeProps.root
        })
    };
    state.input.value = value;
    state.input.onChange = (0, _reactUtilities.useEventCallback)((ev)=>{
        const newValue = ev.target.value;
        onChange === null || onChange === void 0 ? void 0 : onChange(ev, {
            value: newValue
        });
        setValue(newValue);
    });
    return state;
}; //# sourceMappingURL=useInput.js.map

//# sourceMappingURL=useInput.js.map