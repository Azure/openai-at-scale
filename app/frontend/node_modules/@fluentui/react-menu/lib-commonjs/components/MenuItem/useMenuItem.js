"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useMenuItem_unstable", {
    enumerable: true,
    get: ()=>useMenuItem_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactUtilities = require("@fluentui/react-utilities");
const _reactSharedContexts = require("@fluentui/react-shared-contexts");
const _useCharacterSearch = require("./useCharacterSearch");
const _menuTriggerContext = require("../../contexts/menuTriggerContext");
const _reactIcons = require("@fluentui/react-icons");
const _menuListContext = require("../../contexts/menuListContext");
const _menuContext = require("../../contexts/menuContext");
const _reactAria = require("@fluentui/react-aria");
const _keyboardKeys = require("@fluentui/keyboard-keys");
const ChevronRightIcon = /*#__PURE__*/ (0, _reactIcons.bundleIcon)(_reactIcons.ChevronRightFilled, _reactIcons.ChevronRightRegular);
const ChevronLeftIcon = /*#__PURE__*/ (0, _reactIcons.bundleIcon)(_reactIcons.ChevronLeftFilled, _reactIcons.ChevronLeftRegular);
const useMenuItem_unstable = (props, ref)=>{
    const isSubmenuTrigger = (0, _menuTriggerContext.useMenuTriggerContext_unstable)();
    const persistOnClickContext = (0, _menuContext.useMenuContext_unstable)((context)=>context.persistOnItemClick);
    const { as ='div' , disabled =false , hasSubmenu =isSubmenuTrigger , persistOnClick =persistOnClickContext  } = props;
    const hasIcons = (0, _menuListContext.useMenuListContext_unstable)((context)=>context.hasIcons);
    const hasCheckmarks = (0, _menuListContext.useMenuListContext_unstable)((context)=>context.hasCheckmarks);
    const setOpen = (0, _menuContext.useMenuContext_unstable)((context)=>context.setOpen);
    const { dir  } = (0, _reactSharedContexts.useFluent_unstable)();
    const innerRef = _react.useRef(null);
    const dismissedWithKeyboardRef = _react.useRef(false);
    const state = {
        hasSubmenu,
        disabled,
        persistOnClick,
        components: {
            root: 'div',
            icon: 'span',
            checkmark: 'span',
            submenuIndicator: 'span',
            content: 'span',
            secondaryContent: 'span'
        },
        root: (0, _reactUtilities.getNativeElementProps)(as, (0, _reactAria.useARIAButtonProps)(as, {
            role: 'menuitem',
            ...props,
            disabled: false,
            disabledFocusable: disabled,
            ref: (0, _reactUtilities.useMergedRefs)(ref, innerRef),
            onKeyDown: (0, _reactUtilities.useEventCallback)((event)=>{
                var _props_onKeyDown;
                (_props_onKeyDown = props.onKeyDown) === null || _props_onKeyDown === void 0 ? void 0 : _props_onKeyDown.call(props, event);
                if (!event.isDefaultPrevented() && (event.key === _keyboardKeys.Space || event.key === _keyboardKeys.Enter)) {
                    dismissedWithKeyboardRef.current = true;
                }
            }),
            onMouseEnter: (0, _reactUtilities.useEventCallback)((event)=>{
                var _innerRef_current, _props_onMouseEnter;
                (_innerRef_current = innerRef.current) === null || _innerRef_current === void 0 ? void 0 : _innerRef_current.focus();
                (_props_onMouseEnter = props.onMouseEnter) === null || _props_onMouseEnter === void 0 ? void 0 : _props_onMouseEnter.call(props, event);
            }),
            onClick: (0, _reactUtilities.useEventCallback)((event)=>{
                var _props_onClick;
                if (!hasSubmenu && !persistOnClick) {
                    setOpen(event, {
                        open: false,
                        keyboard: dismissedWithKeyboardRef.current,
                        bubble: true,
                        type: 'menuItemClick',
                        event
                    });
                    dismissedWithKeyboardRef.current = false;
                }
                (_props_onClick = props.onClick) === null || _props_onClick === void 0 ? void 0 : _props_onClick.call(props, event);
            })
        })),
        icon: (0, _reactUtilities.resolveShorthand)(props.icon, {
            required: hasIcons
        }),
        checkmark: (0, _reactUtilities.resolveShorthand)(props.checkmark, {
            required: hasCheckmarks
        }),
        submenuIndicator: (0, _reactUtilities.resolveShorthand)(props.submenuIndicator, {
            required: hasSubmenu,
            defaultProps: {
                children: dir === 'ltr' ? /*#__PURE__*/ _react.createElement(ChevronRightIcon, null) : /*#__PURE__*/ _react.createElement(ChevronLeftIcon, null)
            }
        }),
        content: (0, _reactUtilities.resolveShorthand)(props.content, {
            required: !!props.children,
            defaultProps: {
                children: props.children
            }
        }),
        secondaryContent: (0, _reactUtilities.resolveShorthand)(props.secondaryContent)
    };
    (0, _useCharacterSearch.useCharacterSearch)(state, innerRef);
    return state;
}; //# sourceMappingURL=useMenuItem.js.map

//# sourceMappingURL=useMenuItem.js.map