"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "usePersona_unstable", {
    enumerable: true,
    get: ()=>usePersona_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactAvatar = require("@fluentui/react-avatar");
const _reactUtilities = require("@fluentui/react-utilities");
const _reactBadge = require("@fluentui/react-badge");
const usePersona_unstable = (props, ref)=>{
    const { name , presenceOnly =false , size ='medium' , textAlignment ='start' , textPosition ='after'  } = props;
    const primaryText = (0, _reactUtilities.resolveShorthand)(props.primaryText, {
        required: true,
        defaultProps: {
            children: name
        }
    });
    const secondaryText = (0, _reactUtilities.resolveShorthand)(props.secondaryText);
    const tertiaryText = (0, _reactUtilities.resolveShorthand)(props.tertiaryText);
    const quaternaryText = (0, _reactUtilities.resolveShorthand)(props.quaternaryText);
    const numTextLines = [
        primaryText,
        secondaryText,
        tertiaryText,
        quaternaryText
    ].filter(Boolean).length;
    return {
        numTextLines,
        presenceOnly,
        size,
        textAlignment,
        textPosition,
        components: {
            root: 'div',
            avatar: _reactAvatar.Avatar,
            presence: _reactBadge.PresenceBadge,
            primaryText: 'span',
            secondaryText: 'span',
            tertiaryText: 'span',
            quaternaryText: 'span'
        },
        root: (0, _reactUtilities.getNativeElementProps)('div', {
            ...props,
            ref
        }, /* excludedPropNames */ [
            'name'
        ]),
        avatar: !presenceOnly ? (0, _reactUtilities.resolveShorthand)(props.avatar, {
            required: true,
            defaultProps: {
                name,
                badge: props.presence,
                size: avatarSizes[size]
            }
        }) : undefined,
        presence: presenceOnly ? (0, _reactUtilities.resolveShorthand)(props.presence, {
            defaultProps: {
                size: presenceSizes[size]
            }
        }) : undefined,
        primaryText,
        secondaryText,
        tertiaryText,
        quaternaryText
    };
};
const presenceSizes = {
    'extra-small': 'tiny',
    small: 'extra-small',
    medium: 'small',
    large: 'medium',
    'extra-large': 'large',
    huge: 'large'
};
const avatarSizes = {
    'extra-small': 20,
    small: 28,
    medium: 32,
    large: 36,
    'extra-large': 40,
    huge: 56
}; //# sourceMappingURL=usePersona.js.map

//# sourceMappingURL=usePersona.js.map