"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    toMountNodeProps: ()=>toMountNodeProps,
    usePortal_unstable: ()=>usePortal_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _reactUtilities = require("@fluentui/react-utilities");
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _index = require("../../virtualParent/index");
const _usePortalMountNode = require("./usePortalMountNode");
function toMountNodeProps(mountNode) {
    if ((0, _reactUtilities.isHTMLElement)(mountNode)) {
        return {
            element: mountNode
        };
    }
    if (typeof mountNode === 'object') {
        if (mountNode === null) {
            return {
                element: null
            };
        }
        return mountNode;
    }
    return {};
}
const usePortal_unstable = (props)=>{
    const { element , className  } = toMountNodeProps(props.mountNode);
    const virtualParentRootRef = _react.useRef(null);
    const fallbackElement = (0, _usePortalMountNode.usePortalMountNode)({
        disabled: !!element,
        className
    });
    const state = {
        children: props.children,
        mountNode: element !== null && element !== void 0 ? element : fallbackElement,
        virtualParentRootRef
    };
    _react.useEffect(()=>{
        if (state.virtualParentRootRef.current && state.mountNode) {
            (0, _index.setVirtualParent)(state.mountNode, state.virtualParentRootRef.current);
        }
        return ()=>{
            if (state.mountNode) {
                (0, _index.setVirtualParent)(state.mountNode, undefined);
            }
        };
    }, [
        state.virtualParentRootRef,
        state.mountNode
    ]);
    return state;
}; //# sourceMappingURL=usePortal.js.map

//# sourceMappingURL=usePortal.js.map