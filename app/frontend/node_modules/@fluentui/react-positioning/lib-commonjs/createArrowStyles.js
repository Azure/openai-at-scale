"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createArrowStyles: ()=>createArrowStyles,
    createArrowHeightStyles: ()=>createArrowHeightStyles
});
const _react = require("@griffel/react");
const _reactTheme = require("@fluentui/react-theme");
function createArrowStyles(options) {
    const { arrowHeight , borderWidth ='1px' , borderStyle ='solid' , borderColor =_reactTheme.tokens.colorTransparentStroke  } = options;
    return {
        position: 'absolute',
        backgroundColor: 'inherit',
        visibility: 'hidden',
        zIndex: -1,
        ...arrowHeight && createArrowHeightStyles(arrowHeight),
        '::before': {
            content: '""',
            visibility: 'visible',
            position: 'absolute',
            boxSizing: 'border-box',
            width: 'inherit',
            height: 'inherit',
            backgroundColor: 'inherit',
            ..._react.shorthands.borderRight(`${borderWidth} /* @noflip */`, `${borderStyle} /* @noflip */`, `${borderColor} /* @noflip */`),
            ..._react.shorthands.borderBottom(borderWidth, borderStyle, borderColor),
            borderBottomRightRadius: _reactTheme.tokens.borderRadiusSmall,
            transform: 'rotate(var(--angle)) translate(0, 50%) rotate(45deg)'
        },
        // Popper sets data-popper-placement on the root element, which is used to align the arrow
        ':global([data-popper-placement^="top"])': {
            bottom: `-${borderWidth}`,
            '--angle': '0'
        },
        ':global([data-popper-placement^="right"])': {
            left: `-${borderWidth} /* @noflip */`,
            '--angle': '90deg'
        },
        ':global([data-popper-placement^="bottom"])': {
            top: `-${borderWidth}`,
            '--angle': '180deg'
        },
        ':global([data-popper-placement^="left"])': {
            right: `-${borderWidth} /* @noflip */`,
            '--angle': '270deg'
        }
    };
}
function createArrowHeightStyles(arrowHeight) {
    // The arrow is a square rotated 45 degrees to have its bottom and right edges form a right triangle.
    // Multiply the triangle's height by sqrt(2) to get length of its edges.
    const edgeLength = `${1.414 * arrowHeight}px`;
    return {
        width: edgeLength,
        height: edgeLength
    };
} //# sourceMappingURL=createArrowStyles.js.map

//# sourceMappingURL=createArrowStyles.js.map