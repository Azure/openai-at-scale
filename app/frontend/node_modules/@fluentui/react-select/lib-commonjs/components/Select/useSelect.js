"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useSelect_unstable", {
    enumerable: true,
    get: ()=>useSelect_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactUtilities = require("@fluentui/react-utilities");
const _reactIcons = require("@fluentui/react-icons");
const _reactSharedContexts = require("@fluentui/react-shared-contexts");
const useSelect_unstable = (props, ref)=>{
    const overrides = (0, _reactSharedContexts.useOverrides_unstable)();
    var _overrides_inputDefaultAppearance;
    const { defaultValue , value , select , icon , root , appearance =(_overrides_inputDefaultAppearance = overrides.inputDefaultAppearance) !== null && _overrides_inputDefaultAppearance !== void 0 ? _overrides_inputDefaultAppearance : 'outline' , onChange , size ='medium'  } = props;
    const nativeProps = (0, _reactUtilities.getPartitionedNativeProps)({
        props,
        primarySlotTagName: 'select',
        excludedPropNames: [
            'appearance',
            'defaultValue',
            'onChange',
            'size',
            'value'
        ]
    });
    const state = {
        size,
        appearance,
        components: {
            root: 'span',
            select: 'select',
            icon: 'span'
        },
        select: (0, _reactUtilities.resolveShorthand)(select, {
            required: true,
            defaultProps: {
                defaultValue,
                value,
                ref,
                ...nativeProps.primary
            }
        }),
        icon: (0, _reactUtilities.resolveShorthand)(icon, {
            required: true,
            defaultProps: {
                children: /*#__PURE__*/ _react.createElement(_reactIcons.ChevronDownRegular, null)
            }
        }),
        root: (0, _reactUtilities.resolveShorthand)(root, {
            required: true,
            defaultProps: nativeProps.root
        })
    };
    state.select.onChange = (0, _reactUtilities.useEventCallback)((event)=>{
        onChange === null || onChange === void 0 ? void 0 : onChange(event, {
            value: event.target.value
        });
    });
    return state;
}; //# sourceMappingURL=useSelect.js.map

//# sourceMappingURL=useSelect.js.map