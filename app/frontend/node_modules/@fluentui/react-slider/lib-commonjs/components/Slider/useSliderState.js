"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useSliderState_unstable", {
    enumerable: true,
    get: ()=>useSliderState_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactUtilities = require("@fluentui/react-utilities");
const _reactSharedContexts = require("@fluentui/react-shared-contexts");
const _useSliderStyles = require("./useSliderStyles");
const { sliderStepsPercentVar , sliderProgressVar , sliderDirectionVar  } = _useSliderStyles.sliderCSSVars;
const getPercent = (value, min, max)=>{
    return max === min ? 0 : (value - min) / (max - min) * 100;
};
const useSliderState_unstable = (state, props)=>{
    const { defaultValue =0 , min =0 , max =100 , step , value  } = props;
    const { dir  } = (0, _reactSharedContexts.useFluent_unstable)();
    const [currentValue, setCurrentValue] = (0, _reactUtilities.useControllableState)({
        state: value !== undefined ? (0, _reactUtilities.clamp)(value, min, max) : undefined,
        defaultState: (0, _reactUtilities.clamp)(defaultValue, min, max),
        initialState: 0
    });
    const valuePercent = getPercent(currentValue, min, max);
    const inputOnChange = state.input.onChange;
    const propsOnChange = props.onChange;
    const onChange = (0, _reactUtilities.useEventCallback)((ev)=>{
        const newValue = Number(ev.target.value);
        setCurrentValue((0, _reactUtilities.clamp)(newValue, min, max));
        if (inputOnChange && inputOnChange !== propsOnChange) {
            inputOnChange(ev);
        } else if (propsOnChange) {
            propsOnChange(ev, {
                value: newValue
            });
        }
    });
    const rootVariables = {
        [sliderDirectionVar]: state.vertical ? '0deg' : dir === 'ltr' ? '90deg' : '270deg',
        [sliderStepsPercentVar]: step && step > 0 ? `${step * 100 / (max - min)}%` : '',
        [sliderProgressVar]: `${valuePercent}%`
    };
    // Root props
    state.root.style = {
        ...rootVariables,
        ...state.root.style
    };
    // Input Props
    state.input.value = currentValue;
    state.input.onChange = onChange;
    return state;
}; //# sourceMappingURL=useSliderState.js.map

//# sourceMappingURL=useSliderState.js.map