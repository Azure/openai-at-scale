{"version":3,"sources":["../../lib/utils/precision.js"],"sourcesContent":["/**\n * Calculates a number's precision based on the number of trailing\n * zeros if the number does not have a decimal indicated by a negative\n * precision. Otherwise, it calculates the number of digits after\n * the decimal point indicated by a positive precision.\n * @param value - the value to determine the precision of\n */export function calculatePrecision(value) {\n  /**\n  * Group 1:\n  * [1-9]([0]+$) matches trailing zeros\n  * Group 2:\n  * \\.([0-9]*) matches all digits after a decimal point.\n  */\n  const groups = /[1-9]([0]+$)|\\.([0-9]*)/.exec(String(value));\n  if (!groups) {\n    return 0;\n  }\n  if (groups[1]) {\n    return -groups[1].length;\n  }\n  if (groups[2]) {\n    return groups[2].length;\n  }\n  return 0;\n}\n/**\n * Rounds a number to a certain level of precision. Accepts negative precision.\n * @param value - The value that is being rounded.\n * @param precision - The number of decimal places to round the number to\n */\nexport function precisionRound(value, precision, base = 10) {\n  const exp = Math.pow(base, precision);\n  return Math.round(value * exp) / exp;\n}\n//# sourceMappingURL=precision.js.map"],"names":["calculatePrecision","precisionRound","value","groups","exec","String","length","precision","base","exp","Math","pow","round"],"mappings":"AAAA;;;;;;CAMC;;;;;;;;;;;IAAkBA,kBAAkB,MAAlBA;IAwBHC,cAAc,MAAdA;;AAxBN,SAASD,mBAAmBE,KAAK,EAAE;IAC3C;;;;;EAKA,GACA,MAAMC,SAAS,0BAA0BC,IAAI,CAACC,OAAOH;IACrD,IAAI,CAACC,QAAQ;QACX,OAAO;IACT,CAAC;IACD,IAAIA,MAAM,CAAC,EAAE,EAAE;QACb,OAAO,CAACA,MAAM,CAAC,EAAE,CAACG,MAAM;IAC1B,CAAC;IACD,IAAIH,MAAM,CAAC,EAAE,EAAE;QACb,OAAOA,MAAM,CAAC,EAAE,CAACG,MAAM;IACzB,CAAC;IACD,OAAO;AACT;AAMO,SAASL,eAAeC,KAAK,EAAEK,SAAS,EAAEC,OAAO,EAAE,EAAE;IAC1D,MAAMC,MAAMC,KAAKC,GAAG,CAACH,MAAMD;IAC3B,OAAOG,KAAKE,KAAK,CAACV,QAAQO,OAAOA;AACnC,EACA,qCAAqC"}