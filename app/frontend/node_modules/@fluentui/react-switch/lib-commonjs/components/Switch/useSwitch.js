"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useSwitch_unstable", {
    enumerable: true,
    get: ()=>useSwitch_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactIcons = require("@fluentui/react-icons");
const _reactLabel = require("@fluentui/react-label");
const _reactTabster = require("@fluentui/react-tabster");
const _reactUtilities = require("@fluentui/react-utilities");
const useSwitch_unstable = (props, ref)=>{
    const { checked , defaultChecked , disabled , labelPosition ='after' , onChange , required  } = props;
    const nativeProps = (0, _reactUtilities.getPartitionedNativeProps)({
        props,
        primarySlotTagName: 'input',
        excludedPropNames: [
            'checked',
            'defaultChecked',
            'onChange'
        ]
    });
    const id = (0, _reactUtilities.useId)('switch-', nativeProps.primary.id);
    const root = (0, _reactUtilities.resolveShorthand)(props.root, {
        defaultProps: {
            ref: (0, _reactTabster.useFocusWithin)(),
            ...nativeProps.root
        },
        required: true
    });
    const indicator = (0, _reactUtilities.resolveShorthand)(props.indicator, {
        defaultProps: {
            'aria-hidden': true,
            children: /*#__PURE__*/ _react.createElement(_reactIcons.CircleFilled, null)
        },
        required: true
    });
    const input = (0, _reactUtilities.resolveShorthand)(props.input, {
        defaultProps: {
            checked,
            defaultChecked,
            id,
            ref,
            role: 'switch',
            type: 'checkbox',
            ...nativeProps.primary
        },
        required: true
    });
    input.onChange = (0, _reactUtilities.mergeCallbacks)(input.onChange, (ev)=>{
        return onChange === null || onChange === void 0 ? void 0 : onChange(ev, {
            checked: ev.currentTarget.checked
        });
    });
    const label = (0, _reactUtilities.resolveShorthand)(props.label, {
        defaultProps: {
            disabled,
            htmlFor: id,
            required,
            size: 'medium'
        }
    });
    return {
        labelPosition,
        //Slots definition
        components: {
            root: 'div',
            indicator: 'div',
            input: 'input',
            label: _reactLabel.Label
        },
        root,
        indicator,
        input,
        label
    };
}; //# sourceMappingURL=useSwitch.js.map

//# sourceMappingURL=useSwitch.js.map