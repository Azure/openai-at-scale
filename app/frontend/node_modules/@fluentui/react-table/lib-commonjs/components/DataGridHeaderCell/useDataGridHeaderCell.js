"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useDataGridHeaderCell_unstable", {
    enumerable: true,
    get: ()=>useDataGridHeaderCell_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactUtilities = require("@fluentui/react-utilities");
const _useTableHeaderCell = require("../TableHeaderCell/useTableHeaderCell");
const _dataGridContext = require("../../contexts/dataGridContext");
const _columnIdContext = require("../../contexts/columnIdContext");
const _tableContext = require("../../contexts/tableContext");
const useDataGridHeaderCell_unstable = (props, ref)=>{
    const columnId = (0, _columnIdContext.useColumnIdContext)();
    const { sortable  } = (0, _tableContext.useTableContext)();
    const toggleColumnSort = (0, _dataGridContext.useDataGridContext_unstable)((ctx)=>ctx.sort.toggleColumnSort);
    const sortDirection = (0, _dataGridContext.useDataGridContext_unstable)((ctx)=>sortable ? ctx.sort.getSortDirection(columnId) : undefined);
    const resizableColumns = (0, _dataGridContext.useDataGridContext_unstable)((ctx)=>ctx.resizableColumns);
    const columnSizing = (0, _dataGridContext.useDataGridContext_unstable)((ctx)=>ctx.columnSizing_unstable);
    const onClick = (0, _reactUtilities.useEventCallback)((e)=>{
        var _props_onClick;
        if (sortable) {
            toggleColumnSort(e, columnId);
        }
        (_props_onClick = props.onClick) === null || _props_onClick === void 0 ? void 0 : _props_onClick.call(props, e);
    });
    return (0, _useTableHeaderCell.useTableHeaderCell_unstable)({
        sortDirection,
        as: 'div',
        tabIndex: sortable ? undefined : 0,
        ...resizableColumns ? columnSizing.getTableHeaderCellProps(columnId) : {},
        ...props,
        onClick
    }, ref);
}; //# sourceMappingURL=useDataGridHeaderCell.js.map

//# sourceMappingURL=useDataGridHeaderCell.js.map