"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useDataGridRow_unstable", {
    enumerable: true,
    get: ()=>useDataGridRow_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactUtilities = require("@fluentui/react-utilities");
const _keyboardKeys = require("@fluentui/keyboard-keys");
const _useTableRow = require("../TableRow/useTableRow");
const _dataGridContext = require("../../contexts/dataGridContext");
const _dataGridSelectionCell = require("../DataGridSelectionCell/DataGridSelectionCell");
const _rowIdContext = require("../../contexts/rowIdContext");
const _tableHeaderContext = require("../../contexts/tableHeaderContext");
const useDataGridRow_unstable = (props, ref)=>{
    const rowId = (0, _rowIdContext.useTableRowIdContext)();
    const isHeader = (0, _tableHeaderContext.useIsInTableHeader)();
    const columnDefs = (0, _dataGridContext.useDataGridContext_unstable)((ctx)=>ctx.columns);
    const selectable = (0, _dataGridContext.useDataGridContext_unstable)((ctx)=>ctx.selectableRows);
    const selected = (0, _dataGridContext.useDataGridContext_unstable)((ctx)=>ctx.selection.isRowSelected(rowId));
    const tabbable = (0, _dataGridContext.useDataGridContext_unstable)((ctx)=>ctx.focusMode === 'row_unstable');
    const appearance = (0, _dataGridContext.useDataGridContext_unstable)((ctx)=>{
        if (!isHeader && selectable && ctx.selection.isRowSelected(rowId)) {
            return ctx.selectionAppearance;
        }
        return 'none';
    });
    const toggleRow = (0, _dataGridContext.useDataGridContext_unstable)((ctx)=>ctx.selection.toggleRow);
    const dataGridContextValue = (0, _dataGridContext.useDataGridContext_unstable)((ctx)=>ctx);
    const onClick = (0, _reactUtilities.useEventCallback)((e)=>{
        var _props_onClick;
        if (selectable && !isHeader) {
            toggleRow(e, rowId);
        }
        (_props_onClick = props.onClick) === null || _props_onClick === void 0 ? void 0 : _props_onClick.call(props, e);
    });
    const onKeyDown = (0, _reactUtilities.useEventCallback)((e)=>{
        var _props_onKeyDown;
        if (selectable && !isHeader && e.key === _keyboardKeys.Space && !(0, _reactUtilities.isInteractiveHTMLElement)(e.target)) {
            // stop scrolling
            e.preventDefault();
            toggleRow(e, rowId);
        }
        (_props_onKeyDown = props.onKeyDown) === null || _props_onKeyDown === void 0 ? void 0 : _props_onKeyDown.call(props, e);
    });
    const baseState = (0, _useTableRow.useTableRow_unstable)({
        appearance,
        'aria-selected': selectable ? selected : undefined,
        ...props,
        onClick,
        onKeyDown,
        children: null,
        as: 'div',
        tabIndex: tabbable && !isHeader ? 0 : undefined
    }, ref);
    return {
        ...baseState,
        components: {
            ...baseState.components,
            selectionCell: _dataGridSelectionCell.DataGridSelectionCell
        },
        selectionCell: (0, _reactUtilities.resolveShorthand)(props.selectionCell, {
            required: selectable
        }),
        renderCell: props.children,
        columnDefs,
        dataGridContextValue
    };
}; //# sourceMappingURL=useDataGridRow.js.map

//# sourceMappingURL=useDataGridRow.js.map