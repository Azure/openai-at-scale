{"version":3,"sources":["../../../lib/components/DataGridSelectionCell/useDataGridSelectionCell.js"],"sourcesContent":["import * as React from 'react';\nimport { useEventCallback } from '@fluentui/react-utilities';\nimport { useDataGridContext_unstable } from '../../contexts/dataGridContext';\nimport { useTableRowIdContext } from '../../contexts/rowIdContext';\nimport { useIsInTableHeader } from '../../contexts/tableHeaderContext';\nimport { useTableSelectionCell_unstable } from '../TableSelectionCell/useTableSelectionCell';\n/**\n * Create the state required to render DataGridSelectionCell.\n *\n * The returned state can be modified with hooks such as useDataGridSelectionCellStyles_unstable,\n * before being passed to renderDataGridSelectionCell_unstable.\n *\n * @param props - props from this instance of DataGridSelectionCell\n * @param ref - reference to root HTMLElement of DataGridSelectionCell\n */\nexport const useDataGridSelectionCell_unstable = (props, ref) => {\n  const isHeader = useIsInTableHeader();\n  const rowId = useTableRowIdContext();\n  const subtle = useDataGridContext_unstable(ctx => ctx.subtleSelection);\n  const checked = useDataGridContext_unstable(ctx => {\n    if (isHeader && ctx.selection.selectionMode === 'multiselect') {\n      return ctx.selection.allRowsSelected ? true : ctx.selection.someRowsSelected ? 'mixed' : false;\n    }\n    return ctx.selection.isRowSelected(rowId);\n  });\n  const toggleAllRows = useDataGridContext_unstable(ctx => ctx.selection.toggleAllRows);\n  const type = useDataGridContext_unstable(ctx => ctx.selection.selectionMode === 'multiselect' ? 'checkbox' : 'radio');\n  const onClick = useEventCallback(e => {\n    var _props_onClick;\n    if (isHeader) {\n      toggleAllRows(e);\n    }\n    (_props_onClick = props.onClick) === null || _props_onClick === void 0 ? void 0 : _props_onClick.call(props, e);\n  });\n  return useTableSelectionCell_unstable({\n    as: 'div',\n    role: 'gridcell',\n    checked,\n    type,\n    hidden: isHeader && type === 'radio',\n    'aria-checked': isHeader ? checked : undefined,\n    'aria-selected': isHeader || checked === 'mixed' ? undefined : checked,\n    subtle,\n    ...props,\n    onClick\n  }, ref);\n};\n//# sourceMappingURL=useDataGridSelectionCell.js.map"],"names":["useDataGridSelectionCell_unstable","props","ref","isHeader","useIsInTableHeader","rowId","useTableRowIdContext","subtle","useDataGridContext_unstable","ctx","subtleSelection","checked","selection","selectionMode","allRowsSelected","someRowsSelected","isRowSelected","toggleAllRows","type","onClick","useEventCallback","e","_props_onClick","call","useTableSelectionCell_unstable","as","role","hidden","undefined"],"mappings":";;;;+BAeaA;;aAAAA;;;6DAfU;gCACU;iCACW;8BACP;oCACF;uCACY;AAUxC,MAAMA,oCAAoC,CAACC,OAAOC,MAAQ;IAC/D,MAAMC,WAAWC,IAAAA,sCAAkB;IACnC,MAAMC,QAAQC,IAAAA,kCAAoB;IAClC,MAAMC,SAASC,IAAAA,4CAA2B,EAACC,CAAAA,MAAOA,IAAIC,eAAe;IACrE,MAAMC,UAAUH,IAAAA,4CAA2B,EAACC,CAAAA,MAAO;QACjD,IAAIN,YAAYM,IAAIG,SAAS,CAACC,aAAa,KAAK,eAAe;YAC7D,OAAOJ,IAAIG,SAAS,CAACE,eAAe,GAAG,IAAI,GAAGL,IAAIG,SAAS,CAACG,gBAAgB,GAAG,UAAU,KAAK;QAChG,CAAC;QACD,OAAON,IAAIG,SAAS,CAACI,aAAa,CAACX;IACrC;IACA,MAAMY,gBAAgBT,IAAAA,4CAA2B,EAACC,CAAAA,MAAOA,IAAIG,SAAS,CAACK,aAAa;IACpF,MAAMC,OAAOV,IAAAA,4CAA2B,EAACC,CAAAA,MAAOA,IAAIG,SAAS,CAACC,aAAa,KAAK,gBAAgB,aAAa,OAAO;IACpH,MAAMM,UAAUC,IAAAA,gCAAgB,EAACC,CAAAA,IAAK;QACpC,IAAIC;QACJ,IAAInB,UAAU;YACZc,cAAcI;QAChB,CAAC;QACAC,CAAAA,iBAAiBrB,MAAMkB,OAAO,AAAD,MAAO,IAAI,IAAIG,mBAAmB,KAAK,IAAI,KAAK,IAAIA,eAAeC,IAAI,CAACtB,OAAOoB,EAAE;IACjH;IACA,OAAOG,IAAAA,qDAA8B,EAAC;QACpCC,IAAI;QACJC,MAAM;QACNf;QACAO;QACAS,QAAQxB,YAAYe,SAAS;QAC7B,gBAAgBf,WAAWQ,UAAUiB,SAAS;QAC9C,iBAAiBzB,YAAYQ,YAAY,UAAUiB,YAAYjB,OAAO;QACtEJ;QACA,GAAGN,KAAK;QACRkB;IACF,GAAGjB;AACL,GACA,oDAAoD"}