"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useTableHeaderCell_unstable", {
    enumerable: true,
    get: ()=>useTableHeaderCell_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactUtilities = require("@fluentui/react-utilities");
const _reactTabster = require("@fluentui/react-tabster");
const _reactIcons = require("@fluentui/react-icons");
const _tableContext = require("../../contexts/tableContext");
const _reactAria = require("@fluentui/react-aria");
const sortIcons = {
    ascending: /*#__PURE__*/ _react.createElement(_reactIcons.ArrowUpRegular, {
        fontSize: 12
    }),
    descending: /*#__PURE__*/ _react.createElement(_reactIcons.ArrowDownRegular, {
        fontSize: 12
    })
};
const useTableHeaderCell_unstable = (props, ref)=>{
    const { noNativeElements , sortable  } = (0, _tableContext.useTableContext)();
    var _props_as;
    const rootComponent = ((_props_as = props.as) !== null && _props_as !== void 0 ? _props_as : noNativeElements) ? 'div' : 'th';
    var _props_sortDirection;
    return {
        components: {
            root: rootComponent,
            button: 'button',
            sortIcon: 'span',
            aside: 'span'
        },
        root: (0, _reactUtilities.getNativeElementProps)(rootComponent, {
            ref: (0, _reactUtilities.useMergedRefs)(ref, (0, _reactTabster.useFocusWithin)()),
            role: rootComponent === 'div' ? 'columnheader' : undefined,
            'aria-sort': sortable ? (_props_sortDirection = props.sortDirection) !== null && _props_sortDirection !== void 0 ? _props_sortDirection : 'none' : undefined,
            ...props
        }),
        aside: (0, _reactUtilities.resolveShorthand)(props.aside),
        sortIcon: (0, _reactUtilities.resolveShorthand)(props.sortIcon, {
            required: !!props.sortDirection,
            defaultProps: {
                children: props.sortDirection ? sortIcons[props.sortDirection] : undefined
            }
        }),
        button: (0, _reactAria.useARIAButtonShorthand)(props.button, {
            required: true,
            defaultProps: {
                role: 'presentation',
                tabIndex: -1,
                type: 'button',
                ...sortable && {
                    role: undefined,
                    tabIndex: undefined
                }
            }
        }),
        sortable,
        noNativeElements
    };
}; //# sourceMappingURL=useTableHeaderCell.js.map

//# sourceMappingURL=useTableHeaderCell.js.map