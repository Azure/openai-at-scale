"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createSelectionManager", {
    enumerable: true,
    get: ()=>createSelectionManager
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
function createSelectionManager(mode, onSelectionChange = ()=>undefined) {
    const managerFactory = mode === 'multiselect' ? createMultipleSelectionManager : createSingleSelectionManager;
    return managerFactory(onSelectionChange);
}
function createMultipleSelectionManager(onSelectionChange) {
    const toggleAllItems = (e, itemIds, selectedItems)=>{
        const allItemsSelected = itemIds.every((itemId)=>selectedItems.has(itemId));
        if (allItemsSelected) {
            selectedItems.clear();
        } else {
            itemIds.forEach((itemId)=>selectedItems.add(itemId));
        }
        onSelectionChange(e, new Set(selectedItems));
    };
    const toggleItem = (e, itemId, selectedItems)=>{
        if (selectedItems.has(itemId)) {
            selectedItems.delete(itemId);
        } else {
            selectedItems.add(itemId);
        }
        onSelectionChange(e, new Set(selectedItems));
    };
    const selectItem = (e, itemId, selectedItems)=>{
        selectedItems.add(itemId);
        onSelectionChange(e, new Set(selectedItems));
    };
    const deselectItem = (e, itemId, selectedItems)=>{
        selectedItems.delete(itemId);
        onSelectionChange(e, new Set(selectedItems));
    };
    const clearItems = (e)=>{
        onSelectionChange(e, new Set());
    };
    const isSelected = (itemId, selectedItems)=>{
        return selectedItems.has(itemId);
    };
    return {
        toggleItem,
        selectItem,
        deselectItem,
        clearItems,
        isSelected,
        toggleAllItems
    };
}
function createSingleSelectionManager(onSelectionChange) {
    const toggleItem = (e, itemId)=>{
        onSelectionChange(e, new Set([
            itemId
        ]));
    };
    const clearItems = (e)=>{
        onSelectionChange(e, new Set());
    };
    const isSelected = (itemId, selectedItems)=>{
        return selectedItems.has(itemId);
    };
    const selectItem = (e, itemId)=>{
        onSelectionChange(e, new Set([
            itemId
        ]));
    };
    return {
        deselectItem: clearItems,
        selectItem,
        toggleAllItems: ()=>{
            if (process.env.NODE_ENV !== 'production') {
                throw new Error('[react-table]: `toggleAllItems` should not be used in single selection mode');
            }
            return undefined;
        },
        toggleItem,
        clearItems,
        isSelected
    };
} //# sourceMappingURL=selectionManager.js.map

//# sourceMappingURL=selectionManager.js.map