"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useKeyboardResizing", {
    enumerable: true,
    get: ()=>useKeyboardResizing
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _keyboardKeys = require("@fluentui/keyboard-keys");
const _reactUtilities = require("@fluentui/react-utilities");
const _reactSharedContexts = require("@fluentui/react-shared-contexts");
const STEP = 20;
const PRECISION_MODIFIER = _keyboardKeys.Shift;
const PRECISION_FACTOR = 1 / 4;
function useKeyboardResizing(columnResizeState) {
    const columnId = _react.useRef();
    const onChangeRef = _react.useRef();
    const addListenerTimeout = _react.useRef();
    const columnResizeStateRef = _react.useRef(columnResizeState);
    _react.useEffect(()=>{
        columnResizeStateRef.current = columnResizeState;
    }, [
        columnResizeState
    ]);
    const { targetDocument  } = (0, _reactSharedContexts.useFluent_unstable)();
    const keyboardHandler = (0, _reactUtilities.useEventCallback)((event)=>{
        const colId = columnId.current;
        if (!colId) {
            return;
        }
        const width = columnResizeStateRef.current.getColumnWidth(colId);
        const precisionModifier = event.getModifierState(PRECISION_MODIFIER);
        const stopEvent = ()=>{
            event.preventDefault();
            event.stopPropagation();
        };
        switch(event.key){
            case _keyboardKeys.ArrowLeft:
                stopEvent();
                columnResizeStateRef.current.setColumnWidth(event, {
                    columnId: colId,
                    width: width - (precisionModifier ? STEP * PRECISION_FACTOR : STEP)
                });
                return;
            case _keyboardKeys.ArrowRight:
                stopEvent();
                columnResizeStateRef.current.setColumnWidth(event, {
                    columnId: colId,
                    width: width + (precisionModifier ? STEP * PRECISION_FACTOR : STEP)
                });
                return;
            case _keyboardKeys.Space:
            case _keyboardKeys.Enter:
            case _keyboardKeys.Escape:
                stopEvent();
                disableInteractiveMode();
                break;
        }
    });
    // On component unmout, cancel any timer for adding a listener (if it exists) and remove the listener
    _react.useEffect(()=>{
        return ()=>{
            var _targetDocument_defaultView, _targetDocument_defaultView1;
            targetDocument === null || targetDocument === void 0 ? void 0 : (_targetDocument_defaultView = targetDocument.defaultView) === null || _targetDocument_defaultView === void 0 ? void 0 : _targetDocument_defaultView.clearTimeout(addListenerTimeout.current);
            targetDocument === null || targetDocument === void 0 ? void 0 : (_targetDocument_defaultView1 = targetDocument.defaultView) === null || _targetDocument_defaultView1 === void 0 ? void 0 : _targetDocument_defaultView1.removeEventListener('keydown', keyboardHandler);
        };
    }, [
        keyboardHandler,
        targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView
    ]);
    const enableInteractiveMode = _react.useCallback((colId)=>{
        var _onChangeRef_current, _targetDocument_defaultView;
        columnId.current = colId;
        (_onChangeRef_current = onChangeRef.current) === null || _onChangeRef_current === void 0 ? void 0 : _onChangeRef_current.call(onChangeRef, colId, true);
        // Create the listener in the next tick, because the event that triggered this is still propagating
        // when Enter was pressed and would be caught in the keyboardHandler, disabling the keyboard mode immediately.
        // No idea why this is happening, but this is a working workaround.
        // Tracked here: https://github.com/microsoft/fluentui/issues/27177
        addListenerTimeout.current = targetDocument === null || targetDocument === void 0 ? void 0 : (_targetDocument_defaultView = targetDocument.defaultView) === null || _targetDocument_defaultView === void 0 ? void 0 : _targetDocument_defaultView.setTimeout(()=>{
            var _targetDocument_defaultView;
            targetDocument === null || targetDocument === void 0 ? void 0 : (_targetDocument_defaultView = targetDocument.defaultView) === null || _targetDocument_defaultView === void 0 ? void 0 : _targetDocument_defaultView.addEventListener('keydown', keyboardHandler);
        }, 0);
    }, [
        keyboardHandler,
        targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView
    ]);
    const disableInteractiveMode = _react.useCallback(()=>{
        var _targetDocument_defaultView;
        if (columnId.current) {
            var _onChangeRef_current;
            (_onChangeRef_current = onChangeRef.current) === null || _onChangeRef_current === void 0 ? void 0 : _onChangeRef_current.call(onChangeRef, columnId.current, false);
        }
        columnId.current = undefined;
        targetDocument === null || targetDocument === void 0 ? void 0 : (_targetDocument_defaultView = targetDocument.defaultView) === null || _targetDocument_defaultView === void 0 ? void 0 : _targetDocument_defaultView.removeEventListener('keydown', keyboardHandler);
    }, [
        keyboardHandler,
        targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView
    ]);
    const toggleInteractiveMode = (colId, onChange)=>{
        onChangeRef.current = onChange;
        if (!columnId.current) {
            enableInteractiveMode(colId);
        } else if (colId && columnId.current !== colId) {
            columnId.current = colId;
            onChange === null || onChange === void 0 ? void 0 : onChange(columnId.current, true);
        } else {
            disableInteractiveMode();
        }
    };
    return {
        toggleInteractiveMode
    };
} //# sourceMappingURL=useKeyboardResizing.js.map

//# sourceMappingURL=useKeyboardResizing.js.map