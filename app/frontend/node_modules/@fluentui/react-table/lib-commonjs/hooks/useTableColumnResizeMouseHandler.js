"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useTableColumnResizeMouseHandler", {
    enumerable: true,
    get: ()=>useTableColumnResizeMouseHandler
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactSharedContexts = require("@fluentui/react-shared-contexts");
const _reactUtilities = require("@fluentui/react-utilities");
function useTableColumnResizeMouseHandler(columnResizeState) {
    const mouseX = _react.useRef(0);
    const currentWidth = _react.useRef(0);
    const colId = _react.useRef(undefined);
    const { targetDocument  } = (0, _reactSharedContexts.useFluent_unstable)();
    const globalWin = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView;
    const recalculatePosition = _react.useCallback((e)=>{
        const { clientX  } = (0, _reactUtilities.getEventClientCoords)(e);
        const dx = clientX - mouseX.current;
        // Update the local width for the column and set it
        currentWidth.current += dx;
        colId.current && columnResizeState.setColumnWidth(e, {
            columnId: colId.current,
            width: currentWidth.current
        });
        mouseX.current = clientX;
    }, [
        columnResizeState
    ]);
    const onDrag = _react.useCallback((e)=>{
        // Using requestAnimationFrame here drastically improves resizing experience on slower CPUs
        if (typeof (globalWin === null || globalWin === void 0 ? void 0 : globalWin.requestAnimationFrame) === 'function') {
            requestAnimationFrame(()=>recalculatePosition(e));
        } else {
            recalculatePosition(e);
        }
    }, [
        globalWin === null || globalWin === void 0 ? void 0 : globalWin.requestAnimationFrame,
        recalculatePosition
    ]);
    const onDragEnd = _react.useCallback((event)=>{
        if ((0, _reactUtilities.isMouseEvent)(event)) {
            targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.removeEventListener('mouseup', onDragEnd);
            targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.removeEventListener('mousemove', onDrag);
        }
        if ((0, _reactUtilities.isTouchEvent)(event)) {
            targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.removeEventListener('touchend', onDragEnd);
            targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.removeEventListener('touchmove', onDrag);
        }
    }, [
        onDrag,
        targetDocument
    ]);
    const getOnMouseDown = (columnId)=>{
        return (event)=>{
            // Keep the width locally so that we decouple the calculation of the next with from rendering.
            // This makes the whole experience much faster and more precise
            currentWidth.current = columnResizeState.getColumnWidth(columnId);
            mouseX.current = (0, _reactUtilities.getEventClientCoords)(event).clientX;
            colId.current = columnId;
            if ((0, _reactUtilities.isMouseEvent)(event)) {
                // ignore other buttons than primary mouse button
                if (event.target !== event.currentTarget || event.button !== 0) {
                    return;
                }
                targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.addEventListener('mouseup', onDragEnd);
                targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.addEventListener('mousemove', onDrag);
            }
            if ((0, _reactUtilities.isTouchEvent)(event)) {
                targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.addEventListener('touchend', onDragEnd);
                targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.addEventListener('touchmove', onDrag);
            }
        };
    };
    return {
        getOnMouseDown: (columnId)=>getOnMouseDown(columnId)
    };
} //# sourceMappingURL=useTableColumnResizeMouseHandler.js.map

//# sourceMappingURL=useTableColumnResizeMouseHandler.js.map