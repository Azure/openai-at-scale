"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    defaultColumnSizingState: ()=>defaultColumnSizingState,
    useTableColumnSizing_unstable: ()=>useTableColumnSizing_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _tableResizeHandle = require("../TableResizeHandle");
const _useMeasureElement = require("./useMeasureElement");
const _useTableColumnResizeMouseHandler = require("./useTableColumnResizeMouseHandler");
const _useTableColumnResizeState = require("./useTableColumnResizeState");
const _useKeyboardResizing = require("./useKeyboardResizing");
const defaultColumnSizingState = {
    getColumnWidths: ()=>[],
    getOnMouseDown: ()=>()=>null,
    setColumnWidth: ()=>null,
    getTableHeaderCellProps: ()=>({
            style: {},
            columnId: ''
        }),
    getTableCellProps: ()=>({
            style: {},
            columnId: ''
        }),
    enableKeyboardMode: ()=>()=>null
};
function useTableColumnSizing_unstable(params) {
    // False positive, these plugin hooks are intended to be run on every render
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return (tableState)=>useTableColumnSizingState(tableState, params);
}
function getColumnStyles(column) {
    const width = column.width;
    return {
        // native styles
        width,
        // non-native element styles (flex layout)
        minWidth: width,
        maxWidth: width
    };
}
function useTableColumnSizingState(tableState, params) {
    const { columns  } = tableState;
    // Gets the container width
    const { width , measureElementRef  } = (0, _useMeasureElement.useMeasureElement)();
    // Creates the state based on columns and available containerWidth
    const columnResizeState = (0, _useTableColumnResizeState.useTableColumnResizeState)(columns, width + ((params === null || params === void 0 ? void 0 : params.containerWidthOffset) || 0), params);
    // Creates the mouse handler and attaches the state to it
    const mouseHandler = (0, _useTableColumnResizeMouseHandler.useTableColumnResizeMouseHandler)(columnResizeState);
    // Creates the keyboard handler for resizing columns
    const keyboardResizing = (0, _useKeyboardResizing.useKeyboardResizing)(columnResizeState);
    const enableKeyboardMode = _react.useCallback((columnId, onChange)=>(e)=>{
            e.preventDefault();
            e.nativeEvent.stopPropagation();
            keyboardResizing.toggleInteractiveMode(columnId, onChange);
        }, [
        keyboardResizing
    ]);
    return {
        ...tableState,
        tableRef: measureElementRef,
        // eslint-disable-next-line @typescript-eslint/naming-convention
        columnSizing_unstable: {
            getOnMouseDown: mouseHandler.getOnMouseDown,
            setColumnWidth: (columnId, w)=>columnResizeState.setColumnWidth(undefined, {
                    columnId,
                    width: w
                }),
            getColumnWidths: columnResizeState.getColumns,
            getTableHeaderCellProps: (columnId)=>{
                const col = columnResizeState.getColumnById(columnId);
                const aside = /*#__PURE__*/ _react.createElement(_tableResizeHandle.TableResizeHandle, {
                    onMouseDown: mouseHandler.getOnMouseDown(columnId),
                    onTouchStart: mouseHandler.getOnMouseDown(columnId)
                });
                return col ? {
                    style: getColumnStyles(col),
                    aside
                } : {};
            },
            getTableCellProps: (columnId)=>{
                const col = columnResizeState.getColumnById(columnId);
                return col ? {
                    style: getColumnStyles(col)
                } : {};
            },
            enableKeyboardMode
        }
    };
} //# sourceMappingURL=useTableColumnSizing.js.map

//# sourceMappingURL=useTableColumnSizing.js.map