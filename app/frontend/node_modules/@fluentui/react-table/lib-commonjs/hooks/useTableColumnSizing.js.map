{"version":3,"sources":["../../lib/hooks/useTableColumnSizing.js"],"sourcesContent":["import * as React from 'react';\nimport { TableResizeHandle } from '../TableResizeHandle';\nimport { useMeasureElement } from './useMeasureElement';\nimport { useTableColumnResizeMouseHandler } from './useTableColumnResizeMouseHandler';\nimport { useTableColumnResizeState } from './useTableColumnResizeState';\nimport { useKeyboardResizing } from './useKeyboardResizing';\nexport const defaultColumnSizingState = {\n  getColumnWidths: () => [],\n  getOnMouseDown: () => () => null,\n  setColumnWidth: () => null,\n  getTableHeaderCellProps: () => ({\n    style: {},\n    columnId: ''\n  }),\n  getTableCellProps: () => ({\n    style: {},\n    columnId: ''\n  }),\n  enableKeyboardMode: () => () => null\n};\nexport function useTableColumnSizing_unstable(params) {\n  // False positive, these plugin hooks are intended to be run on every render\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return tableState => useTableColumnSizingState(tableState, params);\n}\nfunction getColumnStyles(column) {\n  const width = column.width;\n  return {\n    // native styles\n    width,\n    // non-native element styles (flex layout)\n    minWidth: width,\n    maxWidth: width\n  };\n}\nfunction useTableColumnSizingState(tableState, params) {\n  const {\n    columns\n  } = tableState;\n  // Gets the container width\n  const {\n    width,\n    measureElementRef\n  } = useMeasureElement();\n  // Creates the state based on columns and available containerWidth\n  const columnResizeState = useTableColumnResizeState(columns, width + ((params === null || params === void 0 ? void 0 : params.containerWidthOffset) || 0), params);\n  // Creates the mouse handler and attaches the state to it\n  const mouseHandler = useTableColumnResizeMouseHandler(columnResizeState);\n  // Creates the keyboard handler for resizing columns\n  const keyboardResizing = useKeyboardResizing(columnResizeState);\n  const enableKeyboardMode = React.useCallback((columnId, onChange) => e => {\n    e.preventDefault();\n    e.nativeEvent.stopPropagation();\n    keyboardResizing.toggleInteractiveMode(columnId, onChange);\n  }, [keyboardResizing]);\n  return {\n    ...tableState,\n    tableRef: measureElementRef,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    columnSizing_unstable: {\n      getOnMouseDown: mouseHandler.getOnMouseDown,\n      setColumnWidth: (columnId, w) => columnResizeState.setColumnWidth(undefined, {\n        columnId,\n        width: w\n      }),\n      getColumnWidths: columnResizeState.getColumns,\n      getTableHeaderCellProps: columnId => {\n        const col = columnResizeState.getColumnById(columnId);\n        const aside = /*#__PURE__*/React.createElement(TableResizeHandle, {\n          onMouseDown: mouseHandler.getOnMouseDown(columnId),\n          onTouchStart: mouseHandler.getOnMouseDown(columnId)\n        });\n        return col ? {\n          style: getColumnStyles(col),\n          aside\n        } : {};\n      },\n      getTableCellProps: columnId => {\n        const col = columnResizeState.getColumnById(columnId);\n        return col ? {\n          style: getColumnStyles(col)\n        } : {};\n      },\n      enableKeyboardMode\n    }\n  };\n}\n//# sourceMappingURL=useTableColumnSizing.js.map"],"names":["defaultColumnSizingState","useTableColumnSizing_unstable","getColumnWidths","getOnMouseDown","setColumnWidth","getTableHeaderCellProps","style","columnId","getTableCellProps","enableKeyboardMode","params","tableState","useTableColumnSizingState","getColumnStyles","column","width","minWidth","maxWidth","columns","measureElementRef","useMeasureElement","columnResizeState","useTableColumnResizeState","containerWidthOffset","mouseHandler","useTableColumnResizeMouseHandler","keyboardResizing","useKeyboardResizing","React","useCallback","onChange","e","preventDefault","nativeEvent","stopPropagation","toggleInteractiveMode","tableRef","columnSizing_unstable","w","undefined","getColumns","col","getColumnById","aside","createElement","TableResizeHandle","onMouseDown","onTouchStart"],"mappings":";;;;;;;;;;;IAMaA,wBAAwB,MAAxBA;IAcGC,6BAA6B,MAA7BA;;;6DApBO;mCACW;mCACA;kDACe;2CACP;qCACN;AAC7B,MAAMD,2BAA2B;IACtCE,iBAAiB,IAAM,EAAE;IACzBC,gBAAgB,IAAM,IAAM,IAAI;IAChCC,gBAAgB,IAAM,IAAI;IAC1BC,yBAAyB,IAAO,CAAA;YAC9BC,OAAO,CAAC;YACRC,UAAU;QACZ,CAAA;IACAC,mBAAmB,IAAO,CAAA;YACxBF,OAAO,CAAC;YACRC,UAAU;QACZ,CAAA;IACAE,oBAAoB,IAAM,IAAM,IAAI;AACtC;AACO,SAASR,8BAA8BS,MAAM,EAAE;IACpD,4EAA4E;IAC5E,sDAAsD;IACtD,OAAOC,CAAAA,aAAcC,0BAA0BD,YAAYD;AAC7D;AACA,SAASG,gBAAgBC,MAAM,EAAE;IAC/B,MAAMC,QAAQD,OAAOC,KAAK;IAC1B,OAAO;QACL,gBAAgB;QAChBA;QACA,0CAA0C;QAC1CC,UAAUD;QACVE,UAAUF;IACZ;AACF;AACA,SAASH,0BAA0BD,UAAU,EAAED,MAAM,EAAE;IACrD,MAAM,EACJQ,QAAO,EACR,GAAGP;IACJ,2BAA2B;IAC3B,MAAM,EACJI,MAAK,EACLI,kBAAiB,EAClB,GAAGC,IAAAA,oCAAiB;IACrB,kEAAkE;IAClE,MAAMC,oBAAoBC,IAAAA,oDAAyB,EAACJ,SAASH,QAAS,CAAA,AAACL,CAAAA,WAAW,IAAI,IAAIA,WAAW,KAAK,IAAI,KAAK,IAAIA,OAAOa,oBAAoB,AAAD,KAAM,CAAA,GAAIb;IAC3J,yDAAyD;IACzD,MAAMc,eAAeC,IAAAA,kEAAgC,EAACJ;IACtD,oDAAoD;IACpD,MAAMK,mBAAmBC,IAAAA,wCAAmB,EAACN;IAC7C,MAAMZ,qBAAqBmB,OAAMC,WAAW,CAAC,CAACtB,UAAUuB,WAAaC,CAAAA,IAAK;YACxEA,EAAEC,cAAc;YAChBD,EAAEE,WAAW,CAACC,eAAe;YAC7BR,iBAAiBS,qBAAqB,CAAC5B,UAAUuB;QACnD,GAAG;QAACJ;KAAiB;IACrB,OAAO;QACL,GAAGf,UAAU;QACbyB,UAAUjB;QACV,gEAAgE;QAChEkB,uBAAuB;YACrBlC,gBAAgBqB,aAAarB,cAAc;YAC3CC,gBAAgB,CAACG,UAAU+B,IAAMjB,kBAAkBjB,cAAc,CAACmC,WAAW;oBAC3EhC;oBACAQ,OAAOuB;gBACT;YACApC,iBAAiBmB,kBAAkBmB,UAAU;YAC7CnC,yBAAyBE,CAAAA,WAAY;gBACnC,MAAMkC,MAAMpB,kBAAkBqB,aAAa,CAACnC;gBAC5C,MAAMoC,QAAQ,WAAW,GAAEf,OAAMgB,aAAa,CAACC,oCAAiB,EAAE;oBAChEC,aAAatB,aAAarB,cAAc,CAACI;oBACzCwC,cAAcvB,aAAarB,cAAc,CAACI;gBAC5C;gBACA,OAAOkC,MAAM;oBACXnC,OAAOO,gBAAgB4B;oBACvBE;gBACF,IAAI,CAAC,CAAC;YACR;YACAnC,mBAAmBD,CAAAA,WAAY;gBAC7B,MAAMkC,MAAMpB,kBAAkBqB,aAAa,CAACnC;gBAC5C,OAAOkC,MAAM;oBACXnC,OAAOO,gBAAgB4B;gBACzB,IAAI,CAAC,CAAC;YACR;YACAhC;QACF;IACF;AACF,EACA,gDAAgD"}