{"version":3,"sources":["../../lib/utils/columnResizeUtils.js"],"sourcesContent":["const DEFAULT_WIDTH = 150;\nconst DEFAULT_MIN_WIDTH = 100;\n/**\n * This function takes the column definitions and the curent ColumnWidthState and returns new state.\n *  - It uses existing state for existing columns.\n *  - It removes any state for columns no longer present.\n *  - It checks if any column has been replaced and returns updated state if so\n *  - It returns old state if no changes in the state have been made (so that react doesn't call effects)\n * @param columns\n * @param state\n * @returns\n */\nexport function columnDefinitionsToState(columns, state = [], columnSizingOptions = {}) {\n  let updated = false;\n  const stateMap = new Map(state.map(s => [s.columnId, s]));\n  const updatedState = columns.map(column => {\n    const existingColumnState = stateMap.get(column.columnId);\n    if (existingColumnState) {\n      var _columnSizingOptions_column_columnId;\n      const {\n        idealWidth = existingColumnState.idealWidth,\n        minWidth = existingColumnState.minWidth,\n        padding = existingColumnState.padding\n      } = (_columnSizingOptions_column_columnId = columnSizingOptions[column.columnId]) !== null && _columnSizingOptions_column_columnId !== void 0 ? _columnSizingOptions_column_columnId : {};\n      if (idealWidth !== existingColumnState.idealWidth || minWidth !== existingColumnState.minWidth || padding !== existingColumnState.padding) {\n        updated = true;\n        return {\n          ...existingColumnState,\n          idealWidth,\n          width: idealWidth,\n          minWidth,\n          padding\n        };\n      }\n      return existingColumnState;\n    }\n    var _columnSizingOptions_column_columnId1;\n    const {\n      defaultWidth,\n      idealWidth = DEFAULT_WIDTH,\n      minWidth = DEFAULT_MIN_WIDTH,\n      padding\n    } = (_columnSizingOptions_column_columnId1 = columnSizingOptions[column.columnId]) !== null && _columnSizingOptions_column_columnId1 !== void 0 ? _columnSizingOptions_column_columnId1 : {};\n    updated = true;\n    return {\n      columnId: column.columnId,\n      width: Math.max(defaultWidth !== null && defaultWidth !== void 0 ? defaultWidth : idealWidth, minWidth),\n      minWidth,\n      idealWidth: Math.max(defaultWidth !== null && defaultWidth !== void 0 ? defaultWidth : idealWidth, minWidth),\n      padding: padding !== null && padding !== void 0 ? padding : 16\n    };\n  });\n  // If the length of the new state changed (column was added or removed) or any of\n  // the individual states has a new reference (column was replaced),\n  // we have to reset the column widths to their ideal width (because the column which was last may not be last now).\n  // Then the adjustColumnWidthsToFitContainer can do its job and properly stretch the last column.\n  if (updatedState.length !== state.length || updated) {\n    const column = updatedState.find(col => col.width > col.idealWidth);\n    if (column) {\n      column.width = column.idealWidth;\n    }\n    updated = true;\n  }\n  return updated ? updatedState : state;\n}\nexport function getColumnById(state, columnId) {\n  return state.find(c => c.columnId === columnId);\n}\nexport function getColumnByIndex(state, index) {\n  return state[index];\n}\nexport function getTotalWidth(state) {\n  return state.reduce((sum, column) => sum + column.width + column.padding, 0);\n}\nexport function getLength(state) {\n  return state.length;\n}\nexport function getColumnWidth(state, columnId) {\n  const column = getColumnById(state, columnId);\n  var _column_width;\n  return (_column_width = column === null || column === void 0 ? void 0 : column.width) !== null && _column_width !== void 0 ? _column_width : 0;\n}\n/**\n * This function takes the current state and returns an updated state, so that it can be set.\n * The reason for this is that we can update the state multiple times before commiting to render.\n * This is an optimization and also prevents flickering.\n * It also returns new copy of the state only if the value is different than the one currently in\n * the state, further preventing unnecessary updates.\n * @param localState\n * @param columnId\n * @param property\n * @param value\n * @returns\n */\nexport function setColumnProperty(localState, columnId, property, value) {\n  const currentColumn = getColumnById(localState, columnId);\n  if (!currentColumn || (currentColumn === null || currentColumn === void 0 ? void 0 : currentColumn[property]) === value) {\n    return localState;\n  }\n  const updatedColumn = {\n    ...currentColumn,\n    [property]: value\n  };\n  const newState = localState.reduce((acc, current) => {\n    if (current.columnId === updatedColumn.columnId) {\n      return [...acc, updatedColumn];\n    }\n    return [...acc, current];\n  }, []);\n  return newState;\n}\n/**\n * This function takes the state and container width and makes sure the each column in the state\n * is its optimal width, and that the columns\n * a) fit to the container\n * b) always fill the whole container\n * @param state\n * @param containerWidth\n * @returns\n */\nexport function adjustColumnWidthsToFitContainer(state, containerWidth) {\n  let newState = state;\n  const totalWidth = getTotalWidth(newState);\n  // The total width is smaller, we are expanding columns\n  if (totalWidth < containerWidth) {\n    let difference = containerWidth - totalWidth;\n    let i = 0;\n    // We start at the beginning and assign the columns their ideal width\n    while (i < newState.length && difference > 0) {\n      const currentCol = getColumnByIndex(newState, i);\n      const colAdjustment = Math.min(currentCol.idealWidth - currentCol.width, difference);\n      newState = setColumnProperty(newState, currentCol.columnId, 'width', currentCol.width + colAdjustment);\n      difference -= colAdjustment;\n      // if there is still empty space, after all columns are their ideal sizes, assign it to the last column\n      if (i === newState.length - 1 && difference !== 0) {\n        const lastCol = getColumnByIndex(newState, i);\n        newState = setColumnProperty(newState, lastCol.columnId, 'width', lastCol.width + difference);\n      }\n      i++;\n    }\n  } else if (totalWidth >= containerWidth) {\n    let difference = totalWidth - containerWidth;\n    // We start with the last column\n    let j = newState.length - 1;\n    while (j >= 0 && difference > 0) {\n      const currentCol = getColumnByIndex(newState, j);\n      if (currentCol.width > currentCol.minWidth) {\n        const colAdjustment = Math.min(currentCol.width - currentCol.minWidth, difference);\n        difference -= colAdjustment;\n        newState = setColumnProperty(newState, currentCol.columnId, 'width', currentCol.width - colAdjustment);\n      }\n      j--;\n    }\n  }\n  return newState;\n}\n//# sourceMappingURL=columnResizeUtils.js.map"],"names":["columnDefinitionsToState","getColumnById","getColumnByIndex","getTotalWidth","getLength","getColumnWidth","setColumnProperty","adjustColumnWidthsToFitContainer","DEFAULT_WIDTH","DEFAULT_MIN_WIDTH","columns","state","columnSizingOptions","updated","stateMap","Map","map","s","columnId","updatedState","column","existingColumnState","get","_columnSizingOptions_column_columnId","idealWidth","minWidth","padding","width","_columnSizingOptions_column_columnId1","defaultWidth","Math","max","length","find","col","c","index","reduce","sum","_column_width","localState","property","value","currentColumn","updatedColumn","newState","acc","current","containerWidth","totalWidth","difference","i","currentCol","colAdjustment","min","lastCol","j"],"mappings":"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"}