"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useTab_unstable", {
    enumerable: true,
    get: ()=>useTab_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactUtilities = require("@fluentui/react-utilities");
const _tabListContext = require("../TabList/TabListContext");
const useTab_unstable = (props, ref)=>{
    const { content , disabled: tabDisabled = false , icon , value  } = props;
    const appearance = (0, _tabListContext.useTabListContext_unstable)((ctx)=>ctx.appearance);
    const reserveSelectedTabSpace = (0, _tabListContext.useTabListContext_unstable)((ctx)=>ctx.reserveSelectedTabSpace);
    const listDisabled = (0, _tabListContext.useTabListContext_unstable)((ctx)=>ctx.disabled);
    const selected = (0, _tabListContext.useTabListContext_unstable)((ctx)=>ctx.selectedValue === value);
    const onRegister = (0, _tabListContext.useTabListContext_unstable)((ctx)=>ctx.onRegister);
    const onUnregister = (0, _tabListContext.useTabListContext_unstable)((ctx)=>ctx.onUnregister);
    const onSelect = (0, _tabListContext.useTabListContext_unstable)((ctx)=>ctx.onSelect);
    const size = (0, _tabListContext.useTabListContext_unstable)((ctx)=>ctx.size);
    const vertical = (0, _tabListContext.useTabListContext_unstable)((ctx)=>!!ctx.vertical);
    const disabled = listDisabled || tabDisabled;
    const innerRef = _react.useRef(null);
    const onClick = (0, _reactUtilities.useEventCallback)((event)=>onSelect(event, {
            value
        }));
    _react.useEffect(()=>{
        onRegister({
            value,
            ref: innerRef
        });
        return ()=>{
            onUnregister({
                value,
                ref: innerRef
            });
        };
    }, [
        onRegister,
        onUnregister,
        innerRef,
        value
    ]);
    const iconShorthand = (0, _reactUtilities.resolveShorthand)(icon);
    const contentShorthand = (0, _reactUtilities.resolveShorthand)(content, {
        required: true,
        defaultProps: {
            children: props.children
        }
    });
    return {
        components: {
            root: 'button',
            icon: 'span',
            content: 'span'
        },
        root: (0, _reactUtilities.getNativeElementProps)('button', {
            ref: (0, _reactUtilities.useMergedRefs)(ref, innerRef),
            role: 'tab',
            type: 'button',
            // aria-selected undefined indicates it is not selectable
            // according to https://www.w3.org/TR/wai-aria-1.1/#aria-selected
            'aria-selected': disabled ? undefined : `${selected}`,
            ...props,
            disabled,
            onClick
        }),
        icon: iconShorthand,
        iconOnly: Boolean((iconShorthand === null || iconShorthand === void 0 ? void 0 : iconShorthand.children) && !contentShorthand.children),
        content: contentShorthand,
        appearance,
        contentReservedSpaceClassName: reserveSelectedTabSpace ? '' : undefined,
        disabled,
        selected,
        size,
        value,
        vertical
    };
}; //# sourceMappingURL=useTab.js.map

//# sourceMappingURL=useTab.js.map