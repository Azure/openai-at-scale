"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useTabList_unstable", {
    enumerable: true,
    get: ()=>useTabList_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactTabster = require("@fluentui/react-tabster");
const _reactUtilities = require("@fluentui/react-utilities");
const useTabList_unstable = (props, ref)=>{
    const { appearance ='transparent' , reserveSelectedTabSpace =true , disabled =false , onTabSelect , size ='medium' , vertical =false  } = props;
    const innerRef = _react.useRef(null);
    const focusAttributes = (0, _reactTabster.useArrowNavigationGroup)({
        circular: true,
        axis: vertical ? 'vertical' : 'horizontal',
        memorizeCurrent: true
    });
    const [selectedValue, setSelectedValue] = (0, _reactUtilities.useControllableState)({
        state: props.selectedValue,
        defaultState: props.defaultSelectedValue,
        initialState: undefined
    });
    // considered usePrevious, but it is sensitive to re-renders
    // this could cause the previous to move to current in the case where the tab list re-renders.
    // these refs avoid getRegisteredTabs changing when selectedValue changes and causing
    // renders for tabs that have not changed.
    const currentSelectedValue = _react.useRef(undefined);
    const previousSelectedValue = _react.useRef(undefined);
    _react.useEffect(()=>{
        previousSelectedValue.current = currentSelectedValue.current;
        currentSelectedValue.current = selectedValue;
    }, [
        selectedValue
    ]);
    const onSelect = (0, _reactUtilities.useEventCallback)((event, data)=>{
        setSelectedValue(data.value);
        onTabSelect === null || onTabSelect === void 0 ? void 0 : onTabSelect(event, data);
    });
    const registeredTabs = _react.useRef({});
    const onRegister = (0, _reactUtilities.useEventCallback)((data)=>{
        registeredTabs.current[JSON.stringify(data.value)] = data;
    });
    const onUnregister = (0, _reactUtilities.useEventCallback)((data)=>{
        delete registeredTabs.current[JSON.stringify(data.value)];
    });
    const getRegisteredTabs = _react.useCallback(()=>{
        return {
            selectedValue: currentSelectedValue.current,
            previousSelectedValue: previousSelectedValue.current,
            registeredTabs: registeredTabs.current
        };
    }, []);
    return {
        components: {
            root: 'div'
        },
        root: (0, _reactUtilities.getNativeElementProps)('div', {
            ref: (0, _reactUtilities.useMergedRefs)(ref, innerRef),
            role: 'tablist',
            ...focusAttributes,
            ...props
        }),
        appearance,
        reserveSelectedTabSpace,
        disabled,
        selectedValue,
        size,
        vertical,
        onRegister,
        onUnregister,
        onSelect,
        getRegisteredTabs
    };
}; //# sourceMappingURL=useTabList.js.map

//# sourceMappingURL=useTabList.js.map