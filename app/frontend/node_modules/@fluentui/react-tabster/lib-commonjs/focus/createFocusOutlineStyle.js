"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createFocusOutlineStyle", {
    enumerable: true,
    get: ()=>createFocusOutlineStyle
});
const _reactTheme = require("@fluentui/react-theme");
const _react = require("@griffel/react");
const _createCustomFocusIndicatorStyle = require("./createCustomFocusIndicatorStyle");
const _constants = require("./constants");
/**
 * NOTE: the element with the focus outline needs to have `position: relative` so that the
 * pseudo element can be properly positioned.
 *
 * @param options - Configures the style of the focus outline
 * @returns focus outline styles object
 */ const getFocusOutlineStyles = (options)=>{
    const { outlineRadius , outlineColor , outlineOffset , outlineWidth  } = options;
    const outlineOffsetTop = (outlineOffset === null || outlineOffset === void 0 ? void 0 : outlineOffset.top) || outlineOffset;
    const outlineOffsetBottom = (outlineOffset === null || outlineOffset === void 0 ? void 0 : outlineOffset.bottom) || outlineOffset;
    const outlineOffsetLeft = (outlineOffset === null || outlineOffset === void 0 ? void 0 : outlineOffset.left) || outlineOffset;
    const outlineOffsetRight = (outlineOffset === null || outlineOffset === void 0 ? void 0 : outlineOffset.right) || outlineOffset;
    return {
        ..._react.shorthands.borderColor('transparent'),
        '::after': {
            content: '""',
            position: 'absolute',
            pointerEvents: 'none',
            zIndex: 1,
            ..._react.shorthands.borderStyle('solid'),
            ..._react.shorthands.borderWidth(outlineWidth),
            ..._react.shorthands.borderRadius(outlineRadius),
            ..._react.shorthands.borderColor(outlineColor),
            top: !outlineOffset ? `-${outlineWidth}` : `calc(0px - ${outlineWidth} - ${outlineOffsetTop})`,
            bottom: !outlineOffset ? `-${outlineWidth}` : `calc(0px - ${outlineWidth} - ${outlineOffsetBottom})`,
            left: !outlineOffset ? `-${outlineWidth}` : `calc(0px - ${outlineWidth} - ${outlineOffsetLeft})`,
            right: !outlineOffset ? `-${outlineWidth}` : `calc(0px - ${outlineWidth} - ${outlineOffsetRight})`
        }
    };
};
const createFocusOutlineStyle = ({ selector =_constants.defaultOptions.selector , style =_constants.defaultOptions.style  } = _constants.defaultOptions)=>(0, _createCustomFocusIndicatorStyle.createCustomFocusIndicatorStyle)(getFocusOutlineStyles({
        outlineColor: _reactTheme.tokens.colorStrokeFocus2,
        outlineRadius: _reactTheme.tokens.borderRadiusMedium,
        // FIXME: tokens.strokeWidthThick causes some weird bugs
        outlineWidth: '2px',
        ...style
    }), {
        selector
    }); //# sourceMappingURL=createFocusOutlineStyle.js.map

//# sourceMappingURL=createFocusOutlineStyle.js.map