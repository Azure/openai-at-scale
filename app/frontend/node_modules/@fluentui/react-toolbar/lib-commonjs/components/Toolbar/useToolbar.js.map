{"version":3,"sources":["../../../lib/components/Toolbar/useToolbar.js"],"sourcesContent":["import * as React from 'react';\nimport { useEventCallback, useControllableState } from '@fluentui/react-utilities';\nimport { getNativeElementProps } from '@fluentui/react-utilities';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\n/**\n * Create the state required to render Toolbar.\n *\n * The returned state can be modified with hooks such as useToolbarStyles_unstable,\n * before being passed to renderToolbar_unstable.\n *\n * @param props - props from this instance of Toolbar\n * @param ref - reference to root HTMLElement of Toolbar\n */\nexport const useToolbar_unstable = (props, ref) => {\n  const {\n    size = 'medium',\n    vertical = false\n  } = props;\n  const arrowNavigationProps = useArrowNavigationGroup({\n    circular: true,\n    axis: 'both'\n  });\n  const initialState = {\n    size,\n    vertical,\n    // TODO add appropriate props/defaults\n    components: {\n      // TODO add each slot's element type or component\n      root: 'div'\n    },\n    // TODO add appropriate slots, for example:\n    // mySlot: resolveShorthand(props.mySlot),\n    root: getNativeElementProps('div', {\n      role: 'toolbar',\n      ref,\n      ...(vertical && {\n        'aria-orientation': 'vertical'\n      }),\n      ...arrowNavigationProps,\n      ...props\n    })\n  };\n  const [checkedValues, onCheckedValueChange] = useToolbarSelectableState({\n    checkedValues: props.checkedValues,\n    defaultCheckedValues: props.defaultCheckedValues,\n    onCheckedValueChange: props.onCheckedValueChange\n  });\n  const handleToggleButton = useEventCallback((e, name, value, checked) => {\n    if (name && value) {\n      const checkedItems = (checkedValues === null || checkedValues === void 0 ? void 0 : checkedValues[name]) || [];\n      const newCheckedItems = [...checkedItems];\n      if (checked) {\n        newCheckedItems.splice(newCheckedItems.indexOf(value), 1);\n      } else {\n        newCheckedItems.push(value);\n      }\n      onCheckedValueChange === null || onCheckedValueChange === void 0 ? void 0 : onCheckedValueChange(e, {\n        name,\n        checkedItems: newCheckedItems\n      });\n    }\n  });\n  const handleRadio = useEventCallback((e, name, value, checked) => {\n    if (name && value) {\n      onCheckedValueChange === null || onCheckedValueChange === void 0 ? void 0 : onCheckedValueChange(e, {\n        name,\n        checkedItems: [value]\n      });\n    }\n  });\n  return {\n    ...initialState,\n    handleToggleButton,\n    handleRadio,\n    checkedValues: checkedValues !== null && checkedValues !== void 0 ? checkedValues : {}\n  };\n};\n/**\n * Adds appropriate state values and handlers for selectable items\n * i.e checkboxes and radios\n */\nconst useToolbarSelectableState = state => {\n  const [checkedValues, setCheckedValues] = useControllableState({\n    state: state.checkedValues,\n    defaultState: state.defaultCheckedValues,\n    initialState: {}\n  });\n  const {\n    onCheckedValueChange: onCheckedValueChangeOriginal\n  } = state;\n  const onCheckedValueChange = useEventCallback((e, {\n    name,\n    checkedItems\n  }) => {\n    if (onCheckedValueChangeOriginal) {\n      onCheckedValueChangeOriginal(e, {\n        name,\n        checkedItems\n      });\n    }\n    setCheckedValues(s => {\n      return s ? {\n        ...s,\n        [name]: checkedItems\n      } : {\n        [name]: checkedItems\n      };\n    });\n  });\n  return [checkedValues, onCheckedValueChange];\n};\n//# sourceMappingURL=useToolbar.js.map"],"names":["useToolbar_unstable","props","ref","size","vertical","arrowNavigationProps","useArrowNavigationGroup","circular","axis","initialState","components","root","getNativeElementProps","role","checkedValues","onCheckedValueChange","useToolbarSelectableState","defaultCheckedValues","handleToggleButton","useEventCallback","e","name","value","checked","checkedItems","newCheckedItems","splice","indexOf","push","handleRadio","state","setCheckedValues","useControllableState","defaultState","onCheckedValueChangeOriginal","s"],"mappings":";;;;+BAaaA;;aAAAA;;;6DAbU;gCACgC;8BAEf;AAUjC,MAAMA,sBAAsB,CAACC,OAAOC,MAAQ;IACjD,MAAM,EACJC,MAAO,SAAQ,EACfC,UAAW,KAAK,CAAA,EACjB,GAAGH;IACJ,MAAMI,uBAAuBC,IAAAA,qCAAuB,EAAC;QACnDC,UAAU,IAAI;QACdC,MAAM;IACR;IACA,MAAMC,eAAe;QACnBN;QACAC;QACA,sCAAsC;QACtCM,YAAY;YACV,iDAAiD;YACjDC,MAAM;QACR;QACA,2CAA2C;QAC3C,0CAA0C;QAC1CA,MAAMC,IAAAA,qCAAqB,EAAC,OAAO;YACjCC,MAAM;YACNX;YACA,GAAIE,YAAY;gBACd,oBAAoB;YACtB,CAAC;YACD,GAAGC,oBAAoB;YACvB,GAAGJ,KAAK;QACV;IACF;IACA,MAAM,CAACa,eAAeC,qBAAqB,GAAGC,0BAA0B;QACtEF,eAAeb,MAAMa,aAAa;QAClCG,sBAAsBhB,MAAMgB,oBAAoB;QAChDF,sBAAsBd,MAAMc,oBAAoB;IAClD;IACA,MAAMG,qBAAqBC,IAAAA,gCAAgB,EAAC,CAACC,GAAGC,MAAMC,OAAOC,UAAY;QACvE,IAAIF,QAAQC,OAAO;YACjB,MAAME,eAAe,AAACV,CAAAA,kBAAkB,IAAI,IAAIA,kBAAkB,KAAK,IAAI,KAAK,IAAIA,aAAa,CAACO,KAAK,AAAD,KAAM,EAAE;YAC9G,MAAMI,kBAAkB;mBAAID;aAAa;YACzC,IAAID,SAAS;gBACXE,gBAAgBC,MAAM,CAACD,gBAAgBE,OAAO,CAACL,QAAQ;YACzD,OAAO;gBACLG,gBAAgBG,IAAI,CAACN;YACvB,CAAC;YACDP,yBAAyB,IAAI,IAAIA,yBAAyB,KAAK,IAAI,KAAK,IAAIA,qBAAqBK,GAAG;gBAClGC;gBACAG,cAAcC;YAChB,EAAE;QACJ,CAAC;IACH;IACA,MAAMI,cAAcV,IAAAA,gCAAgB,EAAC,CAACC,GAAGC,MAAMC,OAAOC,UAAY;QAChE,IAAIF,QAAQC,OAAO;YACjBP,yBAAyB,IAAI,IAAIA,yBAAyB,KAAK,IAAI,KAAK,IAAIA,qBAAqBK,GAAG;gBAClGC;gBACAG,cAAc;oBAACF;iBAAM;YACvB,EAAE;QACJ,CAAC;IACH;IACA,OAAO;QACL,GAAGb,YAAY;QACfS;QACAW;QACAf,eAAeA,kBAAkB,IAAI,IAAIA,kBAAkB,KAAK,IAAIA,gBAAgB,CAAC,CAAC;IACxF;AACF;AACA;;;CAGC,GACD,MAAME,4BAA4Bc,CAAAA,QAAS;IACzC,MAAM,CAAChB,eAAeiB,iBAAiB,GAAGC,IAAAA,oCAAoB,EAAC;QAC7DF,OAAOA,MAAMhB,aAAa;QAC1BmB,cAAcH,MAAMb,oBAAoB;QACxCR,cAAc,CAAC;IACjB;IACA,MAAM,EACJM,sBAAsBmB,6BAA4B,EACnD,GAAGJ;IACJ,MAAMf,uBAAuBI,IAAAA,gCAAgB,EAAC,CAACC,GAAG,EAChDC,KAAI,EACJG,aAAY,EACb,GAAK;QACJ,IAAIU,8BAA8B;YAChCA,6BAA6Bd,GAAG;gBAC9BC;gBACAG;YACF;QACF,CAAC;QACDO,iBAAiBI,CAAAA,IAAK;YACpB,OAAOA,IAAI;gBACT,GAAGA,CAAC;gBACJ,CAACd,KAAK,EAAEG;YACV,IAAI;gBACF,CAACH,KAAK,EAAEG;YACV,CAAC;QACH;IACF;IACA,OAAO;QAACV;QAAeC;KAAqB;AAC9C,GACA,sCAAsC"}