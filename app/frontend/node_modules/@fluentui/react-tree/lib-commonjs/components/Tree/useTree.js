"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useTree_unstable", {
    enumerable: true,
    get: ()=>useTree_unstable
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
const _reactUtilities = require("@fluentui/react-utilities");
const _contexts = require("../../contexts");
const _hooks = require("../../hooks");
const _tokens = require("../../utils/tokens");
const useTree_unstable = (props, ref)=>{
    const isSubtree = (0, _contexts.useTreeContext_unstable)((ctx)=>ctx.level > 0);
    // as isSubtree is static, this doesn't break rule of hooks
    // and if this becomes an issue later on, this can be easily converted
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return isSubtree ? useSubtree(props, ref) : useRootTree(props, ref);
};
/**
 * Create the state required to render a sub-level Tree.
 *
 * @param props - props from this instance of Tree
 * @param ref - reference to root HTMLElement of Tree
 */ function useSubtree(props, ref) {
    const contextAppearance = (0, _contexts.useTreeContext_unstable)((ctx)=>ctx.appearance);
    const contextSize = (0, _contexts.useTreeContext_unstable)((ctx)=>ctx.size);
    const { appearance =contextAppearance !== null && contextAppearance !== void 0 ? contextAppearance : 'subtle' , size =contextSize !== null && contextSize !== void 0 ? contextSize : 'medium'  } = props;
    const parentLevel = (0, _contexts.useTreeContext_unstable)((ctx)=>ctx.level);
    const openItems = (0, _contexts.useTreeContext_unstable)((ctx)=>ctx.openItems);
    const requestOpenChange = (0, _contexts.useTreeContext_unstable)((ctx)=>ctx.requestOpenChange);
    const requestNavigation = (0, _contexts.useTreeContext_unstable)((ctx)=>ctx.requestNavigation);
    return {
        components: {
            root: 'div'
        },
        appearance,
        size,
        level: parentLevel + 1,
        root: (0, _reactUtilities.getNativeElementProps)('div', {
            ref,
            role: 'group',
            ...props
        }),
        openItems,
        requestOpenChange,
        requestNavigation
    };
}
/**
 * Create the state required to render the root level Tree.
 *
 * @param props - props from this instance of Tree
 * @param ref - reference to root HTMLElement of Tree
 */ function useRootTree(props, ref) {
    warnIfNoProperPropsRootTree(props);
    const { appearance ='subtle' , size ='medium'  } = props;
    const [openItems, updateOpenItems] = (0, _hooks.useOpenItemsState)(props);
    const [navigate, navigationRef] = (0, _hooks.useNestedTreeNavigation)();
    const requestOpenChange = (0, _reactUtilities.useEventCallback)((data)=>{
        var _props_onOpenChange;
        (_props_onOpenChange = props.onOpenChange) === null || _props_onOpenChange === void 0 ? void 0 : _props_onOpenChange.call(props, data.event, data);
        if (data.event.isDefaultPrevented()) {
            return;
        }
        return updateOpenItems(data);
    });
    const requestNavigation = (0, _reactUtilities.useEventCallback)((data)=>{
        var _props_onNavigation_unstable;
        (_props_onNavigation_unstable = props.onNavigation_unstable) === null || _props_onNavigation_unstable === void 0 ? void 0 : _props_onNavigation_unstable.call(props, data.event, data);
        if (data.event.isDefaultPrevented()) {
            return;
        }
        navigate(data);
        if (data.type === _tokens.treeDataTypes.arrowDown || data.type === _tokens.treeDataTypes.arrowUp) {
            data.event.preventDefault();
        }
    });
    return {
        components: {
            root: 'div'
        },
        appearance,
        size,
        level: 1,
        openItems,
        requestOpenChange,
        requestNavigation,
        root: (0, _reactUtilities.getNativeElementProps)('div', {
            ref: (0, _reactUtilities.useMergedRefs)(navigationRef, ref),
            role: 'tree',
            ...props
        })
    };
}
function warnIfNoProperPropsRootTree(props) {
    if (process.env.NODE_ENV === 'development') {
        if (!props['aria-label'] && !props['aria-labelledby']) {
            // eslint-disable-next-line no-console
            console.warn('Tree must have either a `aria-label` or `aria-labelledby` property defined');
        }
    }
} //# sourceMappingURL=useTree.js.map

//# sourceMappingURL=useTree.js.map