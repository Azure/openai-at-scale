"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useFlatTreeNavigation", {
    enumerable: true,
    get: ()=>useFlatTreeNavigation
});
const _reactSharedContexts = require("@fluentui/react-shared-contexts");
const _reactUtilities = require("@fluentui/react-utilities");
const _nextTypeAheadElement = require("../utils/nextTypeAheadElement");
const _tokens = require("../utils/tokens");
const _treeItemFilter = require("../utils/treeItemFilter");
const _useHTMLElementWalker = require("./useHTMLElementWalker");
const _useRovingTabIndexes = require("./useRovingTabIndexes");
function useFlatTreeNavigation(flatTreeItems) {
    const { targetDocument  } = (0, _reactSharedContexts.useFluent_unstable)();
    const [treeItemWalkerRef, treeItemWalkerRootRef] = (0, _useHTMLElementWalker.useHTMLElementWalkerRef)(_treeItemFilter.treeItemFilter);
    const [{ rove  }, rovingRootRef] = (0, _useRovingTabIndexes.useRovingTabIndex)(_treeItemFilter.treeItemFilter);
    function getNextElement(data) {
        if (!targetDocument || !treeItemWalkerRef.current) {
            return null;
        }
        const treeItemWalker = treeItemWalkerRef.current;
        switch(data.type){
            case _tokens.treeDataTypes.click:
                return data.target;
            case _tokens.treeDataTypes.typeAhead:
                treeItemWalker.currentElement = data.target;
                return (0, _nextTypeAheadElement.nextTypeAheadElement)(treeItemWalker, data.event.key);
            case _tokens.treeDataTypes.arrowLeft:
                return parentElement(flatTreeItems, data.target, targetDocument);
            case _tokens.treeDataTypes.arrowRight:
                treeItemWalker.currentElement = data.target;
                return firstChild(data.target, treeItemWalker);
            case _tokens.treeDataTypes.end:
                treeItemWalker.currentElement = treeItemWalker.root;
                return treeItemWalker.lastChild();
            case _tokens.treeDataTypes.home:
                treeItemWalker.currentElement = treeItemWalker.root;
                return treeItemWalker.firstChild();
            case _tokens.treeDataTypes.arrowDown:
                treeItemWalker.currentElement = data.target;
                return treeItemWalker.nextElement();
            case _tokens.treeDataTypes.arrowUp:
                treeItemWalker.currentElement = data.target;
                return treeItemWalker.previousElement();
        }
    }
    const navigate = (0, _reactUtilities.useEventCallback)((data)=>{
        const nextElement = getNextElement(data);
        if (nextElement) {
            rove(nextElement);
        }
    });
    return [
        navigate,
        (0, _reactUtilities.useMergedRefs)(treeItemWalkerRootRef, rovingRootRef)
    ];
}
function firstChild(target, treeWalker) {
    const nextElement = treeWalker.nextElement();
    if (!nextElement) {
        return null;
    }
    const nextElementAriaPosInSet = nextElement.getAttribute('aria-posinset');
    const nextElementAriaLevel = nextElement.getAttribute('aria-level');
    const targetAriaLevel = target.getAttribute('aria-level');
    if (nextElementAriaPosInSet === '1' && Number(nextElementAriaLevel) === Number(targetAriaLevel) + 1) {
        return nextElement;
    }
    return null;
}
function parentElement(flatTreeItems, target, document) {
    const flatTreeItem = flatTreeItems.get(target.id);
    if (flatTreeItem && flatTreeItem.parentId) {
        return document.getElementById(flatTreeItem.parentId);
    }
    return null;
} //# sourceMappingURL=useFlatTreeNavigation.js.map

//# sourceMappingURL=useFlatTreeNavigation.js.map