{"version":3,"sources":["../../lib/compose/getSlots.js"],"sourcesContent":["import * as React from 'react';\nimport { omit } from '../utils/omit';\n/**\n * Given the state and an array of slot names, will break out `slots` and `slotProps`\n * collections.\n *\n * The root is derived from a mix of `components` props and `as` prop.\n *\n * Slots will render as null if they are rendered as primitives with undefined children.\n *\n * The slotProps will always omit the `as` prop within them, and for slots that are string\n * primitives, the props will be filtered according to the slot type by the type system.\n * For example, if the slot is rendered `as: 'a'`, the props will be filtered for acceptable\n * anchor props. Note that this is only enforced at build time by Typescript -- there is no\n * runtime code filtering props in this function.\n *\n * @param state - State including slot definitions\n * @returns An object containing the `slots` map and `slotProps` map.\n */\nexport function getSlots(state) {\n  const slots = {};\n  const slotProps = {};\n  const slotNames = Object.keys(state.components);\n  for (const slotName of slotNames) {\n    const [slot, props] = getSlot(state, slotName);\n    slots[slotName] = slot;\n    slotProps[slotName] = props;\n  }\n  return {\n    slots,\n    slotProps: slotProps\n  };\n}\nfunction getSlot(state, slotName) {\n  var _state_components, _state_components1, _state_slotName;\n  if (state[slotName] === undefined) {\n    return [null, undefined];\n  }\n  const {\n    children,\n    as: asProp,\n    ...rest\n  } = state[slotName];\n  const slot = ((_state_components = state.components) === null || _state_components === void 0 ? void 0 : _state_components[slotName]) === undefined || typeof state.components[slotName] === 'string' ? asProp || ((_state_components1 = state.components) === null || _state_components1 === void 0 ? void 0 : _state_components1[slotName]) || 'div' : state.components[slotName];\n  if (typeof children === 'function') {\n    const render = children;\n    return [React.Fragment, {\n      children: render(slot, rest)\n    }];\n  }\n  const shouldOmitAsProp = typeof slot === 'string' && ((_state_slotName = state[slotName]) === null || _state_slotName === void 0 ? void 0 : _state_slotName.as);\n  const slotProps = shouldOmitAsProp ? omit(state[slotName], ['as']) : state[slotName];\n  return [slot, slotProps];\n}\n//# sourceMappingURL=getSlots.js.map"],"names":["getSlots","state","slots","slotProps","slotNames","Object","keys","components","slotName","slot","props","getSlot","_state_components","_state_components1","_state_slotName","undefined","children","as","asProp","rest","render","React","Fragment","shouldOmitAsProp","omit"],"mappings":";;;;+BAmBgBA;;aAAAA;;;6DAnBO;sBACF;AAkBd,SAASA,SAASC,KAAK,EAAE;IAC9B,MAAMC,QAAQ,CAAC;IACf,MAAMC,YAAY,CAAC;IACnB,MAAMC,YAAYC,OAAOC,IAAI,CAACL,MAAMM,UAAU;IAC9C,KAAK,MAAMC,YAAYJ,UAAW;QAChC,MAAM,CAACK,MAAMC,MAAM,GAAGC,QAAQV,OAAOO;QACrCN,KAAK,CAACM,SAAS,GAAGC;QAClBN,SAAS,CAACK,SAAS,GAAGE;IACxB;IACA,OAAO;QACLR;QACAC,WAAWA;IACb;AACF;AACA,SAASQ,QAAQV,KAAK,EAAEO,QAAQ,EAAE;IAChC,IAAII,mBAAmBC,oBAAoBC;IAC3C,IAAIb,KAAK,CAACO,SAAS,KAAKO,WAAW;QACjC,OAAO;YAAC,IAAI;YAAEA;SAAU;IAC1B,CAAC;IACD,MAAM,EACJC,SAAQ,EACRC,IAAIC,OAAM,EACV,GAAGC,MACJ,GAAGlB,KAAK,CAACO,SAAS;IACnB,MAAMC,OAAO,AAAC,CAAA,AAACG,CAAAA,oBAAoBX,MAAMM,UAAU,AAAD,MAAO,IAAI,IAAIK,sBAAsB,KAAK,IAAI,KAAK,IAAIA,iBAAiB,CAACJ,SAAS,AAAD,MAAOO,aAAa,OAAOd,MAAMM,UAAU,CAACC,SAAS,KAAK,WAAWU,UAAW,CAAA,AAACL,CAAAA,qBAAqBZ,MAAMM,UAAU,AAAD,MAAO,IAAI,IAAIM,uBAAuB,KAAK,IAAI,KAAK,IAAIA,kBAAkB,CAACL,SAAS,AAAD,KAAM,QAAQP,MAAMM,UAAU,CAACC,SAAS;IACnX,IAAI,OAAOQ,aAAa,YAAY;QAClC,MAAMI,SAASJ;QACf,OAAO;YAACK,OAAMC,QAAQ;YAAE;gBACtBN,UAAUI,OAAOX,MAAMU;YACzB;SAAE;IACJ,CAAC;IACD,MAAMI,mBAAmB,OAAOd,SAAS,YAAa,CAAA,AAACK,CAAAA,kBAAkBb,KAAK,CAACO,SAAS,AAAD,MAAO,IAAI,IAAIM,oBAAoB,KAAK,IAAI,KAAK,IAAIA,gBAAgBG,EAAE,AAAD;IAC7J,MAAMd,YAAYoB,mBAAmBC,IAAAA,UAAI,EAACvB,KAAK,CAACO,SAAS,EAAE;QAAC;KAAK,IAAIP,KAAK,CAACO,SAAS;IACpF,OAAO;QAACC;QAAMN;KAAU;AAC1B,EACA,oCAAoC"}