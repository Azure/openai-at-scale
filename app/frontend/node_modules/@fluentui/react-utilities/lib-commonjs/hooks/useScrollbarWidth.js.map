{"version":3,"sources":["../../lib/hooks/useScrollbarWidth.js"],"sourcesContent":["import * as React from 'react';\nconst cache = /*#__PURE__*/new WeakMap();\n/**\n * @returns The width in pixels of the scrollbar in the user agent\n */\nexport function useScrollbarWidth(options) {\n  const {\n    targetDocument,\n    force\n  } = options;\n  return React.useMemo(() => {\n    if (!targetDocument) {\n      return 0;\n    }\n    if (!force && cache.has(targetDocument)) {\n      return cache.get(targetDocument);\n    }\n    const outer = targetDocument.createElement('div');\n    outer.style.visibility = 'hidden';\n    outer.style.overflow = 'scroll';\n    const inner = targetDocument.createElement('div');\n    outer.appendChild(inner);\n    targetDocument.body.appendChild(outer);\n    const scrollbarWidth = outer.offsetWidth - inner.offsetWidth;\n    outer.remove();\n    cache.set(targetDocument, scrollbarWidth);\n    return scrollbarWidth;\n  }, [targetDocument, force]);\n}\n//# sourceMappingURL=useScrollbarWidth.js.map"],"names":["useScrollbarWidth","cache","WeakMap","options","targetDocument","force","React","useMemo","has","get","outer","createElement","style","visibility","overflow","inner","appendChild","body","scrollbarWidth","offsetWidth","remove","set"],"mappings":";;;;+BAKgBA;;aAAAA;;;6DALO;AACvB,MAAMC,QAAQ,WAAW,GAAE,IAAIC;AAIxB,SAASF,kBAAkBG,OAAO,EAAE;IACzC,MAAM,EACJC,eAAc,EACdC,MAAK,EACN,GAAGF;IACJ,OAAOG,OAAMC,OAAO,CAAC,IAAM;QACzB,IAAI,CAACH,gBAAgB;YACnB,OAAO;QACT,CAAC;QACD,IAAI,CAACC,SAASJ,MAAMO,GAAG,CAACJ,iBAAiB;YACvC,OAAOH,MAAMQ,GAAG,CAACL;QACnB,CAAC;QACD,MAAMM,QAAQN,eAAeO,aAAa,CAAC;QAC3CD,MAAME,KAAK,CAACC,UAAU,GAAG;QACzBH,MAAME,KAAK,CAACE,QAAQ,GAAG;QACvB,MAAMC,QAAQX,eAAeO,aAAa,CAAC;QAC3CD,MAAMM,WAAW,CAACD;QAClBX,eAAea,IAAI,CAACD,WAAW,CAACN;QAChC,MAAMQ,iBAAiBR,MAAMS,WAAW,GAAGJ,MAAMI,WAAW;QAC5DT,MAAMU,MAAM;QACZnB,MAAMoB,GAAG,CAACjB,gBAAgBc;QAC1B,OAAOA;IACT,GAAG;QAACd;QAAgBC;KAAM;AAC5B,EACA,6CAA6C"}