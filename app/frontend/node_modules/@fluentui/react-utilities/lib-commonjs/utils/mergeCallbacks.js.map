{"version":3,"sources":["../../lib/utils/mergeCallbacks.js"],"sourcesContent":["/**\n * @internal\n * Combine two event callbacks into a single callback function that calls each one in order.\n *\n * Usage example:\n * ```ts\n * state.slot.onChange = mergeCallbacks(state.slot.onChange, ev => {\n *   // Handle onChange\n * });\n * ```\n *\n * The primary use is to avoid the need to capture an existing callback (`state.slot.onChange` in the example) to a\n * local variable before replacing with a new listener that calls the existing one. This helps avoid bugs like:\n * * Infinite recursion by calling the re-assigned state.slot.onChange if it's not captured to a local variable.\n * * Missing a call to the original onChange due to an early return or other conditional.\n *\n * If you need a callback that is stable between renders, wrap the result in {@link useEventCallback}.\n *\n * @param callback1 - The first callback to be called, or undefined\n * @param callback2 - The second callback to be called, or undefined\n *\n * @returns A function that that calls the provided functions in order\n */export function mergeCallbacks(callback1, callback2) {\n  return (...args) => {\n    callback1 === null || callback1 === void 0 ? void 0 : callback1(...args);\n    callback2 === null || callback2 === void 0 ? void 0 : callback2(...args);\n  };\n}\n//# sourceMappingURL=mergeCallbacks.js.map"],"names":["mergeCallbacks","callback1","callback2","args"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;CAsBC;;;;+BAAkBA;;aAAAA;;AAAT,SAASA,eAAeC,SAAS,EAAEC,SAAS,EAAE;IACtD,OAAO,CAAC,GAAGC,OAAS;QAClBF,cAAc,IAAI,IAAIA,cAAc,KAAK,IAAI,KAAK,IAAIA,aAAaE,KAAK;QACxED,cAAc,IAAI,IAAIA,cAAc,KAAK,IAAI,KAAK,IAAIA,aAAaC,KAAK;IAC1E;AACF,EACA,0CAA0C"}