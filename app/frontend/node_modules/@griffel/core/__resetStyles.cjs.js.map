{"version":3,"file":"__resetStyles.cjs.js","sources":["../../../packages/core/src/__resetStyles.ts"],"sourcesContent":["import { DEBUG_RESET_CLASSES } from './constants';\nimport type { MakeStylesOptions } from './types';\n\n/**\n * @internal\n */\nexport function __resetStyles(ltrClassName: string, rtlClassName: string | null, cssRules: string[]) {\n  const insertionCache: Record<string, boolean> = {};\n\n  function computeClassName(options: MakeStylesOptions): string {\n    const { dir, renderer } = options;\n\n    const isLTR = dir === 'ltr';\n    // As RTL classes are different they should have a different cache key for insertion\n    const rendererId = isLTR ? renderer.id : renderer.id + 'r';\n\n    if (insertionCache[rendererId] === undefined) {\n      renderer.insertCSSRules({ r: cssRules! });\n      insertionCache[rendererId] = true;\n    }\n\n    const className = isLTR ? ltrClassName : rtlClassName || ltrClassName;\n\n    if (process.env.NODE_ENV !== 'production') {\n      DEBUG_RESET_CLASSES[className] = 1;\n    }\n\n    return className;\n  }\n\n  return computeClassName;\n}\n"],"names":["__resetStyles","ltrClassName","rtlClassName","cssRules","insertionCache","computeClassName","options","dir","renderer","isLTR","rendererId","id","undefined","insertCSSRules","r","className","process","env","NODE_ENV","DEBUG_RESET_CLASSES"],"mappings":";;;;;;AAGA;;;SAGgBA,aAAa,CAACC,YAAoB,EAAEC,YAA2B,EAAEC,QAAkB;EACjG,MAAMC,cAAc,GAA4B,EAAE;EAElD,SAASC,gBAAgB,CAACC,OAA0B;IAClD,MAAM;MAAEC,GAAG;MAAEC;KAAU,GAAGF,OAAO;IAEjC,MAAMG,KAAK,GAAGF,GAAG,KAAK,KAAK;;IAE3B,MAAMG,UAAU,GAAGD,KAAK,GAAGD,QAAQ,CAACG,EAAE,GAAGH,QAAQ,CAACG,EAAE,GAAG,GAAG;IAE1D,IAAIP,cAAc,CAACM,UAAU,CAAC,KAAKE,SAAS,EAAE;MAC5CJ,QAAQ,CAACK,cAAc,CAAC;QAAEC,CAAC,EAAEX;OAAW,CAAC;MACzCC,cAAc,CAACM,UAAU,CAAC,GAAG,IAAI;;IAGnC,MAAMK,SAAS,GAAGN,KAAK,GAAGR,YAAY,GAAGC,YAAY,IAAID,YAAY;IAErE,IAAIe,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzCC,6BAAmB,CAACJ,SAAS,CAAC,GAAG,CAAC;;IAGpC,OAAOA,SAAS;;EAGlB,OAAOV,gBAAgB;AACzB;;;;"}