import { DEBUG_RESET_CLASSES } from './constants.esm.js';
import { resolveResetStyleRules } from './runtime/resolveResetStyleRules.esm.js';

function makeResetStyles(styles) {
  const insertionCache = {};
  let ltrClassName = null;
  let rtlClassName = null;
  let cssRules = null;
  function computeClassName(options) {
    const {
      dir,
      renderer
    } = options;
    if (ltrClassName === null) {
      [ltrClassName, rtlClassName, cssRules] = resolveResetStyleRules(styles);
    }
    const isLTR = dir === 'ltr';
    // As RTL classes are different they should have a different cache key for insertion
    const rendererId = isLTR ? renderer.id : renderer.id + 'r';
    if (insertionCache[rendererId] === undefined) {
      renderer.insertCSSRules({
        r: cssRules
      });
      insertionCache[rendererId] = true;
    }
    const className = isLTR ? ltrClassName : rtlClassName || ltrClassName;
    if (process.env.NODE_ENV !== 'production') {
      DEBUG_RESET_CLASSES[className] = 1;
    }
    return className;
  }
  return computeClassName;
}

export { makeResetStyles };
//# sourceMappingURL=makeResetStyles.esm.js.map
