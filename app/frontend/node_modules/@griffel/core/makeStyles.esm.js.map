{"version":3,"file":"makeStyles.esm.js","sources":["../../../packages/core/src/makeStyles.ts"],"sourcesContent":["import { debugData, isDevToolsEnabled, getSourceURLfromError } from './devtools';\nimport { resolveStyleRulesForSlots } from './resolveStyleRulesForSlots';\nimport { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots';\nimport { CSSClassesMapBySlot, CSSRulesByBucket, MakeStylesOptions, StylesBySlots } from './types';\n\nexport function makeStyles<Slots extends string | number>(stylesBySlots: StylesBySlots<Slots>) {\n  const insertionCache: Record<string, boolean> = {};\n\n  let classesMapBySlot: CSSClassesMapBySlot<Slots> | null = null;\n  let cssRules: CSSRulesByBucket | null = null;\n\n  let ltrClassNamesForSlots: Record<Slots, string> | null = null;\n  let rtlClassNamesForSlots: Record<Slots, string> | null = null;\n\n  let sourceURL: string | undefined;\n  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n    sourceURL = getSourceURLfromError();\n  }\n\n  function computeClasses(options: MakeStylesOptions): Record<Slots, string> {\n    const { dir, renderer } = options;\n\n    if (classesMapBySlot === null) {\n      [classesMapBySlot, cssRules] = resolveStyleRulesForSlots(stylesBySlots);\n    }\n\n    const isLTR = dir === 'ltr';\n    // As RTL classes are different they should have a different cache key for insertion\n    const rendererId = isLTR ? renderer.id : renderer.id + 'r';\n\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n\n    if (insertionCache[rendererId] === undefined) {\n      renderer.insertCSSRules(cssRules!);\n      insertionCache[rendererId] = true;\n    }\n    const classNamesForSlots = isLTR\n      ? (ltrClassNamesForSlots as Record<Slots, string>)\n      : (rtlClassNamesForSlots as Record<Slots, string>);\n\n    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n      debugData.addSequenceDetails(classNamesForSlots!, sourceURL);\n    }\n\n    return classNamesForSlots;\n  }\n\n  return computeClasses;\n}\n"],"names":["makeStyles","stylesBySlots","insertionCache","classesMapBySlot","cssRules","ltrClassNamesForSlots","rtlClassNamesForSlots","sourceURL","process","env","NODE_ENV","isDevToolsEnabled","getSourceURLfromError","computeClasses","options","dir","renderer","resolveStyleRulesForSlots","isLTR","rendererId","id","reduceToClassNameForSlots","undefined","insertCSSRules","classNamesForSlots","debugData","addSequenceDetails"],"mappings":";;;;;;;SAKgBA,UAAU,CAAgCC,aAAmC;EAC3F,MAAMC,cAAc,GAA4B,EAAE;EAElD,IAAIC,gBAAgB,GAAsC,IAAI;EAC9D,IAAIC,QAAQ,GAA4B,IAAI;EAE5C,IAAIC,qBAAqB,GAAiC,IAAI;EAC9D,IAAIC,qBAAqB,GAAiC,IAAI;EAE9D,IAAIC,SAA6B;EACjC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIC,iBAAiB,EAAE;IAC9DJ,SAAS,GAAGK,qBAAqB,EAAE;;EAGrC,SAASC,cAAc,CAACC,OAA0B;IAChD,MAAM;MAAEC,GAAG;MAAEC;KAAU,GAAGF,OAAO;IAEjC,IAAIX,gBAAgB,KAAK,IAAI,EAAE;MAC7B,CAACA,gBAAgB,EAAEC,QAAQ,CAAC,GAAGa,yBAAyB,CAAChB,aAAa,CAAC;;IAGzE,MAAMiB,KAAK,GAAGH,GAAG,KAAK,KAAK;;IAE3B,MAAMI,UAAU,GAAGD,KAAK,GAAGF,QAAQ,CAACI,EAAE,GAAGJ,QAAQ,CAACI,EAAE,GAAG,GAAG;IAE1D,IAAIF,KAAK,EAAE;MACT,IAAIb,qBAAqB,KAAK,IAAI,EAAE;QAClCA,qBAAqB,GAAGgB,yBAAyB,CAAClB,gBAAgB,EAAEY,GAAG,CAAC;;KAE3E,MAAM;MACL,IAAIT,qBAAqB,KAAK,IAAI,EAAE;QAClCA,qBAAqB,GAAGe,yBAAyB,CAAClB,gBAAgB,EAAEY,GAAG,CAAC;;;IAI5E,IAAIb,cAAc,CAACiB,UAAU,CAAC,KAAKG,SAAS,EAAE;MAC5CN,QAAQ,CAACO,cAAc,CAACnB,QAAS,CAAC;MAClCF,cAAc,CAACiB,UAAU,CAAC,GAAG,IAAI;;IAEnC,MAAMK,kBAAkB,GAAGN,KAAK,GAC3Bb,qBAA+C,GAC/CC,qBAA+C;IAEpD,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIC,iBAAiB,EAAE;MAC9Dc,SAAS,CAACC,kBAAkB,CAACF,kBAAmB,EAAEjB,SAAS,CAAC;;IAG9D,OAAOiB,kBAAkB;;EAG3B,OAAOX,cAAc;AACvB;;;;"}